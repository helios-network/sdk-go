// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: helios/hyperion/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryAttestationRequest struct {
	Nonce      uint64 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	ClaimHash  []byte `protobuf:"bytes,2,opt,name=claim_hash,json=claimHash,proto3" json:"claim_hash,omitempty"`
	HyperionId uint64 `protobuf:"varint,3,opt,name=hyperion_id,json=hyperionId,proto3" json:"hyperion_id,omitempty"`
}

func (m *QueryAttestationRequest) Reset()         { *m = QueryAttestationRequest{} }
func (m *QueryAttestationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAttestationRequest) ProtoMessage()    {}
func (*QueryAttestationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{2}
}
func (m *QueryAttestationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAttestationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAttestationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAttestationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAttestationRequest.Merge(m, src)
}
func (m *QueryAttestationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAttestationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAttestationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAttestationRequest proto.InternalMessageInfo

func (m *QueryAttestationRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *QueryAttestationRequest) GetClaimHash() []byte {
	if m != nil {
		return m.ClaimHash
	}
	return nil
}

func (m *QueryAttestationRequest) GetHyperionId() uint64 {
	if m != nil {
		return m.HyperionId
	}
	return 0
}

type QueryAttestationResponse struct {
	Attestation *Attestation `protobuf:"bytes,1,opt,name=attestation,proto3" json:"attestation,omitempty"`
}

func (m *QueryAttestationResponse) Reset()         { *m = QueryAttestationResponse{} }
func (m *QueryAttestationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAttestationResponse) ProtoMessage()    {}
func (*QueryAttestationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{3}
}
func (m *QueryAttestationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAttestationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAttestationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAttestationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAttestationResponse.Merge(m, src)
}
func (m *QueryAttestationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAttestationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAttestationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAttestationResponse proto.InternalMessageInfo

func (m *QueryAttestationResponse) GetAttestation() *Attestation {
	if m != nil {
		return m.Attestation
	}
	return nil
}

type QueryCurrentValsetRequest struct {
	HyperionId uint64 `protobuf:"varint,1,opt,name=hyperion_id,json=hyperionId,proto3" json:"hyperion_id,omitempty"`
}

func (m *QueryCurrentValsetRequest) Reset()         { *m = QueryCurrentValsetRequest{} }
func (m *QueryCurrentValsetRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCurrentValsetRequest) ProtoMessage()    {}
func (*QueryCurrentValsetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{4}
}
func (m *QueryCurrentValsetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCurrentValsetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCurrentValsetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCurrentValsetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCurrentValsetRequest.Merge(m, src)
}
func (m *QueryCurrentValsetRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCurrentValsetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCurrentValsetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCurrentValsetRequest proto.InternalMessageInfo

func (m *QueryCurrentValsetRequest) GetHyperionId() uint64 {
	if m != nil {
		return m.HyperionId
	}
	return 0
}

type QueryCurrentValsetResponse struct {
	Valset *Valset `protobuf:"bytes,1,opt,name=valset,proto3" json:"valset,omitempty"`
}

func (m *QueryCurrentValsetResponse) Reset()         { *m = QueryCurrentValsetResponse{} }
func (m *QueryCurrentValsetResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCurrentValsetResponse) ProtoMessage()    {}
func (*QueryCurrentValsetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{5}
}
func (m *QueryCurrentValsetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCurrentValsetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCurrentValsetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCurrentValsetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCurrentValsetResponse.Merge(m, src)
}
func (m *QueryCurrentValsetResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCurrentValsetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCurrentValsetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCurrentValsetResponse proto.InternalMessageInfo

func (m *QueryCurrentValsetResponse) GetValset() *Valset {
	if m != nil {
		return m.Valset
	}
	return nil
}

type QueryValsetRequestRequest struct {
	HyperionId uint64 `protobuf:"varint,1,opt,name=hyperion_id,json=hyperionId,proto3" json:"hyperion_id,omitempty"`
	Nonce      uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *QueryValsetRequestRequest) Reset()         { *m = QueryValsetRequestRequest{} }
func (m *QueryValsetRequestRequest) String() string { return proto.CompactTextString(m) }
func (*QueryValsetRequestRequest) ProtoMessage()    {}
func (*QueryValsetRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{6}
}
func (m *QueryValsetRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValsetRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValsetRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValsetRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValsetRequestRequest.Merge(m, src)
}
func (m *QueryValsetRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryValsetRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValsetRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValsetRequestRequest proto.InternalMessageInfo

func (m *QueryValsetRequestRequest) GetHyperionId() uint64 {
	if m != nil {
		return m.HyperionId
	}
	return 0
}

func (m *QueryValsetRequestRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type QueryValsetRequestResponse struct {
	Valset *Valset `protobuf:"bytes,1,opt,name=valset,proto3" json:"valset,omitempty"`
}

func (m *QueryValsetRequestResponse) Reset()         { *m = QueryValsetRequestResponse{} }
func (m *QueryValsetRequestResponse) String() string { return proto.CompactTextString(m) }
func (*QueryValsetRequestResponse) ProtoMessage()    {}
func (*QueryValsetRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{7}
}
func (m *QueryValsetRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValsetRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValsetRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValsetRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValsetRequestResponse.Merge(m, src)
}
func (m *QueryValsetRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryValsetRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValsetRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValsetRequestResponse proto.InternalMessageInfo

func (m *QueryValsetRequestResponse) GetValset() *Valset {
	if m != nil {
		return m.Valset
	}
	return nil
}

type QueryValsetConfirmRequest struct {
	HyperionId uint64 `protobuf:"varint,1,opt,name=hyperion_id,json=hyperionId,proto3" json:"hyperion_id,omitempty"`
	Nonce      uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Address    string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryValsetConfirmRequest) Reset()         { *m = QueryValsetConfirmRequest{} }
func (m *QueryValsetConfirmRequest) String() string { return proto.CompactTextString(m) }
func (*QueryValsetConfirmRequest) ProtoMessage()    {}
func (*QueryValsetConfirmRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{8}
}
func (m *QueryValsetConfirmRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValsetConfirmRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValsetConfirmRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValsetConfirmRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValsetConfirmRequest.Merge(m, src)
}
func (m *QueryValsetConfirmRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryValsetConfirmRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValsetConfirmRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValsetConfirmRequest proto.InternalMessageInfo

func (m *QueryValsetConfirmRequest) GetHyperionId() uint64 {
	if m != nil {
		return m.HyperionId
	}
	return 0
}

func (m *QueryValsetConfirmRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *QueryValsetConfirmRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryValsetConfirmResponse struct {
	Confirm *MsgValsetConfirm `protobuf:"bytes,1,opt,name=confirm,proto3" json:"confirm,omitempty"`
}

func (m *QueryValsetConfirmResponse) Reset()         { *m = QueryValsetConfirmResponse{} }
func (m *QueryValsetConfirmResponse) String() string { return proto.CompactTextString(m) }
func (*QueryValsetConfirmResponse) ProtoMessage()    {}
func (*QueryValsetConfirmResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{9}
}
func (m *QueryValsetConfirmResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValsetConfirmResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValsetConfirmResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValsetConfirmResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValsetConfirmResponse.Merge(m, src)
}
func (m *QueryValsetConfirmResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryValsetConfirmResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValsetConfirmResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValsetConfirmResponse proto.InternalMessageInfo

func (m *QueryValsetConfirmResponse) GetConfirm() *MsgValsetConfirm {
	if m != nil {
		return m.Confirm
	}
	return nil
}

type QueryValsetConfirmsByNonceRequest struct {
	HyperionId uint64 `protobuf:"varint,1,opt,name=hyperion_id,json=hyperionId,proto3" json:"hyperion_id,omitempty"`
	Nonce      uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *QueryValsetConfirmsByNonceRequest) Reset()         { *m = QueryValsetConfirmsByNonceRequest{} }
func (m *QueryValsetConfirmsByNonceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryValsetConfirmsByNonceRequest) ProtoMessage()    {}
func (*QueryValsetConfirmsByNonceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{10}
}
func (m *QueryValsetConfirmsByNonceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValsetConfirmsByNonceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValsetConfirmsByNonceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValsetConfirmsByNonceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValsetConfirmsByNonceRequest.Merge(m, src)
}
func (m *QueryValsetConfirmsByNonceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryValsetConfirmsByNonceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValsetConfirmsByNonceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValsetConfirmsByNonceRequest proto.InternalMessageInfo

func (m *QueryValsetConfirmsByNonceRequest) GetHyperionId() uint64 {
	if m != nil {
		return m.HyperionId
	}
	return 0
}

func (m *QueryValsetConfirmsByNonceRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type QueryValsetConfirmsByNonceResponse struct {
	Confirms []*MsgValsetConfirm `protobuf:"bytes,1,rep,name=confirms,proto3" json:"confirms,omitempty"`
}

func (m *QueryValsetConfirmsByNonceResponse) Reset()         { *m = QueryValsetConfirmsByNonceResponse{} }
func (m *QueryValsetConfirmsByNonceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryValsetConfirmsByNonceResponse) ProtoMessage()    {}
func (*QueryValsetConfirmsByNonceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{11}
}
func (m *QueryValsetConfirmsByNonceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValsetConfirmsByNonceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValsetConfirmsByNonceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValsetConfirmsByNonceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValsetConfirmsByNonceResponse.Merge(m, src)
}
func (m *QueryValsetConfirmsByNonceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryValsetConfirmsByNonceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValsetConfirmsByNonceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValsetConfirmsByNonceResponse proto.InternalMessageInfo

func (m *QueryValsetConfirmsByNonceResponse) GetConfirms() []*MsgValsetConfirm {
	if m != nil {
		return m.Confirms
	}
	return nil
}

type QueryLastValsetRequestsRequest struct {
	HyperionId uint64 `protobuf:"varint,1,opt,name=hyperion_id,json=hyperionId,proto3" json:"hyperion_id,omitempty"`
}

func (m *QueryLastValsetRequestsRequest) Reset()         { *m = QueryLastValsetRequestsRequest{} }
func (m *QueryLastValsetRequestsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLastValsetRequestsRequest) ProtoMessage()    {}
func (*QueryLastValsetRequestsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{12}
}
func (m *QueryLastValsetRequestsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastValsetRequestsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastValsetRequestsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastValsetRequestsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastValsetRequestsRequest.Merge(m, src)
}
func (m *QueryLastValsetRequestsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastValsetRequestsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastValsetRequestsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastValsetRequestsRequest proto.InternalMessageInfo

func (m *QueryLastValsetRequestsRequest) GetHyperionId() uint64 {
	if m != nil {
		return m.HyperionId
	}
	return 0
}

type QueryLastValsetRequestsResponse struct {
	Valsets []*Valset `protobuf:"bytes,1,rep,name=valsets,proto3" json:"valsets,omitempty"`
}

func (m *QueryLastValsetRequestsResponse) Reset()         { *m = QueryLastValsetRequestsResponse{} }
func (m *QueryLastValsetRequestsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLastValsetRequestsResponse) ProtoMessage()    {}
func (*QueryLastValsetRequestsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{13}
}
func (m *QueryLastValsetRequestsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastValsetRequestsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastValsetRequestsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastValsetRequestsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastValsetRequestsResponse.Merge(m, src)
}
func (m *QueryLastValsetRequestsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastValsetRequestsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastValsetRequestsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastValsetRequestsResponse proto.InternalMessageInfo

func (m *QueryLastValsetRequestsResponse) GetValsets() []*Valset {
	if m != nil {
		return m.Valsets
	}
	return nil
}

type QueryLastPendingValsetRequestByAddrRequest struct {
	HyperionId uint64 `protobuf:"varint,1,opt,name=hyperion_id,json=hyperionId,proto3" json:"hyperion_id,omitempty"`
	Address    string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryLastPendingValsetRequestByAddrRequest) Reset() {
	*m = QueryLastPendingValsetRequestByAddrRequest{}
}
func (m *QueryLastPendingValsetRequestByAddrRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryLastPendingValsetRequestByAddrRequest) ProtoMessage() {}
func (*QueryLastPendingValsetRequestByAddrRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{14}
}
func (m *QueryLastPendingValsetRequestByAddrRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastPendingValsetRequestByAddrRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastPendingValsetRequestByAddrRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastPendingValsetRequestByAddrRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastPendingValsetRequestByAddrRequest.Merge(m, src)
}
func (m *QueryLastPendingValsetRequestByAddrRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastPendingValsetRequestByAddrRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastPendingValsetRequestByAddrRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastPendingValsetRequestByAddrRequest proto.InternalMessageInfo

func (m *QueryLastPendingValsetRequestByAddrRequest) GetHyperionId() uint64 {
	if m != nil {
		return m.HyperionId
	}
	return 0
}

func (m *QueryLastPendingValsetRequestByAddrRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryLastPendingValsetRequestByAddrResponse struct {
	Valsets []*Valset `protobuf:"bytes,1,rep,name=valsets,proto3" json:"valsets,omitempty"`
}

func (m *QueryLastPendingValsetRequestByAddrResponse) Reset() {
	*m = QueryLastPendingValsetRequestByAddrResponse{}
}
func (m *QueryLastPendingValsetRequestByAddrResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryLastPendingValsetRequestByAddrResponse) ProtoMessage() {}
func (*QueryLastPendingValsetRequestByAddrResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{15}
}
func (m *QueryLastPendingValsetRequestByAddrResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastPendingValsetRequestByAddrResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastPendingValsetRequestByAddrResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastPendingValsetRequestByAddrResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastPendingValsetRequestByAddrResponse.Merge(m, src)
}
func (m *QueryLastPendingValsetRequestByAddrResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastPendingValsetRequestByAddrResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastPendingValsetRequestByAddrResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastPendingValsetRequestByAddrResponse proto.InternalMessageInfo

func (m *QueryLastPendingValsetRequestByAddrResponse) GetValsets() []*Valset {
	if m != nil {
		return m.Valsets
	}
	return nil
}

type QueryBatchFeeRequest struct {
	HyperionId uint64 `protobuf:"varint,1,opt,name=hyperion_id,json=hyperionId,proto3" json:"hyperion_id,omitempty"`
}

func (m *QueryBatchFeeRequest) Reset()         { *m = QueryBatchFeeRequest{} }
func (m *QueryBatchFeeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBatchFeeRequest) ProtoMessage()    {}
func (*QueryBatchFeeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{16}
}
func (m *QueryBatchFeeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBatchFeeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBatchFeeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBatchFeeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBatchFeeRequest.Merge(m, src)
}
func (m *QueryBatchFeeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBatchFeeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBatchFeeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBatchFeeRequest proto.InternalMessageInfo

func (m *QueryBatchFeeRequest) GetHyperionId() uint64 {
	if m != nil {
		return m.HyperionId
	}
	return 0
}

type QueryBatchFeeResponse struct {
	BatchFees []*BatchFees `protobuf:"bytes,1,rep,name=batchFees,proto3" json:"batchFees,omitempty"`
}

func (m *QueryBatchFeeResponse) Reset()         { *m = QueryBatchFeeResponse{} }
func (m *QueryBatchFeeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBatchFeeResponse) ProtoMessage()    {}
func (*QueryBatchFeeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{17}
}
func (m *QueryBatchFeeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBatchFeeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBatchFeeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBatchFeeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBatchFeeResponse.Merge(m, src)
}
func (m *QueryBatchFeeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBatchFeeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBatchFeeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBatchFeeResponse proto.InternalMessageInfo

func (m *QueryBatchFeeResponse) GetBatchFees() []*BatchFees {
	if m != nil {
		return m.BatchFees
	}
	return nil
}

type QueryBatchFeeWithMinimumFeeRequest struct {
	HyperionId      uint64     `protobuf:"varint,1,opt,name=hyperion_id,json=hyperionId,proto3" json:"hyperion_id,omitempty"`
	MinimumBatchFee types.Coin `protobuf:"bytes,2,opt,name=minimum_batch_fee,json=minimumBatchFee,proto3" json:"minimum_batch_fee"`
	MinimumTxFee    types.Coin `protobuf:"bytes,3,opt,name=minimum_tx_fee,json=minimumTxFee,proto3" json:"minimum_tx_fee"`
}

func (m *QueryBatchFeeWithMinimumFeeRequest) Reset()         { *m = QueryBatchFeeWithMinimumFeeRequest{} }
func (m *QueryBatchFeeWithMinimumFeeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBatchFeeWithMinimumFeeRequest) ProtoMessage()    {}
func (*QueryBatchFeeWithMinimumFeeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{18}
}
func (m *QueryBatchFeeWithMinimumFeeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBatchFeeWithMinimumFeeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBatchFeeWithMinimumFeeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBatchFeeWithMinimumFeeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBatchFeeWithMinimumFeeRequest.Merge(m, src)
}
func (m *QueryBatchFeeWithMinimumFeeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBatchFeeWithMinimumFeeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBatchFeeWithMinimumFeeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBatchFeeWithMinimumFeeRequest proto.InternalMessageInfo

func (m *QueryBatchFeeWithMinimumFeeRequest) GetHyperionId() uint64 {
	if m != nil {
		return m.HyperionId
	}
	return 0
}

func (m *QueryBatchFeeWithMinimumFeeRequest) GetMinimumBatchFee() types.Coin {
	if m != nil {
		return m.MinimumBatchFee
	}
	return types.Coin{}
}

func (m *QueryBatchFeeWithMinimumFeeRequest) GetMinimumTxFee() types.Coin {
	if m != nil {
		return m.MinimumTxFee
	}
	return types.Coin{}
}

type QueryBatchFeeWithMinimumFeeResponse struct {
	BatchFees []*BatchFeesWithIds `protobuf:"bytes,1,rep,name=batchFees,proto3" json:"batchFees,omitempty"`
}

func (m *QueryBatchFeeWithMinimumFeeResponse) Reset()         { *m = QueryBatchFeeWithMinimumFeeResponse{} }
func (m *QueryBatchFeeWithMinimumFeeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBatchFeeWithMinimumFeeResponse) ProtoMessage()    {}
func (*QueryBatchFeeWithMinimumFeeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{19}
}
func (m *QueryBatchFeeWithMinimumFeeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBatchFeeWithMinimumFeeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBatchFeeWithMinimumFeeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBatchFeeWithMinimumFeeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBatchFeeWithMinimumFeeResponse.Merge(m, src)
}
func (m *QueryBatchFeeWithMinimumFeeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBatchFeeWithMinimumFeeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBatchFeeWithMinimumFeeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBatchFeeWithMinimumFeeResponse proto.InternalMessageInfo

func (m *QueryBatchFeeWithMinimumFeeResponse) GetBatchFees() []*BatchFeesWithIds {
	if m != nil {
		return m.BatchFees
	}
	return nil
}

type QueryLastPendingBatchRequestByAddrRequest struct {
	HyperionId uint64 `protobuf:"varint,1,opt,name=hyperion_id,json=hyperionId,proto3" json:"hyperion_id,omitempty"`
	Address    string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryLastPendingBatchRequestByAddrRequest) Reset() {
	*m = QueryLastPendingBatchRequestByAddrRequest{}
}
func (m *QueryLastPendingBatchRequestByAddrRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryLastPendingBatchRequestByAddrRequest) ProtoMessage() {}
func (*QueryLastPendingBatchRequestByAddrRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{20}
}
func (m *QueryLastPendingBatchRequestByAddrRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastPendingBatchRequestByAddrRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastPendingBatchRequestByAddrRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastPendingBatchRequestByAddrRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastPendingBatchRequestByAddrRequest.Merge(m, src)
}
func (m *QueryLastPendingBatchRequestByAddrRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastPendingBatchRequestByAddrRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastPendingBatchRequestByAddrRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastPendingBatchRequestByAddrRequest proto.InternalMessageInfo

func (m *QueryLastPendingBatchRequestByAddrRequest) GetHyperionId() uint64 {
	if m != nil {
		return m.HyperionId
	}
	return 0
}

func (m *QueryLastPendingBatchRequestByAddrRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryLastPendingBatchRequestByAddrResponse struct {
	Batch *OutgoingTxBatch `protobuf:"bytes,1,opt,name=batch,proto3" json:"batch,omitempty"`
}

func (m *QueryLastPendingBatchRequestByAddrResponse) Reset() {
	*m = QueryLastPendingBatchRequestByAddrResponse{}
}
func (m *QueryLastPendingBatchRequestByAddrResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryLastPendingBatchRequestByAddrResponse) ProtoMessage() {}
func (*QueryLastPendingBatchRequestByAddrResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{21}
}
func (m *QueryLastPendingBatchRequestByAddrResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastPendingBatchRequestByAddrResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastPendingBatchRequestByAddrResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastPendingBatchRequestByAddrResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastPendingBatchRequestByAddrResponse.Merge(m, src)
}
func (m *QueryLastPendingBatchRequestByAddrResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastPendingBatchRequestByAddrResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastPendingBatchRequestByAddrResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastPendingBatchRequestByAddrResponse proto.InternalMessageInfo

func (m *QueryLastPendingBatchRequestByAddrResponse) GetBatch() *OutgoingTxBatch {
	if m != nil {
		return m.Batch
	}
	return nil
}

type QueryLastPendingBatchsRequestByAddrRequest struct {
	HyperionId uint64 `protobuf:"varint,1,opt,name=hyperion_id,json=hyperionId,proto3" json:"hyperion_id,omitempty"`
	Address    string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryLastPendingBatchsRequestByAddrRequest) Reset() {
	*m = QueryLastPendingBatchsRequestByAddrRequest{}
}
func (m *QueryLastPendingBatchsRequestByAddrRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryLastPendingBatchsRequestByAddrRequest) ProtoMessage() {}
func (*QueryLastPendingBatchsRequestByAddrRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{22}
}
func (m *QueryLastPendingBatchsRequestByAddrRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastPendingBatchsRequestByAddrRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastPendingBatchsRequestByAddrRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastPendingBatchsRequestByAddrRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastPendingBatchsRequestByAddrRequest.Merge(m, src)
}
func (m *QueryLastPendingBatchsRequestByAddrRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastPendingBatchsRequestByAddrRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastPendingBatchsRequestByAddrRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastPendingBatchsRequestByAddrRequest proto.InternalMessageInfo

func (m *QueryLastPendingBatchsRequestByAddrRequest) GetHyperionId() uint64 {
	if m != nil {
		return m.HyperionId
	}
	return 0
}

func (m *QueryLastPendingBatchsRequestByAddrRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryLastPendingBatchsRequestByAddrResponse struct {
	Batchs []*OutgoingTxBatch `protobuf:"bytes,1,rep,name=batchs,proto3" json:"batchs,omitempty"`
}

func (m *QueryLastPendingBatchsRequestByAddrResponse) Reset() {
	*m = QueryLastPendingBatchsRequestByAddrResponse{}
}
func (m *QueryLastPendingBatchsRequestByAddrResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryLastPendingBatchsRequestByAddrResponse) ProtoMessage() {}
func (*QueryLastPendingBatchsRequestByAddrResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{23}
}
func (m *QueryLastPendingBatchsRequestByAddrResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastPendingBatchsRequestByAddrResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastPendingBatchsRequestByAddrResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastPendingBatchsRequestByAddrResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastPendingBatchsRequestByAddrResponse.Merge(m, src)
}
func (m *QueryLastPendingBatchsRequestByAddrResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastPendingBatchsRequestByAddrResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastPendingBatchsRequestByAddrResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastPendingBatchsRequestByAddrResponse proto.InternalMessageInfo

func (m *QueryLastPendingBatchsRequestByAddrResponse) GetBatchs() []*OutgoingTxBatch {
	if m != nil {
		return m.Batchs
	}
	return nil
}

type QueryOutgoingTxBatchesRequest struct {
	HyperionId uint64 `protobuf:"varint,1,opt,name=hyperion_id,json=hyperionId,proto3" json:"hyperion_id,omitempty"`
}

func (m *QueryOutgoingTxBatchesRequest) Reset()         { *m = QueryOutgoingTxBatchesRequest{} }
func (m *QueryOutgoingTxBatchesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOutgoingTxBatchesRequest) ProtoMessage()    {}
func (*QueryOutgoingTxBatchesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{24}
}
func (m *QueryOutgoingTxBatchesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOutgoingTxBatchesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOutgoingTxBatchesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOutgoingTxBatchesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOutgoingTxBatchesRequest.Merge(m, src)
}
func (m *QueryOutgoingTxBatchesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOutgoingTxBatchesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOutgoingTxBatchesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOutgoingTxBatchesRequest proto.InternalMessageInfo

func (m *QueryOutgoingTxBatchesRequest) GetHyperionId() uint64 {
	if m != nil {
		return m.HyperionId
	}
	return 0
}

type QueryOutgoingTxBatchesResponse struct {
	Batches []*OutgoingTxBatch `protobuf:"bytes,1,rep,name=batches,proto3" json:"batches,omitempty"`
}

func (m *QueryOutgoingTxBatchesResponse) Reset()         { *m = QueryOutgoingTxBatchesResponse{} }
func (m *QueryOutgoingTxBatchesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOutgoingTxBatchesResponse) ProtoMessage()    {}
func (*QueryOutgoingTxBatchesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{25}
}
func (m *QueryOutgoingTxBatchesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOutgoingTxBatchesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOutgoingTxBatchesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOutgoingTxBatchesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOutgoingTxBatchesResponse.Merge(m, src)
}
func (m *QueryOutgoingTxBatchesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOutgoingTxBatchesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOutgoingTxBatchesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOutgoingTxBatchesResponse proto.InternalMessageInfo

func (m *QueryOutgoingTxBatchesResponse) GetBatches() []*OutgoingTxBatch {
	if m != nil {
		return m.Batches
	}
	return nil
}

type QueryBatchRequestByNonceRequest struct {
	HyperionId      uint64 `protobuf:"varint,1,opt,name=hyperion_id,json=hyperionId,proto3" json:"hyperion_id,omitempty"`
	Nonce           uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	ContractAddress string `protobuf:"bytes,3,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
}

func (m *QueryBatchRequestByNonceRequest) Reset()         { *m = QueryBatchRequestByNonceRequest{} }
func (m *QueryBatchRequestByNonceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBatchRequestByNonceRequest) ProtoMessage()    {}
func (*QueryBatchRequestByNonceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{26}
}
func (m *QueryBatchRequestByNonceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBatchRequestByNonceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBatchRequestByNonceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBatchRequestByNonceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBatchRequestByNonceRequest.Merge(m, src)
}
func (m *QueryBatchRequestByNonceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBatchRequestByNonceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBatchRequestByNonceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBatchRequestByNonceRequest proto.InternalMessageInfo

func (m *QueryBatchRequestByNonceRequest) GetHyperionId() uint64 {
	if m != nil {
		return m.HyperionId
	}
	return 0
}

func (m *QueryBatchRequestByNonceRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *QueryBatchRequestByNonceRequest) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

type QueryBatchRequestByNonceResponse struct {
	Batch *OutgoingTxBatch `protobuf:"bytes,1,opt,name=batch,proto3" json:"batch,omitempty"`
}

func (m *QueryBatchRequestByNonceResponse) Reset()         { *m = QueryBatchRequestByNonceResponse{} }
func (m *QueryBatchRequestByNonceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBatchRequestByNonceResponse) ProtoMessage()    {}
func (*QueryBatchRequestByNonceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{27}
}
func (m *QueryBatchRequestByNonceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBatchRequestByNonceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBatchRequestByNonceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBatchRequestByNonceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBatchRequestByNonceResponse.Merge(m, src)
}
func (m *QueryBatchRequestByNonceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBatchRequestByNonceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBatchRequestByNonceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBatchRequestByNonceResponse proto.InternalMessageInfo

func (m *QueryBatchRequestByNonceResponse) GetBatch() *OutgoingTxBatch {
	if m != nil {
		return m.Batch
	}
	return nil
}

type QueryBatchConfirmsRequest struct {
	HyperionId      uint64 `protobuf:"varint,1,opt,name=hyperion_id,json=hyperionId,proto3" json:"hyperion_id,omitempty"`
	Nonce           uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	ContractAddress string `protobuf:"bytes,3,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
}

func (m *QueryBatchConfirmsRequest) Reset()         { *m = QueryBatchConfirmsRequest{} }
func (m *QueryBatchConfirmsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBatchConfirmsRequest) ProtoMessage()    {}
func (*QueryBatchConfirmsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{28}
}
func (m *QueryBatchConfirmsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBatchConfirmsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBatchConfirmsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBatchConfirmsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBatchConfirmsRequest.Merge(m, src)
}
func (m *QueryBatchConfirmsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBatchConfirmsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBatchConfirmsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBatchConfirmsRequest proto.InternalMessageInfo

func (m *QueryBatchConfirmsRequest) GetHyperionId() uint64 {
	if m != nil {
		return m.HyperionId
	}
	return 0
}

func (m *QueryBatchConfirmsRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *QueryBatchConfirmsRequest) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

type QueryBatchConfirmsResponse struct {
	Confirms []*MsgConfirmBatch `protobuf:"bytes,1,rep,name=confirms,proto3" json:"confirms,omitempty"`
}

func (m *QueryBatchConfirmsResponse) Reset()         { *m = QueryBatchConfirmsResponse{} }
func (m *QueryBatchConfirmsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBatchConfirmsResponse) ProtoMessage()    {}
func (*QueryBatchConfirmsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{29}
}
func (m *QueryBatchConfirmsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBatchConfirmsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBatchConfirmsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBatchConfirmsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBatchConfirmsResponse.Merge(m, src)
}
func (m *QueryBatchConfirmsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBatchConfirmsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBatchConfirmsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBatchConfirmsResponse proto.InternalMessageInfo

func (m *QueryBatchConfirmsResponse) GetConfirms() []*MsgConfirmBatch {
	if m != nil {
		return m.Confirms
	}
	return nil
}

type QueryLastEventByAddrRequest struct {
	HyperionId uint64 `protobuf:"varint,1,opt,name=hyperion_id,json=hyperionId,proto3" json:"hyperion_id,omitempty"`
	Address    string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryLastEventByAddrRequest) Reset()         { *m = QueryLastEventByAddrRequest{} }
func (m *QueryLastEventByAddrRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLastEventByAddrRequest) ProtoMessage()    {}
func (*QueryLastEventByAddrRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{30}
}
func (m *QueryLastEventByAddrRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastEventByAddrRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastEventByAddrRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastEventByAddrRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastEventByAddrRequest.Merge(m, src)
}
func (m *QueryLastEventByAddrRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastEventByAddrRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastEventByAddrRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastEventByAddrRequest proto.InternalMessageInfo

func (m *QueryLastEventByAddrRequest) GetHyperionId() uint64 {
	if m != nil {
		return m.HyperionId
	}
	return 0
}

func (m *QueryLastEventByAddrRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryLastEventByAddrResponse struct {
	LastClaimEvent *LastClaimEvent `protobuf:"bytes,1,opt,name=last_claim_event,json=lastClaimEvent,proto3" json:"last_claim_event,omitempty"`
}

func (m *QueryLastEventByAddrResponse) Reset()         { *m = QueryLastEventByAddrResponse{} }
func (m *QueryLastEventByAddrResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLastEventByAddrResponse) ProtoMessage()    {}
func (*QueryLastEventByAddrResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{31}
}
func (m *QueryLastEventByAddrResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastEventByAddrResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastEventByAddrResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastEventByAddrResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastEventByAddrResponse.Merge(m, src)
}
func (m *QueryLastEventByAddrResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastEventByAddrResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastEventByAddrResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastEventByAddrResponse proto.InternalMessageInfo

func (m *QueryLastEventByAddrResponse) GetLastClaimEvent() *LastClaimEvent {
	if m != nil {
		return m.LastClaimEvent
	}
	return nil
}

type QueryTokenAddressToDenomRequest struct {
	HyperionId   uint64 `protobuf:"varint,1,opt,name=hyperion_id,json=hyperionId,proto3" json:"hyperion_id,omitempty"`
	TokenAddress string `protobuf:"bytes,2,opt,name=token_address,json=tokenAddress,proto3" json:"token_address,omitempty"`
}

func (m *QueryTokenAddressToDenomRequest) Reset()         { *m = QueryTokenAddressToDenomRequest{} }
func (m *QueryTokenAddressToDenomRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTokenAddressToDenomRequest) ProtoMessage()    {}
func (*QueryTokenAddressToDenomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{32}
}
func (m *QueryTokenAddressToDenomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenAddressToDenomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenAddressToDenomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenAddressToDenomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenAddressToDenomRequest.Merge(m, src)
}
func (m *QueryTokenAddressToDenomRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenAddressToDenomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenAddressToDenomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenAddressToDenomRequest proto.InternalMessageInfo

func (m *QueryTokenAddressToDenomRequest) GetHyperionId() uint64 {
	if m != nil {
		return m.HyperionId
	}
	return 0
}

func (m *QueryTokenAddressToDenomRequest) GetTokenAddress() string {
	if m != nil {
		return m.TokenAddress
	}
	return ""
}

type QueryTokenAddressToDenomResponse struct {
	Denom            string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	CosmosOriginated bool   `protobuf:"varint,2,opt,name=cosmos_originated,json=cosmosOriginated,proto3" json:"cosmos_originated,omitempty"`
}

func (m *QueryTokenAddressToDenomResponse) Reset()         { *m = QueryTokenAddressToDenomResponse{} }
func (m *QueryTokenAddressToDenomResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTokenAddressToDenomResponse) ProtoMessage()    {}
func (*QueryTokenAddressToDenomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{33}
}
func (m *QueryTokenAddressToDenomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenAddressToDenomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenAddressToDenomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenAddressToDenomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenAddressToDenomResponse.Merge(m, src)
}
func (m *QueryTokenAddressToDenomResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenAddressToDenomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenAddressToDenomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenAddressToDenomResponse proto.InternalMessageInfo

func (m *QueryTokenAddressToDenomResponse) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *QueryTokenAddressToDenomResponse) GetCosmosOriginated() bool {
	if m != nil {
		return m.CosmosOriginated
	}
	return false
}

type QueryDenomToTokenAddressRequest struct {
	HyperionId uint64 `protobuf:"varint,1,opt,name=hyperion_id,json=hyperionId,proto3" json:"hyperion_id,omitempty"`
	Denom      string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryDenomToTokenAddressRequest) Reset()         { *m = QueryDenomToTokenAddressRequest{} }
func (m *QueryDenomToTokenAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDenomToTokenAddressRequest) ProtoMessage()    {}
func (*QueryDenomToTokenAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{34}
}
func (m *QueryDenomToTokenAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDenomToTokenAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDenomToTokenAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDenomToTokenAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDenomToTokenAddressRequest.Merge(m, src)
}
func (m *QueryDenomToTokenAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDenomToTokenAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDenomToTokenAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDenomToTokenAddressRequest proto.InternalMessageInfo

func (m *QueryDenomToTokenAddressRequest) GetHyperionId() uint64 {
	if m != nil {
		return m.HyperionId
	}
	return 0
}

func (m *QueryDenomToTokenAddressRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type QueryDenomToTokenAddressResponse struct {
	TokenAddress     string `protobuf:"bytes,1,opt,name=token_address,json=tokenAddress,proto3" json:"token_address,omitempty"`
	CosmosOriginated bool   `protobuf:"varint,2,opt,name=cosmos_originated,json=cosmosOriginated,proto3" json:"cosmos_originated,omitempty"`
}

func (m *QueryDenomToTokenAddressResponse) Reset()         { *m = QueryDenomToTokenAddressResponse{} }
func (m *QueryDenomToTokenAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDenomToTokenAddressResponse) ProtoMessage()    {}
func (*QueryDenomToTokenAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{35}
}
func (m *QueryDenomToTokenAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDenomToTokenAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDenomToTokenAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDenomToTokenAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDenomToTokenAddressResponse.Merge(m, src)
}
func (m *QueryDenomToTokenAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDenomToTokenAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDenomToTokenAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDenomToTokenAddressResponse proto.InternalMessageInfo

func (m *QueryDenomToTokenAddressResponse) GetTokenAddress() string {
	if m != nil {
		return m.TokenAddress
	}
	return ""
}

func (m *QueryDenomToTokenAddressResponse) GetCosmosOriginated() bool {
	if m != nil {
		return m.CosmosOriginated
	}
	return false
}

type QueryDelegateKeysByValidatorAddress struct {
	HyperionId       uint64 `protobuf:"varint,1,opt,name=hyperion_id,json=hyperionId,proto3" json:"hyperion_id,omitempty"`
	ValidatorAddress string `protobuf:"bytes,2,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
}

func (m *QueryDelegateKeysByValidatorAddress) Reset()         { *m = QueryDelegateKeysByValidatorAddress{} }
func (m *QueryDelegateKeysByValidatorAddress) String() string { return proto.CompactTextString(m) }
func (*QueryDelegateKeysByValidatorAddress) ProtoMessage()    {}
func (*QueryDelegateKeysByValidatorAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{36}
}
func (m *QueryDelegateKeysByValidatorAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegateKeysByValidatorAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegateKeysByValidatorAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegateKeysByValidatorAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegateKeysByValidatorAddress.Merge(m, src)
}
func (m *QueryDelegateKeysByValidatorAddress) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegateKeysByValidatorAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegateKeysByValidatorAddress.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegateKeysByValidatorAddress proto.InternalMessageInfo

func (m *QueryDelegateKeysByValidatorAddress) GetHyperionId() uint64 {
	if m != nil {
		return m.HyperionId
	}
	return 0
}

func (m *QueryDelegateKeysByValidatorAddress) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

type QueryDelegateKeysByValidatorAddressResponse struct {
	EthAddress          string `protobuf:"bytes,1,opt,name=eth_address,json=ethAddress,proto3" json:"eth_address,omitempty"`
	OrchestratorAddress string `protobuf:"bytes,2,opt,name=orchestrator_address,json=orchestratorAddress,proto3" json:"orchestrator_address,omitempty"`
}

func (m *QueryDelegateKeysByValidatorAddressResponse) Reset() {
	*m = QueryDelegateKeysByValidatorAddressResponse{}
}
func (m *QueryDelegateKeysByValidatorAddressResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryDelegateKeysByValidatorAddressResponse) ProtoMessage() {}
func (*QueryDelegateKeysByValidatorAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{37}
}
func (m *QueryDelegateKeysByValidatorAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegateKeysByValidatorAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegateKeysByValidatorAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegateKeysByValidatorAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegateKeysByValidatorAddressResponse.Merge(m, src)
}
func (m *QueryDelegateKeysByValidatorAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegateKeysByValidatorAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegateKeysByValidatorAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegateKeysByValidatorAddressResponse proto.InternalMessageInfo

func (m *QueryDelegateKeysByValidatorAddressResponse) GetEthAddress() string {
	if m != nil {
		return m.EthAddress
	}
	return ""
}

func (m *QueryDelegateKeysByValidatorAddressResponse) GetOrchestratorAddress() string {
	if m != nil {
		return m.OrchestratorAddress
	}
	return ""
}

type QueryDelegateKeysByEthAddress struct {
	HyperionId uint64 `protobuf:"varint,1,opt,name=hyperion_id,json=hyperionId,proto3" json:"hyperion_id,omitempty"`
	EthAddress string `protobuf:"bytes,2,opt,name=eth_address,json=ethAddress,proto3" json:"eth_address,omitempty"`
}

func (m *QueryDelegateKeysByEthAddress) Reset()         { *m = QueryDelegateKeysByEthAddress{} }
func (m *QueryDelegateKeysByEthAddress) String() string { return proto.CompactTextString(m) }
func (*QueryDelegateKeysByEthAddress) ProtoMessage()    {}
func (*QueryDelegateKeysByEthAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{38}
}
func (m *QueryDelegateKeysByEthAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegateKeysByEthAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegateKeysByEthAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegateKeysByEthAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegateKeysByEthAddress.Merge(m, src)
}
func (m *QueryDelegateKeysByEthAddress) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegateKeysByEthAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegateKeysByEthAddress.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegateKeysByEthAddress proto.InternalMessageInfo

func (m *QueryDelegateKeysByEthAddress) GetHyperionId() uint64 {
	if m != nil {
		return m.HyperionId
	}
	return 0
}

func (m *QueryDelegateKeysByEthAddress) GetEthAddress() string {
	if m != nil {
		return m.EthAddress
	}
	return ""
}

type QueryDelegateKeysByEthAddressResponse struct {
	ValidatorAddress    string `protobuf:"bytes,1,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	OrchestratorAddress string `protobuf:"bytes,2,opt,name=orchestrator_address,json=orchestratorAddress,proto3" json:"orchestrator_address,omitempty"`
}

func (m *QueryDelegateKeysByEthAddressResponse) Reset()         { *m = QueryDelegateKeysByEthAddressResponse{} }
func (m *QueryDelegateKeysByEthAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDelegateKeysByEthAddressResponse) ProtoMessage()    {}
func (*QueryDelegateKeysByEthAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{39}
}
func (m *QueryDelegateKeysByEthAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegateKeysByEthAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegateKeysByEthAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegateKeysByEthAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegateKeysByEthAddressResponse.Merge(m, src)
}
func (m *QueryDelegateKeysByEthAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegateKeysByEthAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegateKeysByEthAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegateKeysByEthAddressResponse proto.InternalMessageInfo

func (m *QueryDelegateKeysByEthAddressResponse) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *QueryDelegateKeysByEthAddressResponse) GetOrchestratorAddress() string {
	if m != nil {
		return m.OrchestratorAddress
	}
	return ""
}

type QueryDelegateKeysByOrchestratorAddress struct {
	HyperionId          uint64 `protobuf:"varint,1,opt,name=hyperion_id,json=hyperionId,proto3" json:"hyperion_id,omitempty"`
	OrchestratorAddress string `protobuf:"bytes,2,opt,name=orchestrator_address,json=orchestratorAddress,proto3" json:"orchestrator_address,omitempty"`
}

func (m *QueryDelegateKeysByOrchestratorAddress) Reset() {
	*m = QueryDelegateKeysByOrchestratorAddress{}
}
func (m *QueryDelegateKeysByOrchestratorAddress) String() string { return proto.CompactTextString(m) }
func (*QueryDelegateKeysByOrchestratorAddress) ProtoMessage()    {}
func (*QueryDelegateKeysByOrchestratorAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{40}
}
func (m *QueryDelegateKeysByOrchestratorAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegateKeysByOrchestratorAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegateKeysByOrchestratorAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegateKeysByOrchestratorAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegateKeysByOrchestratorAddress.Merge(m, src)
}
func (m *QueryDelegateKeysByOrchestratorAddress) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegateKeysByOrchestratorAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegateKeysByOrchestratorAddress.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegateKeysByOrchestratorAddress proto.InternalMessageInfo

func (m *QueryDelegateKeysByOrchestratorAddress) GetHyperionId() uint64 {
	if m != nil {
		return m.HyperionId
	}
	return 0
}

func (m *QueryDelegateKeysByOrchestratorAddress) GetOrchestratorAddress() string {
	if m != nil {
		return m.OrchestratorAddress
	}
	return ""
}

type QueryDelegateKeysByOrchestratorAddressResponse struct {
	ValidatorAddress string `protobuf:"bytes,1,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	EthAddress       string `protobuf:"bytes,2,opt,name=eth_address,json=ethAddress,proto3" json:"eth_address,omitempty"`
}

func (m *QueryDelegateKeysByOrchestratorAddressResponse) Reset() {
	*m = QueryDelegateKeysByOrchestratorAddressResponse{}
}
func (m *QueryDelegateKeysByOrchestratorAddressResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryDelegateKeysByOrchestratorAddressResponse) ProtoMessage() {}
func (*QueryDelegateKeysByOrchestratorAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{41}
}
func (m *QueryDelegateKeysByOrchestratorAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegateKeysByOrchestratorAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegateKeysByOrchestratorAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegateKeysByOrchestratorAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegateKeysByOrchestratorAddressResponse.Merge(m, src)
}
func (m *QueryDelegateKeysByOrchestratorAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegateKeysByOrchestratorAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegateKeysByOrchestratorAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegateKeysByOrchestratorAddressResponse proto.InternalMessageInfo

func (m *QueryDelegateKeysByOrchestratorAddressResponse) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *QueryDelegateKeysByOrchestratorAddressResponse) GetEthAddress() string {
	if m != nil {
		return m.EthAddress
	}
	return ""
}

type QueryPendingSendToChain struct {
	HyperionId    uint64 `protobuf:"varint,1,opt,name=hyperion_id,json=hyperionId,proto3" json:"hyperion_id,omitempty"`
	SenderAddress string `protobuf:"bytes,2,opt,name=sender_address,json=senderAddress,proto3" json:"sender_address,omitempty"`
}

func (m *QueryPendingSendToChain) Reset()         { *m = QueryPendingSendToChain{} }
func (m *QueryPendingSendToChain) String() string { return proto.CompactTextString(m) }
func (*QueryPendingSendToChain) ProtoMessage()    {}
func (*QueryPendingSendToChain) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{42}
}
func (m *QueryPendingSendToChain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingSendToChain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingSendToChain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingSendToChain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingSendToChain.Merge(m, src)
}
func (m *QueryPendingSendToChain) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingSendToChain) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingSendToChain.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingSendToChain proto.InternalMessageInfo

func (m *QueryPendingSendToChain) GetHyperionId() uint64 {
	if m != nil {
		return m.HyperionId
	}
	return 0
}

func (m *QueryPendingSendToChain) GetSenderAddress() string {
	if m != nil {
		return m.SenderAddress
	}
	return ""
}

type QueryPendingSendToChainResponse struct {
	TransfersInBatches []*OutgoingTransferTx `protobuf:"bytes,1,rep,name=transfers_in_batches,json=transfersInBatches,proto3" json:"transfers_in_batches,omitempty"`
	UnbatchedTransfers []*OutgoingTransferTx `protobuf:"bytes,2,rep,name=unbatched_transfers,json=unbatchedTransfers,proto3" json:"unbatched_transfers,omitempty"`
}

func (m *QueryPendingSendToChainResponse) Reset()         { *m = QueryPendingSendToChainResponse{} }
func (m *QueryPendingSendToChainResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPendingSendToChainResponse) ProtoMessage()    {}
func (*QueryPendingSendToChainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{43}
}
func (m *QueryPendingSendToChainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingSendToChainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingSendToChainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingSendToChainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingSendToChainResponse.Merge(m, src)
}
func (m *QueryPendingSendToChainResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingSendToChainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingSendToChainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingSendToChainResponse proto.InternalMessageInfo

func (m *QueryPendingSendToChainResponse) GetTransfersInBatches() []*OutgoingTransferTx {
	if m != nil {
		return m.TransfersInBatches
	}
	return nil
}

func (m *QueryPendingSendToChainResponse) GetUnbatchedTransfers() []*OutgoingTransferTx {
	if m != nil {
		return m.UnbatchedTransfers
	}
	return nil
}

type QueryAllPendingSendToChainRequest struct {
	HyperionId uint64 `protobuf:"varint,1,opt,name=hyperion_id,json=hyperionId,proto3" json:"hyperion_id,omitempty"`
}

func (m *QueryAllPendingSendToChainRequest) Reset()         { *m = QueryAllPendingSendToChainRequest{} }
func (m *QueryAllPendingSendToChainRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPendingSendToChainRequest) ProtoMessage()    {}
func (*QueryAllPendingSendToChainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{44}
}
func (m *QueryAllPendingSendToChainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPendingSendToChainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPendingSendToChainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPendingSendToChainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPendingSendToChainRequest.Merge(m, src)
}
func (m *QueryAllPendingSendToChainRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPendingSendToChainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPendingSendToChainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPendingSendToChainRequest proto.InternalMessageInfo

func (m *QueryAllPendingSendToChainRequest) GetHyperionId() uint64 {
	if m != nil {
		return m.HyperionId
	}
	return 0
}

type QueryAllPendingSendToChainResponse struct {
	TransfersInBatches []*OutgoingTransferTx `protobuf:"bytes,1,rep,name=transfers_in_batches,json=transfersInBatches,proto3" json:"transfers_in_batches,omitempty"`
	UnbatchedTransfers []*OutgoingTransferTx `protobuf:"bytes,2,rep,name=unbatched_transfers,json=unbatchedTransfers,proto3" json:"unbatched_transfers,omitempty"`
}

func (m *QueryAllPendingSendToChainResponse) Reset()         { *m = QueryAllPendingSendToChainResponse{} }
func (m *QueryAllPendingSendToChainResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPendingSendToChainResponse) ProtoMessage()    {}
func (*QueryAllPendingSendToChainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{45}
}
func (m *QueryAllPendingSendToChainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPendingSendToChainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPendingSendToChainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPendingSendToChainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPendingSendToChainResponse.Merge(m, src)
}
func (m *QueryAllPendingSendToChainResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPendingSendToChainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPendingSendToChainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPendingSendToChainResponse proto.InternalMessageInfo

func (m *QueryAllPendingSendToChainResponse) GetTransfersInBatches() []*OutgoingTransferTx {
	if m != nil {
		return m.TransfersInBatches
	}
	return nil
}

func (m *QueryAllPendingSendToChainResponse) GetUnbatchedTransfers() []*OutgoingTransferTx {
	if m != nil {
		return m.UnbatchedTransfers
	}
	return nil
}

// QueryModuleStateRequest is the request type for the Query/HyperionModuleState
// RPC method.
type QueryModuleStateRequest struct {
}

func (m *QueryModuleStateRequest) Reset()         { *m = QueryModuleStateRequest{} }
func (m *QueryModuleStateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryModuleStateRequest) ProtoMessage()    {}
func (*QueryModuleStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{46}
}
func (m *QueryModuleStateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryModuleStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryModuleStateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryModuleStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryModuleStateRequest.Merge(m, src)
}
func (m *QueryModuleStateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryModuleStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryModuleStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryModuleStateRequest proto.InternalMessageInfo

// QueryModuleStateResponse is the response type for the Query/HyperionModuleState
// RPC method.
type QueryModuleStateResponse struct {
	State *GenesisState `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *QueryModuleStateResponse) Reset()         { *m = QueryModuleStateResponse{} }
func (m *QueryModuleStateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryModuleStateResponse) ProtoMessage()    {}
func (*QueryModuleStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{47}
}
func (m *QueryModuleStateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryModuleStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryModuleStateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryModuleStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryModuleStateResponse.Merge(m, src)
}
func (m *QueryModuleStateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryModuleStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryModuleStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryModuleStateResponse proto.InternalMessageInfo

func (m *QueryModuleStateResponse) GetState() *GenesisState {
	if m != nil {
		return m.State
	}
	return nil
}

type MissingNoncesRequest struct {
	HyperionId uint64 `protobuf:"varint,1,opt,name=hyperion_id,json=hyperionId,proto3" json:"hyperion_id,omitempty"`
}

func (m *MissingNoncesRequest) Reset()         { *m = MissingNoncesRequest{} }
func (m *MissingNoncesRequest) String() string { return proto.CompactTextString(m) }
func (*MissingNoncesRequest) ProtoMessage()    {}
func (*MissingNoncesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{48}
}
func (m *MissingNoncesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MissingNoncesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MissingNoncesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MissingNoncesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MissingNoncesRequest.Merge(m, src)
}
func (m *MissingNoncesRequest) XXX_Size() int {
	return m.Size()
}
func (m *MissingNoncesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MissingNoncesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MissingNoncesRequest proto.InternalMessageInfo

func (m *MissingNoncesRequest) GetHyperionId() uint64 {
	if m != nil {
		return m.HyperionId
	}
	return 0
}

type MissingNoncesResponse struct {
	OperatorAddresses []string `protobuf:"bytes,1,rep,name=operator_addresses,json=operatorAddresses,proto3" json:"operator_addresses,omitempty"`
}

func (m *MissingNoncesResponse) Reset()         { *m = MissingNoncesResponse{} }
func (m *MissingNoncesResponse) String() string { return proto.CompactTextString(m) }
func (*MissingNoncesResponse) ProtoMessage()    {}
func (*MissingNoncesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{49}
}
func (m *MissingNoncesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MissingNoncesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MissingNoncesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MissingNoncesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MissingNoncesResponse.Merge(m, src)
}
func (m *MissingNoncesResponse) XXX_Size() int {
	return m.Size()
}
func (m *MissingNoncesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MissingNoncesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MissingNoncesResponse proto.InternalMessageInfo

func (m *MissingNoncesResponse) GetOperatorAddresses() []string {
	if m != nil {
		return m.OperatorAddresses
	}
	return nil
}

type QueryGetHyperionIdFromChainIdRequest struct {
	ChainId uint64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *QueryGetHyperionIdFromChainIdRequest) Reset()         { *m = QueryGetHyperionIdFromChainIdRequest{} }
func (m *QueryGetHyperionIdFromChainIdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetHyperionIdFromChainIdRequest) ProtoMessage()    {}
func (*QueryGetHyperionIdFromChainIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{50}
}
func (m *QueryGetHyperionIdFromChainIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetHyperionIdFromChainIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetHyperionIdFromChainIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetHyperionIdFromChainIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetHyperionIdFromChainIdRequest.Merge(m, src)
}
func (m *QueryGetHyperionIdFromChainIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetHyperionIdFromChainIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetHyperionIdFromChainIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetHyperionIdFromChainIdRequest proto.InternalMessageInfo

func (m *QueryGetHyperionIdFromChainIdRequest) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

type QueryGetHyperionIdFromChainIdResponse struct {
	HyperionId uint64 `protobuf:"varint,1,opt,name=hyperion_id,json=hyperionId,proto3" json:"hyperion_id,omitempty"`
}

func (m *QueryGetHyperionIdFromChainIdResponse) Reset()         { *m = QueryGetHyperionIdFromChainIdResponse{} }
func (m *QueryGetHyperionIdFromChainIdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetHyperionIdFromChainIdResponse) ProtoMessage()    {}
func (*QueryGetHyperionIdFromChainIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{51}
}
func (m *QueryGetHyperionIdFromChainIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetHyperionIdFromChainIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetHyperionIdFromChainIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetHyperionIdFromChainIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetHyperionIdFromChainIdResponse.Merge(m, src)
}
func (m *QueryGetHyperionIdFromChainIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetHyperionIdFromChainIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetHyperionIdFromChainIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetHyperionIdFromChainIdResponse proto.InternalMessageInfo

func (m *QueryGetHyperionIdFromChainIdResponse) GetHyperionId() uint64 {
	if m != nil {
		return m.HyperionId
	}
	return 0
}

type QueryGetLastObservedEthereumBlockHeightRequest struct {
	HyperionId uint64 `protobuf:"varint,1,opt,name=hyperion_id,json=hyperionId,proto3" json:"hyperion_id,omitempty"`
}

func (m *QueryGetLastObservedEthereumBlockHeightRequest) Reset() {
	*m = QueryGetLastObservedEthereumBlockHeightRequest{}
}
func (m *QueryGetLastObservedEthereumBlockHeightRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetLastObservedEthereumBlockHeightRequest) ProtoMessage() {}
func (*QueryGetLastObservedEthereumBlockHeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{52}
}
func (m *QueryGetLastObservedEthereumBlockHeightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLastObservedEthereumBlockHeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLastObservedEthereumBlockHeightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLastObservedEthereumBlockHeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLastObservedEthereumBlockHeightRequest.Merge(m, src)
}
func (m *QueryGetLastObservedEthereumBlockHeightRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLastObservedEthereumBlockHeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLastObservedEthereumBlockHeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLastObservedEthereumBlockHeightRequest proto.InternalMessageInfo

func (m *QueryGetLastObservedEthereumBlockHeightRequest) GetHyperionId() uint64 {
	if m != nil {
		return m.HyperionId
	}
	return 0
}

type QueryGetLastObservedEthereumBlockHeightResponse struct {
	LastObservedHeight *LastObservedEthereumBlockHeight `protobuf:"bytes,1,opt,name=last_observed_height,json=lastObservedHeight,proto3" json:"last_observed_height,omitempty"`
}

func (m *QueryGetLastObservedEthereumBlockHeightResponse) Reset() {
	*m = QueryGetLastObservedEthereumBlockHeightResponse{}
}
func (m *QueryGetLastObservedEthereumBlockHeightResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetLastObservedEthereumBlockHeightResponse) ProtoMessage() {}
func (*QueryGetLastObservedEthereumBlockHeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{53}
}
func (m *QueryGetLastObservedEthereumBlockHeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLastObservedEthereumBlockHeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLastObservedEthereumBlockHeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLastObservedEthereumBlockHeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLastObservedEthereumBlockHeightResponse.Merge(m, src)
}
func (m *QueryGetLastObservedEthereumBlockHeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLastObservedEthereumBlockHeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLastObservedEthereumBlockHeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLastObservedEthereumBlockHeightResponse proto.InternalMessageInfo

func (m *QueryGetLastObservedEthereumBlockHeightResponse) GetLastObservedHeight() *LastObservedEthereumBlockHeight {
	if m != nil {
		return m.LastObservedHeight
	}
	return nil
}

type QueryGetLastObservedEventNonceRequest struct {
	HyperionId uint64 `protobuf:"varint,1,opt,name=hyperion_id,json=hyperionId,proto3" json:"hyperion_id,omitempty"`
}

func (m *QueryGetLastObservedEventNonceRequest) Reset()         { *m = QueryGetLastObservedEventNonceRequest{} }
func (m *QueryGetLastObservedEventNonceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetLastObservedEventNonceRequest) ProtoMessage()    {}
func (*QueryGetLastObservedEventNonceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{54}
}
func (m *QueryGetLastObservedEventNonceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLastObservedEventNonceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLastObservedEventNonceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLastObservedEventNonceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLastObservedEventNonceRequest.Merge(m, src)
}
func (m *QueryGetLastObservedEventNonceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLastObservedEventNonceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLastObservedEventNonceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLastObservedEventNonceRequest proto.InternalMessageInfo

func (m *QueryGetLastObservedEventNonceRequest) GetHyperionId() uint64 {
	if m != nil {
		return m.HyperionId
	}
	return 0
}

type QueryGetLastObservedEventNonceResponse struct {
	LastObservedEventNonce uint64 `protobuf:"varint,1,opt,name=last_observed_event_nonce,json=lastObservedEventNonce,proto3" json:"last_observed_event_nonce,omitempty"`
}

func (m *QueryGetLastObservedEventNonceResponse) Reset() {
	*m = QueryGetLastObservedEventNonceResponse{}
}
func (m *QueryGetLastObservedEventNonceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetLastObservedEventNonceResponse) ProtoMessage()    {}
func (*QueryGetLastObservedEventNonceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{55}
}
func (m *QueryGetLastObservedEventNonceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLastObservedEventNonceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLastObservedEventNonceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLastObservedEventNonceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLastObservedEventNonceResponse.Merge(m, src)
}
func (m *QueryGetLastObservedEventNonceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLastObservedEventNonceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLastObservedEventNonceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLastObservedEventNonceResponse proto.InternalMessageInfo

func (m *QueryGetLastObservedEventNonceResponse) GetLastObservedEventNonce() uint64 {
	if m != nil {
		return m.LastObservedEventNonce
	}
	return 0
}

type QueryGetTransactionsByPageAndSizeRequest struct {
	Address     string             `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Pagination  *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	FormatErc20 bool               `protobuf:"varint,3,opt,name=format_erc20,json=formatErc20,proto3" json:"format_erc20,omitempty"`
}

func (m *QueryGetTransactionsByPageAndSizeRequest) Reset() {
	*m = QueryGetTransactionsByPageAndSizeRequest{}
}
func (m *QueryGetTransactionsByPageAndSizeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTransactionsByPageAndSizeRequest) ProtoMessage()    {}
func (*QueryGetTransactionsByPageAndSizeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{56}
}
func (m *QueryGetTransactionsByPageAndSizeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTransactionsByPageAndSizeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTransactionsByPageAndSizeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTransactionsByPageAndSizeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTransactionsByPageAndSizeRequest.Merge(m, src)
}
func (m *QueryGetTransactionsByPageAndSizeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTransactionsByPageAndSizeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTransactionsByPageAndSizeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTransactionsByPageAndSizeRequest proto.InternalMessageInfo

func (m *QueryGetTransactionsByPageAndSizeRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryGetTransactionsByPageAndSizeRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryGetTransactionsByPageAndSizeRequest) GetFormatErc20() bool {
	if m != nil {
		return m.FormatErc20
	}
	return false
}

type QueryGetTransactionsByPageAndSizeResponse struct {
	Txs []*TransferTx `protobuf:"bytes,1,rep,name=txs,proto3" json:"txs,omitempty"`
}

func (m *QueryGetTransactionsByPageAndSizeResponse) Reset() {
	*m = QueryGetTransactionsByPageAndSizeResponse{}
}
func (m *QueryGetTransactionsByPageAndSizeResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetTransactionsByPageAndSizeResponse) ProtoMessage() {}
func (*QueryGetTransactionsByPageAndSizeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{57}
}
func (m *QueryGetTransactionsByPageAndSizeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTransactionsByPageAndSizeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTransactionsByPageAndSizeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTransactionsByPageAndSizeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTransactionsByPageAndSizeResponse.Merge(m, src)
}
func (m *QueryGetTransactionsByPageAndSizeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTransactionsByPageAndSizeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTransactionsByPageAndSizeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTransactionsByPageAndSizeResponse proto.InternalMessageInfo

func (m *QueryGetTransactionsByPageAndSizeResponse) GetTxs() []*TransferTx {
	if m != nil {
		return m.Txs
	}
	return nil
}

type QueryGetCounterpartyChainParamsByChainIdRequest struct {
	ChainId uint64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *QueryGetCounterpartyChainParamsByChainIdRequest) Reset() {
	*m = QueryGetCounterpartyChainParamsByChainIdRequest{}
}
func (m *QueryGetCounterpartyChainParamsByChainIdRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetCounterpartyChainParamsByChainIdRequest) ProtoMessage() {}
func (*QueryGetCounterpartyChainParamsByChainIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{58}
}
func (m *QueryGetCounterpartyChainParamsByChainIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCounterpartyChainParamsByChainIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCounterpartyChainParamsByChainIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCounterpartyChainParamsByChainIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCounterpartyChainParamsByChainIdRequest.Merge(m, src)
}
func (m *QueryGetCounterpartyChainParamsByChainIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCounterpartyChainParamsByChainIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCounterpartyChainParamsByChainIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCounterpartyChainParamsByChainIdRequest proto.InternalMessageInfo

func (m *QueryGetCounterpartyChainParamsByChainIdRequest) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

type QueryGetCounterpartyChainParamsByChainIdResponse struct {
	CounterpartyChainParams *CounterpartyChainParams `protobuf:"bytes,1,opt,name=counterparty_chain_params,json=counterpartyChainParams,proto3" json:"counterparty_chain_params,omitempty"`
}

func (m *QueryGetCounterpartyChainParamsByChainIdResponse) Reset() {
	*m = QueryGetCounterpartyChainParamsByChainIdResponse{}
}
func (m *QueryGetCounterpartyChainParamsByChainIdResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetCounterpartyChainParamsByChainIdResponse) ProtoMessage() {}
func (*QueryGetCounterpartyChainParamsByChainIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{59}
}
func (m *QueryGetCounterpartyChainParamsByChainIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCounterpartyChainParamsByChainIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCounterpartyChainParamsByChainIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCounterpartyChainParamsByChainIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCounterpartyChainParamsByChainIdResponse.Merge(m, src)
}
func (m *QueryGetCounterpartyChainParamsByChainIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCounterpartyChainParamsByChainIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCounterpartyChainParamsByChainIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCounterpartyChainParamsByChainIdResponse proto.InternalMessageInfo

func (m *QueryGetCounterpartyChainParamsByChainIdResponse) GetCounterpartyChainParams() *CounterpartyChainParams {
	if m != nil {
		return m.CounterpartyChainParams
	}
	return nil
}

type QueryGetRpcListByChainIdRequest struct {
	ChainId uint64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *QueryGetRpcListByChainIdRequest) Reset()         { *m = QueryGetRpcListByChainIdRequest{} }
func (m *QueryGetRpcListByChainIdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRpcListByChainIdRequest) ProtoMessage()    {}
func (*QueryGetRpcListByChainIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{60}
}
func (m *QueryGetRpcListByChainIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRpcListByChainIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRpcListByChainIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRpcListByChainIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRpcListByChainIdRequest.Merge(m, src)
}
func (m *QueryGetRpcListByChainIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRpcListByChainIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRpcListByChainIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRpcListByChainIdRequest proto.InternalMessageInfo

func (m *QueryGetRpcListByChainIdRequest) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

type QueryGetRpcListByChainIdResponse struct {
	Rpcs []*Rpc `protobuf:"bytes,1,rep,name=rpcs,proto3" json:"rpcs,omitempty"`
}

func (m *QueryGetRpcListByChainIdResponse) Reset()         { *m = QueryGetRpcListByChainIdResponse{} }
func (m *QueryGetRpcListByChainIdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRpcListByChainIdResponse) ProtoMessage()    {}
func (*QueryGetRpcListByChainIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{61}
}
func (m *QueryGetRpcListByChainIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRpcListByChainIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRpcListByChainIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRpcListByChainIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRpcListByChainIdResponse.Merge(m, src)
}
func (m *QueryGetRpcListByChainIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRpcListByChainIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRpcListByChainIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRpcListByChainIdResponse proto.InternalMessageInfo

func (m *QueryGetRpcListByChainIdResponse) GetRpcs() []*Rpc {
	if m != nil {
		return m.Rpcs
	}
	return nil
}

type QueryGetDelegateKeysByAddressRequest struct {
	EthAddress string `protobuf:"bytes,1,opt,name=eth_address,json=ethAddress,proto3" json:"eth_address,omitempty"`
}

func (m *QueryGetDelegateKeysByAddressRequest) Reset()         { *m = QueryGetDelegateKeysByAddressRequest{} }
func (m *QueryGetDelegateKeysByAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetDelegateKeysByAddressRequest) ProtoMessage()    {}
func (*QueryGetDelegateKeysByAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{62}
}
func (m *QueryGetDelegateKeysByAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDelegateKeysByAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDelegateKeysByAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDelegateKeysByAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDelegateKeysByAddressRequest.Merge(m, src)
}
func (m *QueryGetDelegateKeysByAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDelegateKeysByAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDelegateKeysByAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDelegateKeysByAddressRequest proto.InternalMessageInfo

func (m *QueryGetDelegateKeysByAddressRequest) GetEthAddress() string {
	if m != nil {
		return m.EthAddress
	}
	return ""
}

type QueryGetDelegateKeysByAddressResponse struct {
	ChainIds []uint64 `protobuf:"varint,1,rep,packed,name=chain_ids,json=chainIds,proto3" json:"chain_ids,omitempty"`
}

func (m *QueryGetDelegateKeysByAddressResponse) Reset()         { *m = QueryGetDelegateKeysByAddressResponse{} }
func (m *QueryGetDelegateKeysByAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetDelegateKeysByAddressResponse) ProtoMessage()    {}
func (*QueryGetDelegateKeysByAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{63}
}
func (m *QueryGetDelegateKeysByAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDelegateKeysByAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDelegateKeysByAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDelegateKeysByAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDelegateKeysByAddressResponse.Merge(m, src)
}
func (m *QueryGetDelegateKeysByAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDelegateKeysByAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDelegateKeysByAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDelegateKeysByAddressResponse proto.InternalMessageInfo

func (m *QueryGetDelegateKeysByAddressResponse) GetChainIds() []uint64 {
	if m != nil {
		return m.ChainIds
	}
	return nil
}

type QueryOutgoingExternalDataTxsRequest struct {
	HyperionId uint64 `protobuf:"varint,1,opt,name=hyperion_id,json=hyperionId,proto3" json:"hyperion_id,omitempty"`
}

func (m *QueryOutgoingExternalDataTxsRequest) Reset()         { *m = QueryOutgoingExternalDataTxsRequest{} }
func (m *QueryOutgoingExternalDataTxsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOutgoingExternalDataTxsRequest) ProtoMessage()    {}
func (*QueryOutgoingExternalDataTxsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{64}
}
func (m *QueryOutgoingExternalDataTxsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOutgoingExternalDataTxsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOutgoingExternalDataTxsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOutgoingExternalDataTxsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOutgoingExternalDataTxsRequest.Merge(m, src)
}
func (m *QueryOutgoingExternalDataTxsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOutgoingExternalDataTxsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOutgoingExternalDataTxsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOutgoingExternalDataTxsRequest proto.InternalMessageInfo

func (m *QueryOutgoingExternalDataTxsRequest) GetHyperionId() uint64 {
	if m != nil {
		return m.HyperionId
	}
	return 0
}

type QueryOutgoingExternalDataTxsResponse struct {
	Txs []*OutgoingExternalDataTx `protobuf:"bytes,1,rep,name=txs,proto3" json:"txs,omitempty"`
}

func (m *QueryOutgoingExternalDataTxsResponse) Reset()         { *m = QueryOutgoingExternalDataTxsResponse{} }
func (m *QueryOutgoingExternalDataTxsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOutgoingExternalDataTxsResponse) ProtoMessage()    {}
func (*QueryOutgoingExternalDataTxsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{65}
}
func (m *QueryOutgoingExternalDataTxsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOutgoingExternalDataTxsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOutgoingExternalDataTxsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOutgoingExternalDataTxsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOutgoingExternalDataTxsResponse.Merge(m, src)
}
func (m *QueryOutgoingExternalDataTxsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOutgoingExternalDataTxsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOutgoingExternalDataTxsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOutgoingExternalDataTxsResponse proto.InternalMessageInfo

func (m *QueryOutgoingExternalDataTxsResponse) GetTxs() []*OutgoingExternalDataTx {
	if m != nil {
		return m.Txs
	}
	return nil
}

type QueryGetTokensOfChainRequest struct {
	Page    uint64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size_   uint64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	ChainId uint64 `protobuf:"varint,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *QueryGetTokensOfChainRequest) Reset()         { *m = QueryGetTokensOfChainRequest{} }
func (m *QueryGetTokensOfChainRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTokensOfChainRequest) ProtoMessage()    {}
func (*QueryGetTokensOfChainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{66}
}
func (m *QueryGetTokensOfChainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTokensOfChainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTokensOfChainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTokensOfChainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTokensOfChainRequest.Merge(m, src)
}
func (m *QueryGetTokensOfChainRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTokensOfChainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTokensOfChainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTokensOfChainRequest proto.InternalMessageInfo

func (m *QueryGetTokensOfChainRequest) GetPage() uint64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *QueryGetTokensOfChainRequest) GetSize_() uint64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *QueryGetTokensOfChainRequest) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

type QueryGetTokensOfChainResponse struct {
	Tokens     []*FullMetadataToken `protobuf:"bytes,1,rep,name=tokens,proto3" json:"tokens,omitempty"`
	Pagination *query.PageResponse  `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetTokensOfChainResponse) Reset()         { *m = QueryGetTokensOfChainResponse{} }
func (m *QueryGetTokensOfChainResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTokensOfChainResponse) ProtoMessage()    {}
func (*QueryGetTokensOfChainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{67}
}
func (m *QueryGetTokensOfChainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTokensOfChainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTokensOfChainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTokensOfChainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTokensOfChainResponse.Merge(m, src)
}
func (m *QueryGetTokensOfChainResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTokensOfChainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTokensOfChainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTokensOfChainResponse proto.InternalMessageInfo

func (m *QueryGetTokensOfChainResponse) GetTokens() []*FullMetadataToken {
	if m != nil {
		return m.Tokens
	}
	return nil
}

func (m *QueryGetTokensOfChainResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryOutgoingTxBatchesCountRequest struct {
	HyperionId uint64 `protobuf:"varint,1,opt,name=hyperion_id,json=hyperionId,proto3" json:"hyperion_id,omitempty"`
}

func (m *QueryOutgoingTxBatchesCountRequest) Reset()         { *m = QueryOutgoingTxBatchesCountRequest{} }
func (m *QueryOutgoingTxBatchesCountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOutgoingTxBatchesCountRequest) ProtoMessage()    {}
func (*QueryOutgoingTxBatchesCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{68}
}
func (m *QueryOutgoingTxBatchesCountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOutgoingTxBatchesCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOutgoingTxBatchesCountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOutgoingTxBatchesCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOutgoingTxBatchesCountRequest.Merge(m, src)
}
func (m *QueryOutgoingTxBatchesCountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOutgoingTxBatchesCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOutgoingTxBatchesCountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOutgoingTxBatchesCountRequest proto.InternalMessageInfo

func (m *QueryOutgoingTxBatchesCountRequest) GetHyperionId() uint64 {
	if m != nil {
		return m.HyperionId
	}
	return 0
}

type QueryOutgoingTxBatchesCountResponse struct {
	TxCount    uint64 `protobuf:"varint,1,opt,name=tx_count,json=txCount,proto3" json:"tx_count,omitempty"`
	BatchCount uint64 `protobuf:"varint,2,opt,name=batch_count,json=batchCount,proto3" json:"batch_count,omitempty"`
}

func (m *QueryOutgoingTxBatchesCountResponse) Reset()         { *m = QueryOutgoingTxBatchesCountResponse{} }
func (m *QueryOutgoingTxBatchesCountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOutgoingTxBatchesCountResponse) ProtoMessage()    {}
func (*QueryOutgoingTxBatchesCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{69}
}
func (m *QueryOutgoingTxBatchesCountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOutgoingTxBatchesCountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOutgoingTxBatchesCountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOutgoingTxBatchesCountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOutgoingTxBatchesCountResponse.Merge(m, src)
}
func (m *QueryOutgoingTxBatchesCountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOutgoingTxBatchesCountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOutgoingTxBatchesCountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOutgoingTxBatchesCountResponse proto.InternalMessageInfo

func (m *QueryOutgoingTxBatchesCountResponse) GetTxCount() uint64 {
	if m != nil {
		return m.TxCount
	}
	return 0
}

func (m *QueryOutgoingTxBatchesCountResponse) GetBatchCount() uint64 {
	if m != nil {
		return m.BatchCount
	}
	return 0
}

type QueryHistoricalFeesRequest struct {
	HyperionId uint64 `protobuf:"varint,1,opt,name=hyperion_id,json=hyperionId,proto3" json:"hyperion_id,omitempty"`
}

func (m *QueryHistoricalFeesRequest) Reset()         { *m = QueryHistoricalFeesRequest{} }
func (m *QueryHistoricalFeesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryHistoricalFeesRequest) ProtoMessage()    {}
func (*QueryHistoricalFeesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{70}
}
func (m *QueryHistoricalFeesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHistoricalFeesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHistoricalFeesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHistoricalFeesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHistoricalFeesRequest.Merge(m, src)
}
func (m *QueryHistoricalFeesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryHistoricalFeesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHistoricalFeesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHistoricalFeesRequest proto.InternalMessageInfo

func (m *QueryHistoricalFeesRequest) GetHyperionId() uint64 {
	if m != nil {
		return m.HyperionId
	}
	return 0
}

type QueryHistoricalFeesResponse struct {
	HistoricalFees []*types.Coin `protobuf:"bytes,1,rep,name=historical_fees,json=historicalFees,proto3" json:"historical_fees,omitempty"`
	Low            *types.Coin   `protobuf:"bytes,2,opt,name=low,proto3" json:"low,omitempty"`
	High           *types.Coin   `protobuf:"bytes,3,opt,name=high,proto3" json:"high,omitempty"`
	Average        *types.Coin   `protobuf:"bytes,4,opt,name=average,proto3" json:"average,omitempty"`
}

func (m *QueryHistoricalFeesResponse) Reset()         { *m = QueryHistoricalFeesResponse{} }
func (m *QueryHistoricalFeesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryHistoricalFeesResponse) ProtoMessage()    {}
func (*QueryHistoricalFeesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{71}
}
func (m *QueryHistoricalFeesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHistoricalFeesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHistoricalFeesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHistoricalFeesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHistoricalFeesResponse.Merge(m, src)
}
func (m *QueryHistoricalFeesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryHistoricalFeesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHistoricalFeesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHistoricalFeesResponse proto.InternalMessageInfo

func (m *QueryHistoricalFeesResponse) GetHistoricalFees() []*types.Coin {
	if m != nil {
		return m.HistoricalFees
	}
	return nil
}

func (m *QueryHistoricalFeesResponse) GetLow() *types.Coin {
	if m != nil {
		return m.Low
	}
	return nil
}

func (m *QueryHistoricalFeesResponse) GetHigh() *types.Coin {
	if m != nil {
		return m.High
	}
	return nil
}

func (m *QueryHistoricalFeesResponse) GetAverage() *types.Coin {
	if m != nil {
		return m.Average
	}
	return nil
}

type QueryGetOrchestratorsDataRequest struct {
	Orchestrators []string `protobuf:"bytes,1,rep,name=orchestrators,proto3" json:"orchestrators,omitempty"`
}

func (m *QueryGetOrchestratorsDataRequest) Reset()         { *m = QueryGetOrchestratorsDataRequest{} }
func (m *QueryGetOrchestratorsDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetOrchestratorsDataRequest) ProtoMessage()    {}
func (*QueryGetOrchestratorsDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{72}
}
func (m *QueryGetOrchestratorsDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOrchestratorsDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOrchestratorsDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOrchestratorsDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOrchestratorsDataRequest.Merge(m, src)
}
func (m *QueryGetOrchestratorsDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOrchestratorsDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOrchestratorsDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOrchestratorsDataRequest proto.InternalMessageInfo

func (m *QueryGetOrchestratorsDataRequest) GetOrchestrators() []string {
	if m != nil {
		return m.Orchestrators
	}
	return nil
}

type QueryGetOrchestratorsDataResponse struct {
	OrchestratorsData []*OrchestratorData `protobuf:"bytes,1,rep,name=orchestrators_data,json=orchestratorsData,proto3" json:"orchestrators_data,omitempty"`
}

func (m *QueryGetOrchestratorsDataResponse) Reset()         { *m = QueryGetOrchestratorsDataResponse{} }
func (m *QueryGetOrchestratorsDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetOrchestratorsDataResponse) ProtoMessage()    {}
func (*QueryGetOrchestratorsDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{73}
}
func (m *QueryGetOrchestratorsDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOrchestratorsDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOrchestratorsDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOrchestratorsDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOrchestratorsDataResponse.Merge(m, src)
}
func (m *QueryGetOrchestratorsDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOrchestratorsDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOrchestratorsDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOrchestratorsDataResponse proto.InternalMessageInfo

func (m *QueryGetOrchestratorsDataResponse) GetOrchestratorsData() []*OrchestratorData {
	if m != nil {
		return m.OrchestratorsData
	}
	return nil
}

type QueryGetOrchestratorDataRequest struct {
	OrchestratorAddress string `protobuf:"bytes,1,opt,name=orchestrator_address,json=orchestratorAddress,proto3" json:"orchestrator_address,omitempty"`
}

func (m *QueryGetOrchestratorDataRequest) Reset()         { *m = QueryGetOrchestratorDataRequest{} }
func (m *QueryGetOrchestratorDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetOrchestratorDataRequest) ProtoMessage()    {}
func (*QueryGetOrchestratorDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{74}
}
func (m *QueryGetOrchestratorDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOrchestratorDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOrchestratorDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOrchestratorDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOrchestratorDataRequest.Merge(m, src)
}
func (m *QueryGetOrchestratorDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOrchestratorDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOrchestratorDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOrchestratorDataRequest proto.InternalMessageInfo

func (m *QueryGetOrchestratorDataRequest) GetOrchestratorAddress() string {
	if m != nil {
		return m.OrchestratorAddress
	}
	return ""
}

type QueryGetOrchestratorDataResponse struct {
	OrchestratorData *OrchestratorData `protobuf:"bytes,1,opt,name=orchestrator_data,json=orchestratorData,proto3" json:"orchestrator_data,omitempty"`
}

func (m *QueryGetOrchestratorDataResponse) Reset()         { *m = QueryGetOrchestratorDataResponse{} }
func (m *QueryGetOrchestratorDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetOrchestratorDataResponse) ProtoMessage()    {}
func (*QueryGetOrchestratorDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{75}
}
func (m *QueryGetOrchestratorDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOrchestratorDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOrchestratorDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOrchestratorDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOrchestratorDataResponse.Merge(m, src)
}
func (m *QueryGetOrchestratorDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOrchestratorDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOrchestratorDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOrchestratorDataResponse proto.InternalMessageInfo

func (m *QueryGetOrchestratorDataResponse) GetOrchestratorData() *OrchestratorData {
	if m != nil {
		return m.OrchestratorData
	}
	return nil
}

type QueryGetOrchestratorHyperionDataRequest struct {
	OrchestratorAddress string `protobuf:"bytes,1,opt,name=orchestrator_address,json=orchestratorAddress,proto3" json:"orchestrator_address,omitempty"`
	HyperionId          uint64 `protobuf:"varint,2,opt,name=hyperion_id,json=hyperionId,proto3" json:"hyperion_id,omitempty"`
}

func (m *QueryGetOrchestratorHyperionDataRequest) Reset() {
	*m = QueryGetOrchestratorHyperionDataRequest{}
}
func (m *QueryGetOrchestratorHyperionDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetOrchestratorHyperionDataRequest) ProtoMessage()    {}
func (*QueryGetOrchestratorHyperionDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{76}
}
func (m *QueryGetOrchestratorHyperionDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOrchestratorHyperionDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOrchestratorHyperionDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOrchestratorHyperionDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOrchestratorHyperionDataRequest.Merge(m, src)
}
func (m *QueryGetOrchestratorHyperionDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOrchestratorHyperionDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOrchestratorHyperionDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOrchestratorHyperionDataRequest proto.InternalMessageInfo

func (m *QueryGetOrchestratorHyperionDataRequest) GetOrchestratorAddress() string {
	if m != nil {
		return m.OrchestratorAddress
	}
	return ""
}

func (m *QueryGetOrchestratorHyperionDataRequest) GetHyperionId() uint64 {
	if m != nil {
		return m.HyperionId
	}
	return 0
}

type QueryGetOrchestratorHyperionDataResponse struct {
	OrchestratorHyperionData *OrchestratorHyperionData `protobuf:"bytes,1,opt,name=orchestrator_hyperion_data,json=orchestratorHyperionData,proto3" json:"orchestrator_hyperion_data,omitempty"`
}

func (m *QueryGetOrchestratorHyperionDataResponse) Reset() {
	*m = QueryGetOrchestratorHyperionDataResponse{}
}
func (m *QueryGetOrchestratorHyperionDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetOrchestratorHyperionDataResponse) ProtoMessage()    {}
func (*QueryGetOrchestratorHyperionDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{77}
}
func (m *QueryGetOrchestratorHyperionDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOrchestratorHyperionDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOrchestratorHyperionDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOrchestratorHyperionDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOrchestratorHyperionDataResponse.Merge(m, src)
}
func (m *QueryGetOrchestratorHyperionDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOrchestratorHyperionDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOrchestratorHyperionDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOrchestratorHyperionDataResponse proto.InternalMessageInfo

func (m *QueryGetOrchestratorHyperionDataResponse) GetOrchestratorHyperionData() *OrchestratorHyperionData {
	if m != nil {
		return m.OrchestratorHyperionData
	}
	return nil
}

type QueryOutgoingTxBatchesWithOptionsRequest struct {
	HyperionId              uint64 `protobuf:"varint,1,opt,name=hyperion_id,json=hyperionId,proto3" json:"hyperion_id,omitempty"`
	BatchNonce              uint64 `protobuf:"varint,2,opt,name=batch_nonce,json=batchNonce,proto3" json:"batch_nonce,omitempty"`
	TokenContract           string `protobuf:"bytes,3,opt,name=token_contract,json=tokenContract,proto3" json:"token_contract,omitempty"`
	BatchTimeout            uint64 `protobuf:"varint,4,opt,name=batch_timeout,json=batchTimeout,proto3" json:"batch_timeout,omitempty"`
	Address                 string `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	CheckIfIHaveSignedBatch bool   `protobuf:"varint,6,opt,name=check_if_i_have_signed_batch,json=checkIfIHaveSignedBatch,proto3" json:"check_if_i_have_signed_batch,omitempty"`
}

func (m *QueryOutgoingTxBatchesWithOptionsRequest) Reset() {
	*m = QueryOutgoingTxBatchesWithOptionsRequest{}
}
func (m *QueryOutgoingTxBatchesWithOptionsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOutgoingTxBatchesWithOptionsRequest) ProtoMessage()    {}
func (*QueryOutgoingTxBatchesWithOptionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{78}
}
func (m *QueryOutgoingTxBatchesWithOptionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOutgoingTxBatchesWithOptionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOutgoingTxBatchesWithOptionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOutgoingTxBatchesWithOptionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOutgoingTxBatchesWithOptionsRequest.Merge(m, src)
}
func (m *QueryOutgoingTxBatchesWithOptionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOutgoingTxBatchesWithOptionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOutgoingTxBatchesWithOptionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOutgoingTxBatchesWithOptionsRequest proto.InternalMessageInfo

func (m *QueryOutgoingTxBatchesWithOptionsRequest) GetHyperionId() uint64 {
	if m != nil {
		return m.HyperionId
	}
	return 0
}

func (m *QueryOutgoingTxBatchesWithOptionsRequest) GetBatchNonce() uint64 {
	if m != nil {
		return m.BatchNonce
	}
	return 0
}

func (m *QueryOutgoingTxBatchesWithOptionsRequest) GetTokenContract() string {
	if m != nil {
		return m.TokenContract
	}
	return ""
}

func (m *QueryOutgoingTxBatchesWithOptionsRequest) GetBatchTimeout() uint64 {
	if m != nil {
		return m.BatchTimeout
	}
	return 0
}

func (m *QueryOutgoingTxBatchesWithOptionsRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryOutgoingTxBatchesWithOptionsRequest) GetCheckIfIHaveSignedBatch() bool {
	if m != nil {
		return m.CheckIfIHaveSignedBatch
	}
	return false
}

type QueryOutgoingTxBatchesWithOptionsResponse struct {
	Batches []*OutgoingTxBatch `protobuf:"bytes,1,rep,name=batches,proto3" json:"batches,omitempty"`
}

func (m *QueryOutgoingTxBatchesWithOptionsResponse) Reset() {
	*m = QueryOutgoingTxBatchesWithOptionsResponse{}
}
func (m *QueryOutgoingTxBatchesWithOptionsResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryOutgoingTxBatchesWithOptionsResponse) ProtoMessage() {}
func (*QueryOutgoingTxBatchesWithOptionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0fc6da5c0da7973, []int{79}
}
func (m *QueryOutgoingTxBatchesWithOptionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOutgoingTxBatchesWithOptionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOutgoingTxBatchesWithOptionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOutgoingTxBatchesWithOptionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOutgoingTxBatchesWithOptionsResponse.Merge(m, src)
}
func (m *QueryOutgoingTxBatchesWithOptionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOutgoingTxBatchesWithOptionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOutgoingTxBatchesWithOptionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOutgoingTxBatchesWithOptionsResponse proto.InternalMessageInfo

func (m *QueryOutgoingTxBatchesWithOptionsResponse) GetBatches() []*OutgoingTxBatch {
	if m != nil {
		return m.Batches
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "helios.hyperion.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "helios.hyperion.v1.QueryParamsResponse")
	proto.RegisterType((*QueryAttestationRequest)(nil), "helios.hyperion.v1.QueryAttestationRequest")
	proto.RegisterType((*QueryAttestationResponse)(nil), "helios.hyperion.v1.QueryAttestationResponse")
	proto.RegisterType((*QueryCurrentValsetRequest)(nil), "helios.hyperion.v1.QueryCurrentValsetRequest")
	proto.RegisterType((*QueryCurrentValsetResponse)(nil), "helios.hyperion.v1.QueryCurrentValsetResponse")
	proto.RegisterType((*QueryValsetRequestRequest)(nil), "helios.hyperion.v1.QueryValsetRequestRequest")
	proto.RegisterType((*QueryValsetRequestResponse)(nil), "helios.hyperion.v1.QueryValsetRequestResponse")
	proto.RegisterType((*QueryValsetConfirmRequest)(nil), "helios.hyperion.v1.QueryValsetConfirmRequest")
	proto.RegisterType((*QueryValsetConfirmResponse)(nil), "helios.hyperion.v1.QueryValsetConfirmResponse")
	proto.RegisterType((*QueryValsetConfirmsByNonceRequest)(nil), "helios.hyperion.v1.QueryValsetConfirmsByNonceRequest")
	proto.RegisterType((*QueryValsetConfirmsByNonceResponse)(nil), "helios.hyperion.v1.QueryValsetConfirmsByNonceResponse")
	proto.RegisterType((*QueryLastValsetRequestsRequest)(nil), "helios.hyperion.v1.QueryLastValsetRequestsRequest")
	proto.RegisterType((*QueryLastValsetRequestsResponse)(nil), "helios.hyperion.v1.QueryLastValsetRequestsResponse")
	proto.RegisterType((*QueryLastPendingValsetRequestByAddrRequest)(nil), "helios.hyperion.v1.QueryLastPendingValsetRequestByAddrRequest")
	proto.RegisterType((*QueryLastPendingValsetRequestByAddrResponse)(nil), "helios.hyperion.v1.QueryLastPendingValsetRequestByAddrResponse")
	proto.RegisterType((*QueryBatchFeeRequest)(nil), "helios.hyperion.v1.QueryBatchFeeRequest")
	proto.RegisterType((*QueryBatchFeeResponse)(nil), "helios.hyperion.v1.QueryBatchFeeResponse")
	proto.RegisterType((*QueryBatchFeeWithMinimumFeeRequest)(nil), "helios.hyperion.v1.QueryBatchFeeWithMinimumFeeRequest")
	proto.RegisterType((*QueryBatchFeeWithMinimumFeeResponse)(nil), "helios.hyperion.v1.QueryBatchFeeWithMinimumFeeResponse")
	proto.RegisterType((*QueryLastPendingBatchRequestByAddrRequest)(nil), "helios.hyperion.v1.QueryLastPendingBatchRequestByAddrRequest")
	proto.RegisterType((*QueryLastPendingBatchRequestByAddrResponse)(nil), "helios.hyperion.v1.QueryLastPendingBatchRequestByAddrResponse")
	proto.RegisterType((*QueryLastPendingBatchsRequestByAddrRequest)(nil), "helios.hyperion.v1.QueryLastPendingBatchsRequestByAddrRequest")
	proto.RegisterType((*QueryLastPendingBatchsRequestByAddrResponse)(nil), "helios.hyperion.v1.QueryLastPendingBatchsRequestByAddrResponse")
	proto.RegisterType((*QueryOutgoingTxBatchesRequest)(nil), "helios.hyperion.v1.QueryOutgoingTxBatchesRequest")
	proto.RegisterType((*QueryOutgoingTxBatchesResponse)(nil), "helios.hyperion.v1.QueryOutgoingTxBatchesResponse")
	proto.RegisterType((*QueryBatchRequestByNonceRequest)(nil), "helios.hyperion.v1.QueryBatchRequestByNonceRequest")
	proto.RegisterType((*QueryBatchRequestByNonceResponse)(nil), "helios.hyperion.v1.QueryBatchRequestByNonceResponse")
	proto.RegisterType((*QueryBatchConfirmsRequest)(nil), "helios.hyperion.v1.QueryBatchConfirmsRequest")
	proto.RegisterType((*QueryBatchConfirmsResponse)(nil), "helios.hyperion.v1.QueryBatchConfirmsResponse")
	proto.RegisterType((*QueryLastEventByAddrRequest)(nil), "helios.hyperion.v1.QueryLastEventByAddrRequest")
	proto.RegisterType((*QueryLastEventByAddrResponse)(nil), "helios.hyperion.v1.QueryLastEventByAddrResponse")
	proto.RegisterType((*QueryTokenAddressToDenomRequest)(nil), "helios.hyperion.v1.QueryTokenAddressToDenomRequest")
	proto.RegisterType((*QueryTokenAddressToDenomResponse)(nil), "helios.hyperion.v1.QueryTokenAddressToDenomResponse")
	proto.RegisterType((*QueryDenomToTokenAddressRequest)(nil), "helios.hyperion.v1.QueryDenomToTokenAddressRequest")
	proto.RegisterType((*QueryDenomToTokenAddressResponse)(nil), "helios.hyperion.v1.QueryDenomToTokenAddressResponse")
	proto.RegisterType((*QueryDelegateKeysByValidatorAddress)(nil), "helios.hyperion.v1.QueryDelegateKeysByValidatorAddress")
	proto.RegisterType((*QueryDelegateKeysByValidatorAddressResponse)(nil), "helios.hyperion.v1.QueryDelegateKeysByValidatorAddressResponse")
	proto.RegisterType((*QueryDelegateKeysByEthAddress)(nil), "helios.hyperion.v1.QueryDelegateKeysByEthAddress")
	proto.RegisterType((*QueryDelegateKeysByEthAddressResponse)(nil), "helios.hyperion.v1.QueryDelegateKeysByEthAddressResponse")
	proto.RegisterType((*QueryDelegateKeysByOrchestratorAddress)(nil), "helios.hyperion.v1.QueryDelegateKeysByOrchestratorAddress")
	proto.RegisterType((*QueryDelegateKeysByOrchestratorAddressResponse)(nil), "helios.hyperion.v1.QueryDelegateKeysByOrchestratorAddressResponse")
	proto.RegisterType((*QueryPendingSendToChain)(nil), "helios.hyperion.v1.QueryPendingSendToChain")
	proto.RegisterType((*QueryPendingSendToChainResponse)(nil), "helios.hyperion.v1.QueryPendingSendToChainResponse")
	proto.RegisterType((*QueryAllPendingSendToChainRequest)(nil), "helios.hyperion.v1.QueryAllPendingSendToChainRequest")
	proto.RegisterType((*QueryAllPendingSendToChainResponse)(nil), "helios.hyperion.v1.QueryAllPendingSendToChainResponse")
	proto.RegisterType((*QueryModuleStateRequest)(nil), "helios.hyperion.v1.QueryModuleStateRequest")
	proto.RegisterType((*QueryModuleStateResponse)(nil), "helios.hyperion.v1.QueryModuleStateResponse")
	proto.RegisterType((*MissingNoncesRequest)(nil), "helios.hyperion.v1.MissingNoncesRequest")
	proto.RegisterType((*MissingNoncesResponse)(nil), "helios.hyperion.v1.MissingNoncesResponse")
	proto.RegisterType((*QueryGetHyperionIdFromChainIdRequest)(nil), "helios.hyperion.v1.QueryGetHyperionIdFromChainIdRequest")
	proto.RegisterType((*QueryGetHyperionIdFromChainIdResponse)(nil), "helios.hyperion.v1.QueryGetHyperionIdFromChainIdResponse")
	proto.RegisterType((*QueryGetLastObservedEthereumBlockHeightRequest)(nil), "helios.hyperion.v1.QueryGetLastObservedEthereumBlockHeightRequest")
	proto.RegisterType((*QueryGetLastObservedEthereumBlockHeightResponse)(nil), "helios.hyperion.v1.QueryGetLastObservedEthereumBlockHeightResponse")
	proto.RegisterType((*QueryGetLastObservedEventNonceRequest)(nil), "helios.hyperion.v1.QueryGetLastObservedEventNonceRequest")
	proto.RegisterType((*QueryGetLastObservedEventNonceResponse)(nil), "helios.hyperion.v1.QueryGetLastObservedEventNonceResponse")
	proto.RegisterType((*QueryGetTransactionsByPageAndSizeRequest)(nil), "helios.hyperion.v1.QueryGetTransactionsByPageAndSizeRequest")
	proto.RegisterType((*QueryGetTransactionsByPageAndSizeResponse)(nil), "helios.hyperion.v1.QueryGetTransactionsByPageAndSizeResponse")
	proto.RegisterType((*QueryGetCounterpartyChainParamsByChainIdRequest)(nil), "helios.hyperion.v1.QueryGetCounterpartyChainParamsByChainIdRequest")
	proto.RegisterType((*QueryGetCounterpartyChainParamsByChainIdResponse)(nil), "helios.hyperion.v1.QueryGetCounterpartyChainParamsByChainIdResponse")
	proto.RegisterType((*QueryGetRpcListByChainIdRequest)(nil), "helios.hyperion.v1.QueryGetRpcListByChainIdRequest")
	proto.RegisterType((*QueryGetRpcListByChainIdResponse)(nil), "helios.hyperion.v1.QueryGetRpcListByChainIdResponse")
	proto.RegisterType((*QueryGetDelegateKeysByAddressRequest)(nil), "helios.hyperion.v1.QueryGetDelegateKeysByAddressRequest")
	proto.RegisterType((*QueryGetDelegateKeysByAddressResponse)(nil), "helios.hyperion.v1.QueryGetDelegateKeysByAddressResponse")
	proto.RegisterType((*QueryOutgoingExternalDataTxsRequest)(nil), "helios.hyperion.v1.QueryOutgoingExternalDataTxsRequest")
	proto.RegisterType((*QueryOutgoingExternalDataTxsResponse)(nil), "helios.hyperion.v1.QueryOutgoingExternalDataTxsResponse")
	proto.RegisterType((*QueryGetTokensOfChainRequest)(nil), "helios.hyperion.v1.QueryGetTokensOfChainRequest")
	proto.RegisterType((*QueryGetTokensOfChainResponse)(nil), "helios.hyperion.v1.QueryGetTokensOfChainResponse")
	proto.RegisterType((*QueryOutgoingTxBatchesCountRequest)(nil), "helios.hyperion.v1.QueryOutgoingTxBatchesCountRequest")
	proto.RegisterType((*QueryOutgoingTxBatchesCountResponse)(nil), "helios.hyperion.v1.QueryOutgoingTxBatchesCountResponse")
	proto.RegisterType((*QueryHistoricalFeesRequest)(nil), "helios.hyperion.v1.QueryHistoricalFeesRequest")
	proto.RegisterType((*QueryHistoricalFeesResponse)(nil), "helios.hyperion.v1.QueryHistoricalFeesResponse")
	proto.RegisterType((*QueryGetOrchestratorsDataRequest)(nil), "helios.hyperion.v1.QueryGetOrchestratorsDataRequest")
	proto.RegisterType((*QueryGetOrchestratorsDataResponse)(nil), "helios.hyperion.v1.QueryGetOrchestratorsDataResponse")
	proto.RegisterType((*QueryGetOrchestratorDataRequest)(nil), "helios.hyperion.v1.QueryGetOrchestratorDataRequest")
	proto.RegisterType((*QueryGetOrchestratorDataResponse)(nil), "helios.hyperion.v1.QueryGetOrchestratorDataResponse")
	proto.RegisterType((*QueryGetOrchestratorHyperionDataRequest)(nil), "helios.hyperion.v1.QueryGetOrchestratorHyperionDataRequest")
	proto.RegisterType((*QueryGetOrchestratorHyperionDataResponse)(nil), "helios.hyperion.v1.QueryGetOrchestratorHyperionDataResponse")
	proto.RegisterType((*QueryOutgoingTxBatchesWithOptionsRequest)(nil), "helios.hyperion.v1.QueryOutgoingTxBatchesWithOptionsRequest")
	proto.RegisterType((*QueryOutgoingTxBatchesWithOptionsResponse)(nil), "helios.hyperion.v1.QueryOutgoingTxBatchesWithOptionsResponse")
}

func init() { proto.RegisterFile("helios/hyperion/v1/query.proto", fileDescriptor_c0fc6da5c0da7973) }

var fileDescriptor_c0fc6da5c0da7973 = []byte{
	// 3505 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x5b, 0xdb, 0x6f, 0x1c, 0x49,
	0xd5, 0x4f, 0x3b, 0x8e, 0x13, 0x97, 0x73, 0x2d, 0x3b, 0x6b, 0xbb, 0x63, 0x8f, 0x9d, 0xb6, 0x73,
	0x75, 0x32, 0x63, 0x3b, 0xd7, 0xdd, 0x4d, 0x76, 0xd7, 0x76, 0x7c, 0x89, 0x36, 0xf9, 0x9c, 0x9d,
	0x58, 0x5f, 0x56, 0x2b, 0x56, 0xad, 0xf6, 0x4c, 0x79, 0xa6, 0x37, 0x33, 0xdd, 0xb3, 0xdd, 0x65,
	0x63, 0x6f, 0x08, 0xe2, 0xf2, 0xc0, 0x03, 0x2f, 0xac, 0x56, 0x42, 0x48, 0x8b, 0x04, 0x08, 0x21,
	0x1e, 0xd0, 0x0a, 0x81, 0x10, 0x12, 0x4f, 0x3c, 0x00, 0xd2, 0x0a, 0x01, 0x5a, 0x09, 0x04, 0xcb,
	0x0b, 0x42, 0x9b, 0xfd, 0x0b, 0x78, 0xe5, 0x05, 0x75, 0xd5, 0xa9, 0x9e, 0xee, 0x9e, 0xea, 0x9a,
	0x1e, 0x3b, 0x42, 0xe2, 0xcd, 0xae, 0x3e, 0x97, 0xdf, 0xa9, 0xcb, 0xa9, 0x53, 0xe7, 0x9c, 0x41,
	0xb9, 0x2a, 0xa9, 0xd9, 0xae, 0x5f, 0xa8, 0xee, 0x34, 0x88, 0x67, 0xbb, 0x4e, 0x61, 0x6b, 0xa6,
	0xf0, 0xee, 0x26, 0xf1, 0x76, 0xf2, 0x0d, 0xcf, 0xa5, 0x2e, 0xc6, 0xfc, 0x7b, 0x5e, 0x7c, 0xcf,
	0x6f, 0xcd, 0xe8, 0x17, 0x4b, 0xae, 0x5f, 0x77, 0xfd, 0xc2, 0xba, 0xe5, 0x13, 0x4e, 0x5c, 0xd8,
	0x9a, 0x59, 0x27, 0xd4, 0x9a, 0x29, 0x34, 0xac, 0x8a, 0xed, 0x58, 0x34, 0x20, 0x64, 0xfc, 0x7a,
	0x2e, 0x4a, 0x2b, 0xa8, 0x4a, 0xae, 0x2d, 0xbe, 0x4f, 0x4a, 0xf4, 0x5b, 0x94, 0x12, 0x9f, 0x46,
	0xa5, 0x8c, 0x4b, 0xa8, 0x2a, 0xc4, 0x21, 0xbe, 0xed, 0x03, 0xc5, 0x98, 0x84, 0xa2, 0x61, 0x79,
	0x56, 0x5d, 0x10, 0xc8, 0x0c, 0xa5, 0x3b, 0x0d, 0x22, 0xbe, 0x8f, 0x4a, 0xbe, 0xd7, 0xfd, 0x8a,
	0xea, 0x73, 0xc3, 0x75, 0x6b, 0x0a, 0xe9, 0xeb, 0x16, 0x2d, 0x55, 0xe1, 0xfb, 0x59, 0xc9, 0x77,
	0xb2, 0x4d, 0x89, 0xe7, 0x58, 0x35, 0xb3, 0x6c, 0x51, 0x0b, 0xe8, 0x46, 0x2a, 0xae, 0x5b, 0xa9,
	0x91, 0x82, 0xd5, 0xb0, 0x0b, 0x96, 0xe3, 0xb8, 0x7c, 0x16, 0x04, 0x88, 0x81, 0x8a, 0x5b, 0x71,
	0xd9, 0x9f, 0x85, 0xe0, 0x2f, 0x3e, 0x6a, 0x0c, 0x20, 0xfc, 0x46, 0xb0, 0x08, 0x0f, 0x98, 0xb9,
	0x45, 0xf2, 0xee, 0x26, 0xf1, 0xa9, 0xb1, 0x8a, 0xfa, 0x63, 0xa3, 0x7e, 0xc3, 0x75, 0x7c, 0x82,
	0x6f, 0xa2, 0x1e, 0x3e, 0x2d, 0x43, 0xda, 0xb8, 0x76, 0xbe, 0x6f, 0x56, 0xcf, 0xb7, 0x2e, 0x70,
	0x9e, 0xf3, 0xcc, 0x77, 0x7f, 0xfc, 0x8f, 0xb1, 0x7d, 0x45, 0xa0, 0x37, 0x5c, 0x34, 0xc8, 0x04,
	0xce, 0x35, 0x57, 0x07, 0x74, 0xe1, 0x01, 0x74, 0xc0, 0x71, 0x9d, 0x12, 0x61, 0x32, 0xbb, 0x8b,
	0xfc, 0x1f, 0x3c, 0x8a, 0x50, 0xa9, 0x66, 0xd9, 0x75, 0xb3, 0x6a, 0xf9, 0xd5, 0xa1, 0xae, 0x71,
	0xed, 0xfc, 0xe1, 0x62, 0x2f, 0x1b, 0x59, 0xb1, 0xfc, 0x2a, 0x1e, 0x43, 0x7d, 0x42, 0xa7, 0x69,
	0x97, 0x87, 0xf6, 0x33, 0x56, 0x24, 0x86, 0xee, 0x96, 0x8d, 0xb7, 0xd1, 0x50, 0xab, 0x42, 0x30,
	0x63, 0x0e, 0xf5, 0x45, 0x76, 0x09, 0xd8, 0x32, 0x26, 0xb3, 0x25, 0xca, 0x1d, 0xe5, 0x31, 0x6e,
	0xa1, 0x61, 0x26, 0x7e, 0x61, 0xd3, 0xf3, 0x88, 0x43, 0xff, 0xdf, 0xaa, 0xf9, 0x84, 0x0a, 0x8b,
	0x12, 0xe0, 0xb4, 0x16, 0x70, 0x0f, 0x90, 0x2e, 0xe3, 0x06, 0x78, 0xb3, 0xa8, 0x67, 0x8b, 0x8d,
	0xa8, 0x66, 0x19, 0x78, 0x80, 0xd2, 0x28, 0x02, 0x9e, 0x18, 0x90, 0xac, 0x78, 0x9a, 0x4b, 0xd0,
	0x15, 0x59, 0x82, 0x10, 0x65, 0x42, 0xe6, 0x1e, 0x50, 0xd6, 0x62, 0x28, 0x17, 0x5c, 0x67, 0xc3,
	0xf6, 0xea, 0x7b, 0x43, 0x89, 0x87, 0xd0, 0x41, 0xab, 0x5c, 0xf6, 0x88, 0xef, 0xb3, 0x5d, 0xd0,
	0x5b, 0x14, 0xff, 0x1a, 0x5f, 0x88, 0xe1, 0x0f, 0xb5, 0x01, 0xfe, 0x57, 0xd0, 0xc1, 0x12, 0x1f,
	0x02, 0x03, 0x26, 0x65, 0x06, 0xdc, 0xf7, 0x2b, 0x71, 0x76, 0xc1, 0x64, 0xbc, 0x85, 0x4e, 0xb7,
	0x4a, 0xf7, 0xe7, 0x77, 0xfe, 0x2f, 0x40, 0xb5, 0xc7, 0x99, 0xdf, 0x40, 0x86, 0x4a, 0x36, 0x58,
	0xf0, 0x1a, 0x3a, 0x04, 0x60, 0x82, 0xf3, 0xb8, 0x3f, 0xb3, 0x09, 0x21, 0x97, 0x31, 0x87, 0x72,
	0x4c, 0xcf, 0x3d, 0xcb, 0x8f, 0x6f, 0x61, 0x3f, 0xf3, 0x56, 0x7e, 0x84, 0xc6, 0x52, 0x45, 0x00,
	0xce, 0xab, 0xe8, 0x20, 0x5f, 0x7f, 0x01, 0x53, 0xb5, 0x55, 0x04, 0xa9, 0x51, 0x41, 0x17, 0x43,
	0xc1, 0x0f, 0x88, 0x53, 0xb6, 0x9d, 0x4a, 0x4c, 0xfe, 0xfc, 0xce, 0x5c, 0xb9, 0xec, 0x65, 0x9e,
	0xe8, 0xc8, 0x36, 0xe9, 0x8a, 0x6f, 0x93, 0x12, 0x9a, 0xca, 0xa4, 0x68, 0x4f, 0xd6, 0xdc, 0x40,
	0x03, 0x4c, 0xc9, 0x7c, 0xe0, 0xd6, 0x97, 0x48, 0xe6, 0x0d, 0x62, 0xac, 0xa1, 0x93, 0x09, 0x46,
	0xc0, 0xf1, 0x32, 0xea, 0x5d, 0x87, 0x31, 0x81, 0x64, 0x54, 0x86, 0x44, 0x30, 0xfa, 0xc5, 0x26,
	0xbd, 0xf1, 0x77, 0x0d, 0x76, 0x98, 0xf8, 0xfa, 0xc8, 0xa6, 0xd5, 0xfb, 0xb6, 0x63, 0xd7, 0x37,
	0xeb, 0x1d, 0xa0, 0xc3, 0xaf, 0xa3, 0x13, 0x75, 0xce, 0x65, 0x32, 0xe1, 0xe6, 0x06, 0xe1, 0x5b,
	0xb9, 0x6f, 0x76, 0x38, 0xcf, 0x2f, 0xef, 0x7c, 0x70, 0x79, 0xe7, 0xe1, 0xf2, 0xce, 0x2f, 0xb8,
	0xb6, 0x03, 0x57, 0xc3, 0x31, 0xe0, 0x14, 0x10, 0xf0, 0x22, 0x3a, 0x2a, 0x84, 0xd1, 0x6d, 0x26,
	0x69, 0x7f, 0x36, 0x49, 0x87, 0x81, 0x6d, 0x6d, 0x7b, 0x89, 0x10, 0xc3, 0x46, 0x13, 0x4a, 0xd3,
	0x60, 0xfe, 0xe6, 0x5b, 0xe7, 0x6f, 0x52, 0x39, 0x7f, 0x81, 0x9c, 0xbb, 0xe5, 0xd8, 0x34, 0x6e,
	0xa0, 0x0b, 0xc9, 0xad, 0xc3, 0xc8, 0x9f, 0xf7, 0x16, 0x95, 0x9c, 0x05, 0x99, 0x1e, 0xb0, 0xec,
	0x45, 0x74, 0x80, 0x41, 0x04, 0xbf, 0x36, 0x21, 0xb3, 0x6a, 0x75, 0x93, 0x56, 0x5c, 0xdb, 0xa9,
	0xac, 0x6d, 0x73, 0x41, 0x9c, 0x23, 0x55, 0x91, 0xff, 0xbc, 0x2d, 0x7a, 0xa7, 0xf5, 0xd0, 0x49,
	0x15, 0x85, 0x9b, 0xbd, 0x87, 0x01, 0x14, 0x2b, 0x95, 0xc9, 0x26, 0x60, 0x31, 0x5e, 0x43, 0xa3,
	0x4c, 0x57, 0xe2, 0x3b, 0xc9, 0xee, 0xe4, 0x4c, 0xf0, 0x93, 0x12, 0x09, 0x00, 0xf0, 0x36, 0x3a,
	0xb8, 0xce, 0x87, 0x3a, 0x41, 0x28, 0x78, 0x8c, 0xaf, 0x6b, 0xe0, 0x46, 0xe3, 0xcb, 0xfa, 0x1c,
	0xee, 0x12, 0x7c, 0x01, 0x1d, 0x2f, 0xb9, 0x0e, 0xf5, 0xac, 0x12, 0x35, 0xe3, 0x17, 0xe5, 0x31,
	0x31, 0x3e, 0x07, 0x8b, 0xf2, 0x36, 0x1a, 0x4f, 0x07, 0xb1, 0xf7, 0xcd, 0xf5, 0x14, 0x6e, 0x7f,
	0x36, 0x28, 0x2e, 0xb5, 0xff, 0xa6, 0x75, 0xba, 0x4c, 0x3d, 0xd8, 0xf5, 0x6a, 0xcb, 0x65, 0x3a,
	0x91, 0x72, 0x99, 0x02, 0x2b, 0x37, 0xad, 0x79, 0x97, 0xbe, 0x89, 0x4e, 0x85, 0x3b, 0x7a, 0x71,
	0x8b, 0x38, 0xcf, 0xef, 0xac, 0xd4, 0xd0, 0x88, 0x5c, 0x32, 0x40, 0xbf, 0x87, 0x8e, 0xd7, 0x2c,
	0x9f, 0x9a, 0x3c, 0x5e, 0x26, 0x01, 0x05, 0xac, 0x8e, 0x21, 0x33, 0x21, 0x10, 0xb3, 0x10, 0x90,
	0x32, 0x59, 0xc5, 0xa3, 0xb5, 0xd8, 0xff, 0x46, 0x05, 0x76, 0xe2, 0x9a, 0xfb, 0x98, 0x38, 0x30,
	0x77, 0x6b, 0xee, 0x1d, 0xe2, 0xb8, 0xd9, 0x23, 0xb5, 0x09, 0x74, 0x84, 0x06, 0xec, 0x66, 0xdc,
	0xa2, 0xc3, 0x34, 0x22, 0xd3, 0x20, 0xb0, 0xdb, 0xa4, 0x8a, 0xc0, 0xb4, 0x01, 0x74, 0xa0, 0x1c,
	0x0c, 0x30, 0x1d, 0xbd, 0x45, 0xfe, 0x0f, 0x9e, 0x42, 0x27, 0xf8, 0x8d, 0x60, 0xba, 0x9e, 0xcd,
	0x9e, 0x8c, 0xa4, 0xcc, 0x54, 0x1c, 0x2a, 0x1e, 0xe7, 0x1f, 0x56, 0xc3, 0x71, 0xe3, 0x4d, 0xb0,
	0x87, 0x09, 0x5e, 0x73, 0xa3, 0xda, 0x3a, 0xd9, 0x7b, 0x1c, 0x46, 0x57, 0x04, 0x86, 0x41, 0xc1,
	0x00, 0xa9, 0x64, 0x30, 0xa0, 0x65, 0x26, 0xb4, 0xd6, 0x99, 0xe8, 0xcc, 0x1e, 0x1f, 0xae, 0xb7,
	0x3b, 0xa4, 0x46, 0x2a, 0x16, 0x25, 0xaf, 0x93, 0x1d, 0x7f, 0x3e, 0x88, 0x14, 0xed, 0xb2, 0x45,
	0x5d, 0x4f, 0xc8, 0x6c, 0x6b, 0xd3, 0x14, 0x3a, 0xb1, 0x25, 0x98, 0x12, 0xeb, 0x74, 0x7c, 0x2b,
	0x21, 0xcd, 0xf8, 0xaa, 0x06, 0xfe, 0x5a, 0xad, 0x35, 0x34, 0x7b, 0x0c, 0xf5, 0x11, 0x5a, 0x4d,
	0x18, 0x8d, 0x08, 0xad, 0x0a, 0x78, 0x33, 0x68, 0xc0, 0xf5, 0x02, 0xd7, 0x47, 0x3d, 0x09, 0x80,
	0xfe, 0xe8, 0x37, 0x81, 0xc1, 0x02, 0x37, 0x1e, 0x87, 0xb0, 0xd8, 0x94, 0xd9, 0xd6, 0xe4, 0x04,
	0xaa, 0xae, 0x24, 0x2a, 0xe3, 0x1b, 0x1a, 0x3a, 0xa3, 0xd4, 0x11, 0x1a, 0x28, 0x9d, 0x3d, 0x4d,
	0x3e, 0x7b, 0xbb, 0x31, 0xf6, 0x4b, 0xe8, 0xac, 0x04, 0xc8, 0x6a, 0x2b, 0x65, 0x7b, 0xab, 0x77,
	0xa1, 0xfd, 0xcb, 0x28, 0x9f, 0x4d, 0xfb, 0xee, 0xe6, 0xa3, 0xed, 0x3a, 0x58, 0x90, 0x2d, 0x80,
	0xc8, 0xe0, 0x21, 0x71, 0xca, 0x6b, 0xee, 0x42, 0xd5, 0xb2, 0x9d, 0xf6, 0xe6, 0x9e, 0x41, 0x47,
	0x7d, 0xe2, 0x94, 0x49, 0xd2, 0xd0, 0x23, 0x7c, 0x54, 0xa8, 0xf8, 0x8b, 0xb8, 0x71, 0x5b, 0x75,
	0x84, 0x46, 0xbd, 0x89, 0x06, 0xa8, 0x67, 0x39, 0xfe, 0x06, 0xf1, 0x7c, 0xd3, 0x76, 0xcc, 0xf8,
	0x0d, 0x7f, 0x56, 0x79, 0xf5, 0x01, 0xdf, 0xda, 0x76, 0x11, 0x87, 0x32, 0xee, 0x3a, 0x10, 0x36,
	0xe0, 0x47, 0xa8, 0x7f, 0xd3, 0xe1, 0xe2, 0xca, 0x66, 0xf8, 0x7d, 0xa8, 0xab, 0x33, 0xc1, 0xa1,
	0x08, 0x31, 0xe8, 0x1b, 0x77, 0xe0, 0x55, 0x3a, 0x57, 0xab, 0xc9, 0x0c, 0xcb, 0x18, 0xef, 0xfc,
	0x4d, 0x3c, 0x0f, 0x52, 0xc4, 0xfc, 0xef, 0xce, 0xcf, 0x30, 0xec, 0xac, 0xfb, 0x6e, 0x79, 0xb3,
	0x46, 0x1e, 0x52, 0x8b, 0x8a, 0xf8, 0xca, 0x28, 0x42, 0xc6, 0x28, 0xf6, 0x09, 0x2c, 0xbd, 0x8e,
	0x0e, 0xf8, 0xc1, 0x00, 0xdc, 0xab, 0xe3, 0x32, 0x04, 0xcb, 0x3c, 0xa5, 0xc8, 0x19, 0x39, 0x79,
	0xf0, 0xec, 0xbb, 0x6f, 0xfb, 0xbe, 0xed, 0x54, 0x58, 0x14, 0x95, 0x3d, 0xe2, 0x5c, 0x42, 0x27,
	0x13, 0x8c, 0x80, 0xe4, 0x32, 0xc2, 0x6e, 0x83, 0xc4, 0x4e, 0x32, 0xcc, 0x78, 0x6f, 0xf1, 0x84,
	0xf8, 0x32, 0x27, 0x3e, 0x18, 0x73, 0x68, 0x92, 0x19, 0xb5, 0x4c, 0xe8, 0x4a, 0x28, 0x7d, 0xc9,
	0x73, 0xeb, 0x6c, 0x25, 0xef, 0x96, 0x05, 0xa0, 0x61, 0x74, 0xa8, 0x14, 0x8c, 0x34, 0xd1, 0x1c,
	0x2c, 0x71, 0x0a, 0x63, 0x05, 0x7c, 0x62, 0xba, 0x88, 0xa6, 0xd3, 0x57, 0x1b, 0xf5, 0x06, 0xb8,
	0x95, 0x65, 0x42, 0x83, 0x20, 0x64, 0x75, 0xdd, 0x27, 0xde, 0x16, 0x29, 0x2f, 0xd2, 0x2a, 0xf1,
	0xc8, 0x66, 0x7d, 0xbe, 0xe6, 0x96, 0x1e, 0xaf, 0x10, 0xbb, 0x52, 0xcd, 0x9e, 0x49, 0xfb, 0x8e,
	0x86, 0x0a, 0x99, 0x65, 0x02, 0x4e, 0x82, 0x06, 0x58, 0xbc, 0xe4, 0x02, 0xad, 0x59, 0x65, 0xdf,
	0x61, 0x6d, 0xaf, 0xa4, 0xc5, 0x4c, 0x2a, 0xd1, 0xb8, 0x16, 0x21, 0xe0, 0x63, 0xd1, 0x79, 0x8b,
	0xb1, 0x07, 0x51, 0x56, 0x47, 0x81, 0xbd, 0x51, 0x82, 0xcb, 0x40, 0x21, 0x29, 0x8c, 0xce, 0x87,
	0xe3, 0xa6, 0xb1, 0x68, 0xd0, 0x8c, 0xe6, 0x57, 0x5f, 0xa8, 0x49, 0x45, 0x18, 0x3f, 0xd5, 0xd0,
	0x79, 0xa1, 0x85, 0x9d, 0x17, 0xab, 0xc4, 0xb2, 0xc7, 0xf3, 0x3b, 0x0f, 0xac, 0x0a, 0x99, 0x73,
	0xca, 0x0f, 0xed, 0xf7, 0x42, 0xc8, 0x91, 0x60, 0x55, 0x8b, 0x05, 0xab, 0x78, 0x09, 0xa1, 0x66,
	0x1a, 0x1f, 0x52, 0x01, 0x67, 0x63, 0x0f, 0x78, 0x5e, 0x20, 0x10, 0xcf, 0xf8, 0x40, 0xb8, 0x48,
	0x2d, 0x46, 0x38, 0xf1, 0x69, 0x74, 0x78, 0xc3, 0xf5, 0xea, 0x16, 0x35, 0x89, 0x57, 0x9a, 0x9d,
	0x66, 0x41, 0xfd, 0xa1, 0x62, 0x1f, 0x1f, 0x5b, 0x0c, 0x86, 0x8c, 0xb7, 0xe1, 0xf5, 0xad, 0x06,
	0x0c, 0x33, 0x33, 0x8d, 0xf6, 0xd3, 0x6d, 0xe1, 0x9a, 0x72, 0xb2, 0x35, 0x8e, 0x78, 0x8e, 0x80,
	0xd4, 0xb8, 0xd7, 0xdc, 0x59, 0x0b, 0xee, 0xa6, 0x43, 0x89, 0xd7, 0xb0, 0x3c, 0xba, 0xc3, 0x76,
	0x3d, 0xe4, 0xb8, 0x77, 0xb2, 0x9f, 0xa2, 0x0f, 0x35, 0x34, 0x9d, 0x5d, 0x1c, 0x80, 0xae, 0xa0,
	0xe1, 0x52, 0x84, 0xd6, 0xe4, 0xc2, 0x63, 0x29, 0xf8, 0x29, 0x99, 0x29, 0x29, 0x0a, 0x8a, 0x83,
	0x25, 0xf9, 0x07, 0xe3, 0x16, 0x5c, 0x86, 0xcb, 0x84, 0x16, 0x1b, 0xa5, 0x7b, 0x76, 0xf0, 0xee,
	0xcb, 0x6e, 0xdb, 0x2a, 0x04, 0xc2, 0x52, 0xee, 0x30, 0x40, 0xe8, 0xf6, 0x1a, 0x25, 0xb1, 0x00,
	0x83, 0x32, 0xd4, 0xc5, 0x46, 0xa9, 0xc8, 0x88, 0x8c, 0xe5, 0xa6, 0xd7, 0x8a, 0x87, 0x20, 0xad,
	0x81, 0xbb, 0x32, 0xcc, 0x34, 0xee, 0x34, 0xcf, 0x60, 0x8a, 0x20, 0x80, 0x77, 0x0a, 0xf5, 0x0a,
	0xeb, 0x38, 0xc6, 0xee, 0xe2, 0x21, 0x30, 0xcf, 0x37, 0x96, 0x20, 0xe4, 0x16, 0x77, 0xcc, 0x22,
	0xd4, 0x5e, 0xee, 0x58, 0xd4, 0x5a, 0xdb, 0xce, 0xee, 0xd4, 0xcb, 0x60, 0x56, 0xaa, 0x1c, 0x00,
	0x73, 0x2b, 0xba, 0x57, 0x2f, 0xaa, 0x6e, 0xbb, 0xb8, 0x04, 0xbe, 0x6f, 0x2d, 0x78, 0x2e, 0x06,
	0xc7, 0x22, 0x78, 0x65, 0xf8, 0xab, 0x1b, 0xb1, 0xdb, 0x1f, 0xa3, 0xee, 0x86, 0x55, 0x11, 0xee,
	0x80, 0xfd, 0x1d, 0x8c, 0xf9, 0xf6, 0x7b, 0xe2, 0x6d, 0xcd, 0xfe, 0x8e, 0x2d, 0xf8, 0xfe, 0xf8,
	0x82, 0xff, 0x58, 0x83, 0x58, 0xbc, 0x55, 0x47, 0x98, 0x0f, 0xe9, 0x61, 0x4f, 0x1c, 0x61, 0xc5,
	0x19, 0x99, 0x15, 0x4b, 0x9b, 0xb5, 0xda, 0x7d, 0x42, 0xad, 0x72, 0x80, 0x3e, 0xa0, 0x2e, 0x02,
	0x13, 0x5e, 0x96, 0x78, 0x91, 0x73, 0x6d, 0xbd, 0x08, 0xd7, 0x1d, 0x75, 0x23, 0xc6, 0x22, 0x04,
	0x32, 0x2d, 0x99, 0x1b, 0x76, 0x44, 0x32, 0xaf, 0x9c, 0x95, 0xd8, 0x01, 0x49, 0x31, 0x60, 0xf5,
	0x30, 0x3a, 0x44, 0xb7, 0x4d, 0x76, 0xc8, 0xc4, 0x19, 0xa1, 0xdb, 0x8c, 0x24, 0x50, 0xc1, 0x33,
	0xa4, 0xfc, 0x2b, 0x9f, 0x68, 0xb4, 0xce, 0x73, 0x11, 0x9b, 0x0e, 0x35, 0x6e, 0x43, 0x7a, 0x62,
	0xc5, 0xf6, 0xa9, 0xeb, 0xd9, 0x25, 0xab, 0xc6, 0x92, 0xb6, 0x59, 0x11, 0xfe, 0x4b, 0x83, 0xfc,
	0x43, 0x92, 0x3f, 0x4c, 0x77, 0x1e, 0xab, 0x86, 0x5f, 0xcc, 0x8d, 0x66, 0xd2, 0x33, 0x3d, 0xbb,
	0x5a, 0x3c, 0x5a, 0x8d, 0xc9, 0xc2, 0x53, 0x68, 0x7f, 0xcd, 0xfd, 0x62, 0xdb, 0xfc, 0x6e, 0x31,
	0xa0, 0xc2, 0x97, 0x51, 0x77, 0xd5, 0xae, 0x54, 0xdb, 0xe6, 0x70, 0x8b, 0x8c, 0x0c, 0x5f, 0x41,
	0x07, 0xad, 0x2d, 0xe2, 0x05, 0x1b, 0xb3, 0xbb, 0x1d, 0x87, 0xa0, 0x34, 0x56, 0x9a, 0x8e, 0x27,
	0xfa, 0x38, 0xf1, 0x83, 0xe3, 0x20, 0x66, 0x6e, 0x12, 0x1d, 0x89, 0x3e, 0x71, 0x44, 0xac, 0x14,
	0x1f, 0x34, 0xb6, 0x21, 0x6e, 0x96, 0x4b, 0x82, 0x39, 0x7c, 0x88, 0x70, 0x8c, 0x8b, 0xd5, 0x5e,
	0x55, 0xb9, 0xe3, 0xa8, 0x28, 0x26, 0xe9, 0x84, 0x9b, 0x14, 0x6e, 0xac, 0x35, 0x5d, 0x6f, 0x0b,
	0x39, 0x98, 0x90, 0xf6, 0x82, 0xd3, 0xd2, 0x5f, 0x70, 0x9b, 0xf2, 0x99, 0x89, 0x99, 0xf3, 0x06,
	0x8a, 0xc1, 0x11, 0xd6, 0x68, 0x99, 0xad, 0x39, 0xee, 0x26, 0x46, 0x8c, 0xa7, 0xe8, 0x9c, 0x4c,
	0xad, 0x88, 0x1b, 0xf7, 0x66, 0x54, 0xf2, 0x10, 0x74, 0xb5, 0x1c, 0x82, 0x6f, 0x47, 0x62, 0x98,
	0x74, 0xfd, 0x60, 0xfe, 0x3b, 0x48, 0x8f, 0x01, 0x08, 0x45, 0x47, 0xe6, 0xe1, 0x52, 0xbb, 0x79,
	0x88, 0x49, 0x1e, 0x72, 0x53, 0xbe, 0x18, 0xef, 0x77, 0x01, 0xb0, 0x16, 0x07, 0xf2, 0xc8, 0xa6,
	0xd5, 0xd5, 0x06, 0x0b, 0x5c, 0x32, 0xa7, 0xa3, 0x42, 0x5f, 0x12, 0x4d, 0x88, 0x72, 0x5f, 0xc2,
	0x62, 0xb9, 0xe0, 0x0d, 0xcc, 0xb3, 0x4e, 0x22, 0x07, 0x0a, 0x39, 0x51, 0x9e, 0x8b, 0x5a, 0x80,
	0x41, 0x3c, 0x81, 0x8e, 0x70, 0x39, 0xd4, 0xae, 0x13, 0x77, 0x93, 0xb2, 0x93, 0xd7, 0x5d, 0x3c,
	0xcc, 0x06, 0xd7, 0xf8, 0x58, 0x34, 0xd4, 0x3b, 0x10, 0x0f, 0xf5, 0x6e, 0xa3, 0x91, 0x52, 0x95,
	0x94, 0x1e, 0x9b, 0xf6, 0x86, 0x69, 0x9b, 0x55, 0x6b, 0x8b, 0x98, 0xbe, 0x5d, 0x71, 0x48, 0x99,
	0x3f, 0x04, 0x87, 0x7a, 0x58, 0xc8, 0x36, 0xc8, 0x68, 0xee, 0x6e, 0xdc, 0x5d, 0xb1, 0xb6, 0xc8,
	0x43, 0xf6, 0x9d, 0x99, 0x6e, 0xbc, 0x03, 0xe1, 0x9b, 0x7a, 0x4a, 0x9e, 0x4b, 0x7e, 0x7d, 0xf6,
	0xc3, 0x9b, 0xe8, 0x00, 0x53, 0x86, 0xb7, 0x50, 0x0f, 0x8f, 0x79, 0xb0, 0xf4, 0x19, 0xd9, 0xda,
	0x0b, 0xa1, 0x9f, 0x6b, 0x4b, 0xc7, 0x31, 0x1a, 0xa7, 0xbe, 0xf6, 0xe7, 0xcf, 0x3f, 0xe8, 0x3a,
	0x89, 0xfb, 0x25, 0x7d, 0x24, 0xf8, 0x7b, 0x1a, 0xea, 0x8b, 0x74, 0x13, 0xe0, 0xa9, 0x54, 0xa9,
	0xad, 0x2d, 0x12, 0xfa, 0xa5, 0x6c, 0xc4, 0x80, 0xe3, 0x1a, 0xc3, 0x51, 0xc0, 0x97, 0xd3, 0xfa,
	0x62, 0x0a, 0x4f, 0xd8, 0xc6, 0x79, 0x5a, 0x78, 0xd2, 0x6c, 0xb1, 0x78, 0x8a, 0x3f, 0xd0, 0xd0,
	0x91, 0x58, 0x43, 0x02, 0xbe, 0x9c, 0xaa, 0x56, 0xd6, 0xf6, 0xa0, 0xe7, 0xb3, 0x92, 0x03, 0xce,
	0x09, 0x86, 0x73, 0x14, 0x9f, 0x8a, 0xe1, 0xe4, 0x15, 0xd3, 0x42, 0x89, 0xb3, 0xe0, 0x6f, 0x6a,
	0xe8, 0x48, 0xbc, 0xbb, 0x22, 0x1d, 0x95, 0xac, 0xf9, 0x41, 0x81, 0x4a, 0xda, 0xd7, 0x90, 0xb2,
	0x8a, 0x1c, 0x15, 0x9b, 0xa3, 0x58, 0x31, 0xbd, 0x2d, 0x9a, 0x78, 0x93, 0x43, 0x5b, 0x34, 0x89,
	0x2e, 0x85, 0x36, 0x73, 0x04, 0x18, 0x3e, 0xd2, 0xd0, 0x49, 0x69, 0xab, 0x00, 0xbe, 0x96, 0x4d,
	0x5d, 0xa2, 0x6d, 0x41, 0xbf, 0xde, 0x29, 0x1b, 0xa0, 0x3d, 0xc3, 0xd0, 0x8e, 0xe1, 0xd1, 0x18,
	0x5a, 0x51, 0x22, 0x11, 0xdb, 0x0e, 0xff, 0x50, 0x43, 0xb8, 0xb5, 0x5f, 0x00, 0xcf, 0xa6, 0x6a,
	0x4d, 0xed, 0x4f, 0xd0, 0xaf, 0x74, 0xc4, 0x03, 0x30, 0x27, 0x19, 0xcc, 0x1c, 0x1e, 0x91, 0x4d,
	0xaa, 0x27, 0xe0, 0xfc, 0x46, 0x43, 0x39, 0x75, 0x4f, 0x00, 0x7e, 0x45, 0xa9, 0xbd, 0x6d, 0xd7,
	0x82, 0xfe, 0xea, 0xae, 0xf9, 0xc1, 0x92, 0x71, 0x66, 0x89, 0x8e, 0x87, 0x64, 0x96, 0x04, 0x0f,
	0x7d, 0xfc, 0x03, 0x0d, 0x1d, 0x4b, 0x14, 0x8e, 0x70, 0x41, 0xa9, 0xb6, 0xb5, 0x78, 0xa5, 0x4f,
	0x67, 0x67, 0x00, 0x60, 0x53, 0x0c, 0xd8, 0x19, 0x3c, 0x11, 0x03, 0xe6, 0x7a, 0x56, 0xa9, 0x46,
	0x0a, 0x2c, 0x29, 0x51, 0x78, 0x02, 0xf7, 0xc8, 0x53, 0xfc, 0x23, 0x0d, 0x9d, 0x5c, 0x26, 0x54,
	0x92, 0xed, 0x4d, 0xf7, 0x92, 0xad, 0xc4, 0x8a, 0xbd, 0x90, 0x9e, 0xc3, 0x34, 0x2e, 0x32, 0xa0,
	0x93, 0xd8, 0x88, 0x3b, 0x6d, 0xce, 0x60, 0xfa, 0xc4, 0x29, 0x9b, 0xd4, 0xe5, 0x0f, 0x6f, 0xfc,
	0x2b, 0x0d, 0x0d, 0x2d, 0x13, 0x2a, 0x4d, 0x8a, 0x2a, 0x8e, 0x9a, 0x2a, 0x17, 0xab, 0x38, 0x6a,
	0xca, 0xdc, 0xab, 0x91, 0x67, 0xb8, 0xcf, 0xe3, 0xb3, 0x71, 0x27, 0x5f, 0xab, 0x99, 0x72, 0xec,
	0x5f, 0xd1, 0x50, 0x6f, 0xd8, 0xca, 0x80, 0xcf, 0xa7, 0x6a, 0x4d, 0x34, 0xa8, 0xe8, 0x17, 0x32,
	0x50, 0x02, 0xa4, 0x1c, 0x83, 0x34, 0x84, 0x5f, 0x68, 0x6d, 0x64, 0x0c, 0xde, 0x1b, 0xf8, 0x97,
	0x1a, 0x1a, 0x8c, 0x75, 0x53, 0x34, 0xbb, 0x32, 0xf0, 0xf5, 0xb6, 0x6a, 0xa4, 0x1d, 0x2a, 0xfa,
	0x8d, 0x8e, 0xf9, 0x94, 0xeb, 0x1e, 0x82, 0x2d, 0x88, 0x4e, 0x94, 0x0d, 0x42, 0x82, 0x33, 0x74,
	0xa2, 0x25, 0x4a, 0xc1, 0x33, 0xa9, 0xaa, 0xd3, 0x1a, 0x0d, 0xf4, 0xd9, 0x4e, 0x58, 0x94, 0x3e,
	0x95, 0x01, 0x2d, 0xb8, 0xc0, 0x45, 0xb7, 0xf1, 0xaf, 0x35, 0x34, 0xaa, 0x6c, 0x0f, 0xc1, 0xb7,
	0xb3, 0x38, 0x9b, 0xd4, 0xf6, 0x15, 0xfd, 0x95, 0xdd, 0xb2, 0x83, 0x1d, 0x63, 0xcc, 0x8e, 0x61,
	0x3c, 0x28, 0xb1, 0x83, 0x79, 0xaa, 0x84, 0xbf, 0x95, 0xb4, 0x83, 0xe0, 0xec, 0x18, 0xfc, 0xdd,
	0xfb, 0x5b, 0x45, 0x1f, 0x4a, 0x8a, 0xbf, 0x6d, 0x1a, 0xe1, 0xe3, 0xef, 0x6a, 0xa8, 0x5f, 0xd2,
	0x3f, 0x81, 0xaf, 0xa8, 0x37, 0xaa, 0xb4, 0xe5, 0x43, 0xbf, 0xda, 0x19, 0x13, 0x80, 0xd4, 0x19,
	0xc8, 0x01, 0x8c, 0x5b, 0x41, 0xb2, 0x00, 0x26, 0xd6, 0x00, 0xa1, 0x08, 0x60, 0x64, 0x7d, 0x1a,
	0x8a, 0x00, 0x46, 0xda, 0x57, 0x91, 0x12, 0xc0, 0xf0, 0x19, 0x13, 0x81, 0x01, 0xfe, 0x85, 0x86,
	0xfa, 0x25, 0x6d, 0x00, 0x8a, 0x49, 0x4b, 0xef, 0x4e, 0x50, 0x4c, 0x9a, 0xa2, 0xd3, 0xc0, 0x98,
	0x65, 0x38, 0x2f, 0xe1, 0x8b, 0xf1, 0x1e, 0x6f, 0x96, 0x8e, 0x2a, 0xc4, 0x4a, 0xf8, 0x81, 0x4f,
	0xe5, 0x7d, 0x08, 0x01, 0x6c, 0x49, 0xf1, 0x5f, 0x01, 0x3b, 0xbd, 0x09, 0x41, 0x01, 0x5b, 0xd1,
	0x5f, 0xa0, 0x86, 0xcd, 0x50, 0x06, 0x70, 0x63, 0xf8, 0xf1, 0x1f, 0x34, 0x34, 0x1c, 0x4f, 0x88,
	0x46, 0x2a, 0xf9, 0xf8, 0x86, 0x02, 0x87, 0xaa, 0xf6, 0xaf, 0x38, 0x5c, 0xd9, 0x9a, 0x06, 0x52,
	0xde, 0x2d, 0x2c, 0xd1, 0x67, 0x96, 0x41, 0x84, 0xf9, 0x98, 0xec, 0xf8, 0xe6, 0xfa, 0x8e, 0x19,
	0x16, 0x95, 0xd9, 0x2a, 0x24, 0xcd, 0x59, 0xa4, 0x55, 0x85, 0x7f, 0x4e, 0xab, 0xee, 0xeb, 0x2f,
	0x76, 0xcc, 0x12, 0x82, 0x2f, 0x30, 0xf0, 0x17, 0xf0, 0xb9, 0x2c, 0xe0, 0x09, 0xad, 0xe2, 0x4f,
	0x35, 0x34, 0x92, 0x84, 0x1d, 0xcd, 0x2c, 0xe0, 0x97, 0x32, 0x82, 0x91, 0x94, 0xe5, 0xf5, 0xf9,
	0xdd, 0xf3, 0x86, 0x16, 0xdd, 0x64, 0x16, 0xcd, 0xe2, 0xe9, 0x2c, 0x16, 0x45, 0x33, 0x1f, 0x81,
	0x93, 0xe9, 0x17, 0xe9, 0x8f, 0x48, 0x35, 0x55, 0x11, 0xcd, 0xb5, 0x96, 0x63, 0x15, 0x6f, 0x5e,
	0x49, 0x81, 0xd6, 0x38, 0xcd, 0xc0, 0x9e, 0xc2, 0xc3, 0xf1, 0x9f, 0x60, 0x30, 0x4a, 0x93, 0xd5,
	0x62, 0xf1, 0xfb, 0x5a, 0x58, 0x53, 0x15, 0xe0, 0x78, 0x6d, 0x55, 0x1e, 0x0d, 0xc9, 0xea, 0xb6,
	0xf2, 0x68, 0x48, 0x5a, 0xa8, 0x4d, 0x71, 0x7c, 0x75, 0x4e, 0xcb, 0x33, 0x37, 0x3e, 0xfe, 0x1d,
	0x8f, 0x28, 0xa5, 0x75, 0x55, 0x7c, 0x33, 0x75, 0x06, 0xda, 0x54, 0x73, 0x15, 0xfb, 0xb8, 0x5d,
	0x11, 0xd7, 0xb8, 0xca, 0x60, 0xe7, 0xf1, 0x25, 0xc9, 0xaa, 0x47, 0xb2, 0x52, 0xe6, 0x86, 0xe7,
	0xd6, 0x4d, 0x51, 0x1f, 0xc0, 0xff, 0xd6, 0x9a, 0x89, 0xbf, 0x36, 0xb5, 0x52, 0x3c, 0xaf, 0x02,
	0x97, 0xad, 0x2e, 0xac, 0x2f, 0xec, 0x49, 0x06, 0x98, 0xba, 0xcc, 0x4c, 0x9d, 0xc3, 0xaf, 0xaa,
	0x4c, 0x4d, 0x94, 0x53, 0x41, 0x9c, 0xb9, 0x1e, 0xc8, 0x83, 0xc2, 0x31, 0xfe, 0xab, 0x06, 0xfd,
	0xa1, 0xa9, 0x05, 0x5a, 0xfc, 0x62, 0x66, 0xc0, 0xc9, 0xf2, 0xb0, 0xfe, 0xd2, 0x6e, 0x58, 0xc1,
	0xc4, 0xdb, 0xcc, 0xc4, 0x1b, 0xf8, 0x5a, 0x07, 0x26, 0x36, 0x2b, 0xc6, 0xf8, 0x8f, 0x5a, 0x33,
	0x2d, 0x9e, 0x5a, 0x62, 0xc5, 0xb7, 0x54, 0x00, 0xdb, 0x95, 0x92, 0xf5, 0xdb, 0xbb, 0xe4, 0x56,
	0x3e, 0x34, 0x69, 0x84, 0x2f, 0xf2, 0xd0, 0xfc, 0x3c, 0x92, 0x1f, 0x6e, 0x57, 0x84, 0xc5, 0xca,
	0x3d, 0x96, 0xb1, 0x22, 0xac, 0xdf, 0xd9, 0x9b, 0x10, 0x30, 0xf2, 0x32, 0x33, 0xf2, 0x1c, 0x3e,
	0x13, 0xcf, 0xab, 0x04, 0x54, 0x7e, 0xe1, 0x89, 0x38, 0x85, 0x4f, 0x45, 0xae, 0xf1, 0xe7, 0x1a,
	0xb4, 0xb2, 0x48, 0x0a, 0xb2, 0x8a, 0xe0, 0x24, 0xbd, 0xf8, 0xab, 0x08, 0x4e, 0x14, 0x35, 0xdf,
	0x94, 0xb5, 0x69, 0x85, 0xed, 0x35, 0x4a, 0x3e, 0x7b, 0xc0, 0x28, 0x6b, 0xb5, 0x6a, 0x7f, 0xa8,
	0xaa, 0x13, 0xab, 0xfd, 0xa1, 0xb2, 0x30, 0x6c, 0x5c, 0x60, 0x36, 0x4c, 0xe0, 0xd3, 0x32, 0x1b,
	0x62, 0xd7, 0x20, 0xfe, 0xad, 0x86, 0x06, 0x53, 0x4a, 0xbb, 0x8a, 0xa8, 0x4a, 0x5d, 0x54, 0xd6,
	0x6f, 0x76, 0xce, 0x08, 0xc8, 0xaf, 0x33, 0xe4, 0xd3, 0x38, 0x2f, 0x43, 0x2e, 0x5e, 0x8e, 0x66,
	0xec, 0x77, 0x84, 0x26, 0xdd, 0xf6, 0xf1, 0xf7, 0x35, 0xf8, 0xc9, 0x49, 0xb2, 0xb8, 0x8b, 0xa7,
	0x95, 0x47, 0x55, 0x52, 0x6b, 0xd6, 0x67, 0x3a, 0xe0, 0x00, 0xd8, 0x06, 0x83, 0x3d, 0x82, 0x75,
	0x19, 0x6c, 0x28, 0x0f, 0xff, 0x44, 0x43, 0x2f, 0xc8, 0x4b, 0xb1, 0x8a, 0x44, 0x82, 0xb2, 0x04,
	0xac, 0xdf, 0xe8, 0x98, 0x2f, 0xc3, 0x93, 0x90, 0xd5, 0x7a, 0xd9, 0x93, 0x50, 0x52, 0x9a, 0xc5,
	0xe9, 0x4f, 0x29, 0x69, 0x0d, 0x58, 0x2f, 0x64, 0xa6, 0x57, 0xe6, 0x39, 0x13, 0x65, 0x60, 0xfc,
	0x33, 0x0d, 0xfa, 0xf2, 0x65, 0xb5, 0x4f, 0xac, 0x3c, 0xf9, 0x69, 0x45, 0x57, 0xfd, 0x5a, 0x87,
	0x5c, 0x00, 0xf8, 0x1c, 0x03, 0x7c, 0x1a, 0x8f, 0x25, 0xb2, 0x86, 0xc9, 0x9a, 0x2b, 0xfe, 0x28,
	0xe2, 0xe1, 0x92, 0x65, 0x49, 0xb5, 0x87, 0x4b, 0xa9, 0xb1, 0xea, 0x57, 0x3b, 0x63, 0x02, 0xc0,
	0x67, 0x19, 0xe0, 0x71, 0x9c, 0x4b, 0x05, 0xcc, 0xf1, 0xfe, 0x49, 0x93, 0xd7, 0x63, 0xa3, 0x45,
	0x42, 0xfc, 0x72, 0x56, 0x08, 0x92, 0x72, 0xaa, 0x7e, 0x6b, 0x77, 0xcc, 0xca, 0xd7, 0x4b, 0x7a,
	0x79, 0x14, 0xff, 0x5e, 0x43, 0x23, 0xaa, 0xc2, 0x9d, 0x22, 0x28, 0xc8, 0x50, 0x02, 0x55, 0x04,
	0x05, 0x59, 0xaa, 0x85, 0x29, 0xf7, 0x65, 0x32, 0x67, 0x56, 0x70, 0x39, 0xdb, 0xfc, 0xc2, 0xc7,
	0x9f, 0xe5, 0xb4, 0x4f, 0x3e, 0xcb, 0x69, 0xff, 0xfc, 0x2c, 0xa7, 0x7d, 0xeb, 0x59, 0x6e, 0xdf,
	0x27, 0xcf, 0x72, 0xfb, 0x3e, 0x7d, 0x96, 0xdb, 0xf7, 0xd6, 0x05, 0x0e, 0xe3, 0x72, 0xc9, 0xf5,
	0x48, 0x41, 0xfc, 0x1d, 0xb8, 0xa2, 0xc2, 0x76, 0x53, 0x34, 0xfb, 0x21, 0xf8, 0x7a, 0x0f, 0xfb,
	0x3d, 0xf5, 0x95, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x96, 0x54, 0xe4, 0xa9, 0x14, 0x3f, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Deployments queries deployments
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// attestation
	Attestation(ctx context.Context, in *QueryAttestationRequest, opts ...grpc.CallOption) (*QueryAttestationResponse, error)
	// valset
	CurrentValset(ctx context.Context, in *QueryCurrentValsetRequest, opts ...grpc.CallOption) (*QueryCurrentValsetResponse, error)
	ValsetRequest(ctx context.Context, in *QueryValsetRequestRequest, opts ...grpc.CallOption) (*QueryValsetRequestResponse, error)
	ValsetConfirm(ctx context.Context, in *QueryValsetConfirmRequest, opts ...grpc.CallOption) (*QueryValsetConfirmResponse, error)
	ValsetConfirmsByNonce(ctx context.Context, in *QueryValsetConfirmsByNonceRequest, opts ...grpc.CallOption) (*QueryValsetConfirmsByNonceResponse, error)
	LastValsetRequests(ctx context.Context, in *QueryLastValsetRequestsRequest, opts ...grpc.CallOption) (*QueryLastValsetRequestsResponse, error)
	LastPendingValsetRequestByAddr(ctx context.Context, in *QueryLastPendingValsetRequestByAddrRequest, opts ...grpc.CallOption) (*QueryLastPendingValsetRequestByAddrResponse, error)
	// claim
	LastEventByAddr(ctx context.Context, in *QueryLastEventByAddrRequest, opts ...grpc.CallOption) (*QueryLastEventByAddrResponse, error)
	// batch
	GetPendingSendToChain(ctx context.Context, in *QueryPendingSendToChain, opts ...grpc.CallOption) (*QueryPendingSendToChainResponse, error)
	GetAllPendingSendToChain(ctx context.Context, in *QueryAllPendingSendToChainRequest, opts ...grpc.CallOption) (*QueryAllPendingSendToChainResponse, error)
	BatchFees(ctx context.Context, in *QueryBatchFeeRequest, opts ...grpc.CallOption) (*QueryBatchFeeResponse, error)
	BatchFeesWithMinimumFee(ctx context.Context, in *QueryBatchFeeWithMinimumFeeRequest, opts ...grpc.CallOption) (*QueryBatchFeeWithMinimumFeeResponse, error)
	OutgoingTxBatches(ctx context.Context, in *QueryOutgoingTxBatchesRequest, opts ...grpc.CallOption) (*QueryOutgoingTxBatchesResponse, error)
	LastPendingBatchRequestByAddr(ctx context.Context, in *QueryLastPendingBatchRequestByAddrRequest, opts ...grpc.CallOption) (*QueryLastPendingBatchRequestByAddrResponse, error)
	LastPendingBatchsRequestByAddr(ctx context.Context, in *QueryLastPendingBatchsRequestByAddrRequest, opts ...grpc.CallOption) (*QueryLastPendingBatchsRequestByAddrResponse, error)
	BatchRequestByNonce(ctx context.Context, in *QueryBatchRequestByNonceRequest, opts ...grpc.CallOption) (*QueryBatchRequestByNonceResponse, error)
	BatchConfirms(ctx context.Context, in *QueryBatchConfirmsRequest, opts ...grpc.CallOption) (*QueryBatchConfirmsResponse, error)
	TokenAddressToDenom(ctx context.Context, in *QueryTokenAddressToDenomRequest, opts ...grpc.CallOption) (*QueryTokenAddressToDenomResponse, error)
	DenomToTokenAddress(ctx context.Context, in *QueryDenomToTokenAddressRequest, opts ...grpc.CallOption) (*QueryDenomToTokenAddressResponse, error)
	GetDelegateKeyByValidator(ctx context.Context, in *QueryDelegateKeysByValidatorAddress, opts ...grpc.CallOption) (*QueryDelegateKeysByValidatorAddressResponse, error)
	GetDelegateKeyByEth(ctx context.Context, in *QueryDelegateKeysByEthAddress, opts ...grpc.CallOption) (*QueryDelegateKeysByEthAddressResponse, error)
	GetDelegateKeyByOrchestrator(ctx context.Context, in *QueryDelegateKeysByOrchestratorAddress, opts ...grpc.CallOption) (*QueryDelegateKeysByOrchestratorAddressResponse, error)
	// Retrieves the entire hyperion module's state
	HyperionModuleState(ctx context.Context, in *QueryModuleStateRequest, opts ...grpc.CallOption) (*QueryModuleStateResponse, error)
	MissingHyperionNonces(ctx context.Context, in *MissingNoncesRequest, opts ...grpc.CallOption) (*MissingNoncesResponse, error)
	GetHyperionIdFromChainId(ctx context.Context, in *QueryGetHyperionIdFromChainIdRequest, opts ...grpc.CallOption) (*QueryGetHyperionIdFromChainIdResponse, error)
	QueryGetLastObservedEthereumBlockHeight(ctx context.Context, in *QueryGetLastObservedEthereumBlockHeightRequest, opts ...grpc.CallOption) (*QueryGetLastObservedEthereumBlockHeightResponse, error)
	QueryGetLastObservedEventNonce(ctx context.Context, in *QueryGetLastObservedEventNonceRequest, opts ...grpc.CallOption) (*QueryGetLastObservedEventNonceResponse, error)
	QueryGetTransactionsByPageAndSize(ctx context.Context, in *QueryGetTransactionsByPageAndSizeRequest, opts ...grpc.CallOption) (*QueryGetTransactionsByPageAndSizeResponse, error)
	QueryGetCounterpartyChainParamsByChainId(ctx context.Context, in *QueryGetCounterpartyChainParamsByChainIdRequest, opts ...grpc.CallOption) (*QueryGetCounterpartyChainParamsByChainIdResponse, error)
	QueryGetRpcListByChainId(ctx context.Context, in *QueryGetRpcListByChainIdRequest, opts ...grpc.CallOption) (*QueryGetRpcListByChainIdResponse, error)
	QueryGetDelegateKeysByAddress(ctx context.Context, in *QueryGetDelegateKeysByAddressRequest, opts ...grpc.CallOption) (*QueryGetDelegateKeysByAddressResponse, error)
	OutgoingExternalDataTxs(ctx context.Context, in *QueryOutgoingExternalDataTxsRequest, opts ...grpc.CallOption) (*QueryOutgoingExternalDataTxsResponse, error)
	QueryGetTokensOfChain(ctx context.Context, in *QueryGetTokensOfChainRequest, opts ...grpc.CallOption) (*QueryGetTokensOfChainResponse, error)
	OutgoingTxBatchesCount(ctx context.Context, in *QueryOutgoingTxBatchesCountRequest, opts ...grpc.CallOption) (*QueryOutgoingTxBatchesCountResponse, error)
	QueryHistoricalFees(ctx context.Context, in *QueryHistoricalFeesRequest, opts ...grpc.CallOption) (*QueryHistoricalFeesResponse, error)
	QueryGetOrchestratorsData(ctx context.Context, in *QueryGetOrchestratorsDataRequest, opts ...grpc.CallOption) (*QueryGetOrchestratorsDataResponse, error)
	QueryGetOrchestratorData(ctx context.Context, in *QueryGetOrchestratorDataRequest, opts ...grpc.CallOption) (*QueryGetOrchestratorDataResponse, error)
	QueryGetOrchestratorHyperionData(ctx context.Context, in *QueryGetOrchestratorHyperionDataRequest, opts ...grpc.CallOption) (*QueryGetOrchestratorHyperionDataResponse, error)
	OutgoingTxBatchesWithOptions(ctx context.Context, in *QueryOutgoingTxBatchesWithOptionsRequest, opts ...grpc.CallOption) (*QueryOutgoingTxBatchesWithOptionsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/helios.hyperion.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Attestation(ctx context.Context, in *QueryAttestationRequest, opts ...grpc.CallOption) (*QueryAttestationResponse, error) {
	out := new(QueryAttestationResponse)
	err := c.cc.Invoke(ctx, "/helios.hyperion.v1.Query/Attestation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CurrentValset(ctx context.Context, in *QueryCurrentValsetRequest, opts ...grpc.CallOption) (*QueryCurrentValsetResponse, error) {
	out := new(QueryCurrentValsetResponse)
	err := c.cc.Invoke(ctx, "/helios.hyperion.v1.Query/CurrentValset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValsetRequest(ctx context.Context, in *QueryValsetRequestRequest, opts ...grpc.CallOption) (*QueryValsetRequestResponse, error) {
	out := new(QueryValsetRequestResponse)
	err := c.cc.Invoke(ctx, "/helios.hyperion.v1.Query/ValsetRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValsetConfirm(ctx context.Context, in *QueryValsetConfirmRequest, opts ...grpc.CallOption) (*QueryValsetConfirmResponse, error) {
	out := new(QueryValsetConfirmResponse)
	err := c.cc.Invoke(ctx, "/helios.hyperion.v1.Query/ValsetConfirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValsetConfirmsByNonce(ctx context.Context, in *QueryValsetConfirmsByNonceRequest, opts ...grpc.CallOption) (*QueryValsetConfirmsByNonceResponse, error) {
	out := new(QueryValsetConfirmsByNonceResponse)
	err := c.cc.Invoke(ctx, "/helios.hyperion.v1.Query/ValsetConfirmsByNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastValsetRequests(ctx context.Context, in *QueryLastValsetRequestsRequest, opts ...grpc.CallOption) (*QueryLastValsetRequestsResponse, error) {
	out := new(QueryLastValsetRequestsResponse)
	err := c.cc.Invoke(ctx, "/helios.hyperion.v1.Query/LastValsetRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastPendingValsetRequestByAddr(ctx context.Context, in *QueryLastPendingValsetRequestByAddrRequest, opts ...grpc.CallOption) (*QueryLastPendingValsetRequestByAddrResponse, error) {
	out := new(QueryLastPendingValsetRequestByAddrResponse)
	err := c.cc.Invoke(ctx, "/helios.hyperion.v1.Query/LastPendingValsetRequestByAddr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastEventByAddr(ctx context.Context, in *QueryLastEventByAddrRequest, opts ...grpc.CallOption) (*QueryLastEventByAddrResponse, error) {
	out := new(QueryLastEventByAddrResponse)
	err := c.cc.Invoke(ctx, "/helios.hyperion.v1.Query/LastEventByAddr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetPendingSendToChain(ctx context.Context, in *QueryPendingSendToChain, opts ...grpc.CallOption) (*QueryPendingSendToChainResponse, error) {
	out := new(QueryPendingSendToChainResponse)
	err := c.cc.Invoke(ctx, "/helios.hyperion.v1.Query/GetPendingSendToChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAllPendingSendToChain(ctx context.Context, in *QueryAllPendingSendToChainRequest, opts ...grpc.CallOption) (*QueryAllPendingSendToChainResponse, error) {
	out := new(QueryAllPendingSendToChainResponse)
	err := c.cc.Invoke(ctx, "/helios.hyperion.v1.Query/GetAllPendingSendToChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BatchFees(ctx context.Context, in *QueryBatchFeeRequest, opts ...grpc.CallOption) (*QueryBatchFeeResponse, error) {
	out := new(QueryBatchFeeResponse)
	err := c.cc.Invoke(ctx, "/helios.hyperion.v1.Query/BatchFees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BatchFeesWithMinimumFee(ctx context.Context, in *QueryBatchFeeWithMinimumFeeRequest, opts ...grpc.CallOption) (*QueryBatchFeeWithMinimumFeeResponse, error) {
	out := new(QueryBatchFeeWithMinimumFeeResponse)
	err := c.cc.Invoke(ctx, "/helios.hyperion.v1.Query/BatchFeesWithMinimumFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OutgoingTxBatches(ctx context.Context, in *QueryOutgoingTxBatchesRequest, opts ...grpc.CallOption) (*QueryOutgoingTxBatchesResponse, error) {
	out := new(QueryOutgoingTxBatchesResponse)
	err := c.cc.Invoke(ctx, "/helios.hyperion.v1.Query/OutgoingTxBatches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastPendingBatchRequestByAddr(ctx context.Context, in *QueryLastPendingBatchRequestByAddrRequest, opts ...grpc.CallOption) (*QueryLastPendingBatchRequestByAddrResponse, error) {
	out := new(QueryLastPendingBatchRequestByAddrResponse)
	err := c.cc.Invoke(ctx, "/helios.hyperion.v1.Query/LastPendingBatchRequestByAddr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastPendingBatchsRequestByAddr(ctx context.Context, in *QueryLastPendingBatchsRequestByAddrRequest, opts ...grpc.CallOption) (*QueryLastPendingBatchsRequestByAddrResponse, error) {
	out := new(QueryLastPendingBatchsRequestByAddrResponse)
	err := c.cc.Invoke(ctx, "/helios.hyperion.v1.Query/LastPendingBatchsRequestByAddr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BatchRequestByNonce(ctx context.Context, in *QueryBatchRequestByNonceRequest, opts ...grpc.CallOption) (*QueryBatchRequestByNonceResponse, error) {
	out := new(QueryBatchRequestByNonceResponse)
	err := c.cc.Invoke(ctx, "/helios.hyperion.v1.Query/BatchRequestByNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BatchConfirms(ctx context.Context, in *QueryBatchConfirmsRequest, opts ...grpc.CallOption) (*QueryBatchConfirmsResponse, error) {
	out := new(QueryBatchConfirmsResponse)
	err := c.cc.Invoke(ctx, "/helios.hyperion.v1.Query/BatchConfirms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokenAddressToDenom(ctx context.Context, in *QueryTokenAddressToDenomRequest, opts ...grpc.CallOption) (*QueryTokenAddressToDenomResponse, error) {
	out := new(QueryTokenAddressToDenomResponse)
	err := c.cc.Invoke(ctx, "/helios.hyperion.v1.Query/TokenAddressToDenom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DenomToTokenAddress(ctx context.Context, in *QueryDenomToTokenAddressRequest, opts ...grpc.CallOption) (*QueryDenomToTokenAddressResponse, error) {
	out := new(QueryDenomToTokenAddressResponse)
	err := c.cc.Invoke(ctx, "/helios.hyperion.v1.Query/DenomToTokenAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetDelegateKeyByValidator(ctx context.Context, in *QueryDelegateKeysByValidatorAddress, opts ...grpc.CallOption) (*QueryDelegateKeysByValidatorAddressResponse, error) {
	out := new(QueryDelegateKeysByValidatorAddressResponse)
	err := c.cc.Invoke(ctx, "/helios.hyperion.v1.Query/GetDelegateKeyByValidator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetDelegateKeyByEth(ctx context.Context, in *QueryDelegateKeysByEthAddress, opts ...grpc.CallOption) (*QueryDelegateKeysByEthAddressResponse, error) {
	out := new(QueryDelegateKeysByEthAddressResponse)
	err := c.cc.Invoke(ctx, "/helios.hyperion.v1.Query/GetDelegateKeyByEth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetDelegateKeyByOrchestrator(ctx context.Context, in *QueryDelegateKeysByOrchestratorAddress, opts ...grpc.CallOption) (*QueryDelegateKeysByOrchestratorAddressResponse, error) {
	out := new(QueryDelegateKeysByOrchestratorAddressResponse)
	err := c.cc.Invoke(ctx, "/helios.hyperion.v1.Query/GetDelegateKeyByOrchestrator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HyperionModuleState(ctx context.Context, in *QueryModuleStateRequest, opts ...grpc.CallOption) (*QueryModuleStateResponse, error) {
	out := new(QueryModuleStateResponse)
	err := c.cc.Invoke(ctx, "/helios.hyperion.v1.Query/HyperionModuleState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MissingHyperionNonces(ctx context.Context, in *MissingNoncesRequest, opts ...grpc.CallOption) (*MissingNoncesResponse, error) {
	out := new(MissingNoncesResponse)
	err := c.cc.Invoke(ctx, "/helios.hyperion.v1.Query/MissingHyperionNonces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetHyperionIdFromChainId(ctx context.Context, in *QueryGetHyperionIdFromChainIdRequest, opts ...grpc.CallOption) (*QueryGetHyperionIdFromChainIdResponse, error) {
	out := new(QueryGetHyperionIdFromChainIdResponse)
	err := c.cc.Invoke(ctx, "/helios.hyperion.v1.Query/GetHyperionIdFromChainId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryGetLastObservedEthereumBlockHeight(ctx context.Context, in *QueryGetLastObservedEthereumBlockHeightRequest, opts ...grpc.CallOption) (*QueryGetLastObservedEthereumBlockHeightResponse, error) {
	out := new(QueryGetLastObservedEthereumBlockHeightResponse)
	err := c.cc.Invoke(ctx, "/helios.hyperion.v1.Query/QueryGetLastObservedEthereumBlockHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryGetLastObservedEventNonce(ctx context.Context, in *QueryGetLastObservedEventNonceRequest, opts ...grpc.CallOption) (*QueryGetLastObservedEventNonceResponse, error) {
	out := new(QueryGetLastObservedEventNonceResponse)
	err := c.cc.Invoke(ctx, "/helios.hyperion.v1.Query/QueryGetLastObservedEventNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryGetTransactionsByPageAndSize(ctx context.Context, in *QueryGetTransactionsByPageAndSizeRequest, opts ...grpc.CallOption) (*QueryGetTransactionsByPageAndSizeResponse, error) {
	out := new(QueryGetTransactionsByPageAndSizeResponse)
	err := c.cc.Invoke(ctx, "/helios.hyperion.v1.Query/QueryGetTransactionsByPageAndSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryGetCounterpartyChainParamsByChainId(ctx context.Context, in *QueryGetCounterpartyChainParamsByChainIdRequest, opts ...grpc.CallOption) (*QueryGetCounterpartyChainParamsByChainIdResponse, error) {
	out := new(QueryGetCounterpartyChainParamsByChainIdResponse)
	err := c.cc.Invoke(ctx, "/helios.hyperion.v1.Query/QueryGetCounterpartyChainParamsByChainId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryGetRpcListByChainId(ctx context.Context, in *QueryGetRpcListByChainIdRequest, opts ...grpc.CallOption) (*QueryGetRpcListByChainIdResponse, error) {
	out := new(QueryGetRpcListByChainIdResponse)
	err := c.cc.Invoke(ctx, "/helios.hyperion.v1.Query/QueryGetRpcListByChainId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryGetDelegateKeysByAddress(ctx context.Context, in *QueryGetDelegateKeysByAddressRequest, opts ...grpc.CallOption) (*QueryGetDelegateKeysByAddressResponse, error) {
	out := new(QueryGetDelegateKeysByAddressResponse)
	err := c.cc.Invoke(ctx, "/helios.hyperion.v1.Query/QueryGetDelegateKeysByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OutgoingExternalDataTxs(ctx context.Context, in *QueryOutgoingExternalDataTxsRequest, opts ...grpc.CallOption) (*QueryOutgoingExternalDataTxsResponse, error) {
	out := new(QueryOutgoingExternalDataTxsResponse)
	err := c.cc.Invoke(ctx, "/helios.hyperion.v1.Query/OutgoingExternalDataTxs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryGetTokensOfChain(ctx context.Context, in *QueryGetTokensOfChainRequest, opts ...grpc.CallOption) (*QueryGetTokensOfChainResponse, error) {
	out := new(QueryGetTokensOfChainResponse)
	err := c.cc.Invoke(ctx, "/helios.hyperion.v1.Query/QueryGetTokensOfChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OutgoingTxBatchesCount(ctx context.Context, in *QueryOutgoingTxBatchesCountRequest, opts ...grpc.CallOption) (*QueryOutgoingTxBatchesCountResponse, error) {
	out := new(QueryOutgoingTxBatchesCountResponse)
	err := c.cc.Invoke(ctx, "/helios.hyperion.v1.Query/OutgoingTxBatchesCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryHistoricalFees(ctx context.Context, in *QueryHistoricalFeesRequest, opts ...grpc.CallOption) (*QueryHistoricalFeesResponse, error) {
	out := new(QueryHistoricalFeesResponse)
	err := c.cc.Invoke(ctx, "/helios.hyperion.v1.Query/QueryHistoricalFees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryGetOrchestratorsData(ctx context.Context, in *QueryGetOrchestratorsDataRequest, opts ...grpc.CallOption) (*QueryGetOrchestratorsDataResponse, error) {
	out := new(QueryGetOrchestratorsDataResponse)
	err := c.cc.Invoke(ctx, "/helios.hyperion.v1.Query/QueryGetOrchestratorsData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryGetOrchestratorData(ctx context.Context, in *QueryGetOrchestratorDataRequest, opts ...grpc.CallOption) (*QueryGetOrchestratorDataResponse, error) {
	out := new(QueryGetOrchestratorDataResponse)
	err := c.cc.Invoke(ctx, "/helios.hyperion.v1.Query/QueryGetOrchestratorData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryGetOrchestratorHyperionData(ctx context.Context, in *QueryGetOrchestratorHyperionDataRequest, opts ...grpc.CallOption) (*QueryGetOrchestratorHyperionDataResponse, error) {
	out := new(QueryGetOrchestratorHyperionDataResponse)
	err := c.cc.Invoke(ctx, "/helios.hyperion.v1.Query/QueryGetOrchestratorHyperionData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OutgoingTxBatchesWithOptions(ctx context.Context, in *QueryOutgoingTxBatchesWithOptionsRequest, opts ...grpc.CallOption) (*QueryOutgoingTxBatchesWithOptionsResponse, error) {
	out := new(QueryOutgoingTxBatchesWithOptionsResponse)
	err := c.cc.Invoke(ctx, "/helios.hyperion.v1.Query/OutgoingTxBatchesWithOptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Deployments queries deployments
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// attestation
	Attestation(context.Context, *QueryAttestationRequest) (*QueryAttestationResponse, error)
	// valset
	CurrentValset(context.Context, *QueryCurrentValsetRequest) (*QueryCurrentValsetResponse, error)
	ValsetRequest(context.Context, *QueryValsetRequestRequest) (*QueryValsetRequestResponse, error)
	ValsetConfirm(context.Context, *QueryValsetConfirmRequest) (*QueryValsetConfirmResponse, error)
	ValsetConfirmsByNonce(context.Context, *QueryValsetConfirmsByNonceRequest) (*QueryValsetConfirmsByNonceResponse, error)
	LastValsetRequests(context.Context, *QueryLastValsetRequestsRequest) (*QueryLastValsetRequestsResponse, error)
	LastPendingValsetRequestByAddr(context.Context, *QueryLastPendingValsetRequestByAddrRequest) (*QueryLastPendingValsetRequestByAddrResponse, error)
	// claim
	LastEventByAddr(context.Context, *QueryLastEventByAddrRequest) (*QueryLastEventByAddrResponse, error)
	// batch
	GetPendingSendToChain(context.Context, *QueryPendingSendToChain) (*QueryPendingSendToChainResponse, error)
	GetAllPendingSendToChain(context.Context, *QueryAllPendingSendToChainRequest) (*QueryAllPendingSendToChainResponse, error)
	BatchFees(context.Context, *QueryBatchFeeRequest) (*QueryBatchFeeResponse, error)
	BatchFeesWithMinimumFee(context.Context, *QueryBatchFeeWithMinimumFeeRequest) (*QueryBatchFeeWithMinimumFeeResponse, error)
	OutgoingTxBatches(context.Context, *QueryOutgoingTxBatchesRequest) (*QueryOutgoingTxBatchesResponse, error)
	LastPendingBatchRequestByAddr(context.Context, *QueryLastPendingBatchRequestByAddrRequest) (*QueryLastPendingBatchRequestByAddrResponse, error)
	LastPendingBatchsRequestByAddr(context.Context, *QueryLastPendingBatchsRequestByAddrRequest) (*QueryLastPendingBatchsRequestByAddrResponse, error)
	BatchRequestByNonce(context.Context, *QueryBatchRequestByNonceRequest) (*QueryBatchRequestByNonceResponse, error)
	BatchConfirms(context.Context, *QueryBatchConfirmsRequest) (*QueryBatchConfirmsResponse, error)
	TokenAddressToDenom(context.Context, *QueryTokenAddressToDenomRequest) (*QueryTokenAddressToDenomResponse, error)
	DenomToTokenAddress(context.Context, *QueryDenomToTokenAddressRequest) (*QueryDenomToTokenAddressResponse, error)
	GetDelegateKeyByValidator(context.Context, *QueryDelegateKeysByValidatorAddress) (*QueryDelegateKeysByValidatorAddressResponse, error)
	GetDelegateKeyByEth(context.Context, *QueryDelegateKeysByEthAddress) (*QueryDelegateKeysByEthAddressResponse, error)
	GetDelegateKeyByOrchestrator(context.Context, *QueryDelegateKeysByOrchestratorAddress) (*QueryDelegateKeysByOrchestratorAddressResponse, error)
	// Retrieves the entire hyperion module's state
	HyperionModuleState(context.Context, *QueryModuleStateRequest) (*QueryModuleStateResponse, error)
	MissingHyperionNonces(context.Context, *MissingNoncesRequest) (*MissingNoncesResponse, error)
	GetHyperionIdFromChainId(context.Context, *QueryGetHyperionIdFromChainIdRequest) (*QueryGetHyperionIdFromChainIdResponse, error)
	QueryGetLastObservedEthereumBlockHeight(context.Context, *QueryGetLastObservedEthereumBlockHeightRequest) (*QueryGetLastObservedEthereumBlockHeightResponse, error)
	QueryGetLastObservedEventNonce(context.Context, *QueryGetLastObservedEventNonceRequest) (*QueryGetLastObservedEventNonceResponse, error)
	QueryGetTransactionsByPageAndSize(context.Context, *QueryGetTransactionsByPageAndSizeRequest) (*QueryGetTransactionsByPageAndSizeResponse, error)
	QueryGetCounterpartyChainParamsByChainId(context.Context, *QueryGetCounterpartyChainParamsByChainIdRequest) (*QueryGetCounterpartyChainParamsByChainIdResponse, error)
	QueryGetRpcListByChainId(context.Context, *QueryGetRpcListByChainIdRequest) (*QueryGetRpcListByChainIdResponse, error)
	QueryGetDelegateKeysByAddress(context.Context, *QueryGetDelegateKeysByAddressRequest) (*QueryGetDelegateKeysByAddressResponse, error)
	OutgoingExternalDataTxs(context.Context, *QueryOutgoingExternalDataTxsRequest) (*QueryOutgoingExternalDataTxsResponse, error)
	QueryGetTokensOfChain(context.Context, *QueryGetTokensOfChainRequest) (*QueryGetTokensOfChainResponse, error)
	OutgoingTxBatchesCount(context.Context, *QueryOutgoingTxBatchesCountRequest) (*QueryOutgoingTxBatchesCountResponse, error)
	QueryHistoricalFees(context.Context, *QueryHistoricalFeesRequest) (*QueryHistoricalFeesResponse, error)
	QueryGetOrchestratorsData(context.Context, *QueryGetOrchestratorsDataRequest) (*QueryGetOrchestratorsDataResponse, error)
	QueryGetOrchestratorData(context.Context, *QueryGetOrchestratorDataRequest) (*QueryGetOrchestratorDataResponse, error)
	QueryGetOrchestratorHyperionData(context.Context, *QueryGetOrchestratorHyperionDataRequest) (*QueryGetOrchestratorHyperionDataResponse, error)
	OutgoingTxBatchesWithOptions(context.Context, *QueryOutgoingTxBatchesWithOptionsRequest) (*QueryOutgoingTxBatchesWithOptionsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Attestation(ctx context.Context, req *QueryAttestationRequest) (*QueryAttestationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Attestation not implemented")
}
func (*UnimplementedQueryServer) CurrentValset(ctx context.Context, req *QueryCurrentValsetRequest) (*QueryCurrentValsetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentValset not implemented")
}
func (*UnimplementedQueryServer) ValsetRequest(ctx context.Context, req *QueryValsetRequestRequest) (*QueryValsetRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValsetRequest not implemented")
}
func (*UnimplementedQueryServer) ValsetConfirm(ctx context.Context, req *QueryValsetConfirmRequest) (*QueryValsetConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValsetConfirm not implemented")
}
func (*UnimplementedQueryServer) ValsetConfirmsByNonce(ctx context.Context, req *QueryValsetConfirmsByNonceRequest) (*QueryValsetConfirmsByNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValsetConfirmsByNonce not implemented")
}
func (*UnimplementedQueryServer) LastValsetRequests(ctx context.Context, req *QueryLastValsetRequestsRequest) (*QueryLastValsetRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastValsetRequests not implemented")
}
func (*UnimplementedQueryServer) LastPendingValsetRequestByAddr(ctx context.Context, req *QueryLastPendingValsetRequestByAddrRequest) (*QueryLastPendingValsetRequestByAddrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastPendingValsetRequestByAddr not implemented")
}
func (*UnimplementedQueryServer) LastEventByAddr(ctx context.Context, req *QueryLastEventByAddrRequest) (*QueryLastEventByAddrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastEventByAddr not implemented")
}
func (*UnimplementedQueryServer) GetPendingSendToChain(ctx context.Context, req *QueryPendingSendToChain) (*QueryPendingSendToChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPendingSendToChain not implemented")
}
func (*UnimplementedQueryServer) GetAllPendingSendToChain(ctx context.Context, req *QueryAllPendingSendToChainRequest) (*QueryAllPendingSendToChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPendingSendToChain not implemented")
}
func (*UnimplementedQueryServer) BatchFees(ctx context.Context, req *QueryBatchFeeRequest) (*QueryBatchFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchFees not implemented")
}
func (*UnimplementedQueryServer) BatchFeesWithMinimumFee(ctx context.Context, req *QueryBatchFeeWithMinimumFeeRequest) (*QueryBatchFeeWithMinimumFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchFeesWithMinimumFee not implemented")
}
func (*UnimplementedQueryServer) OutgoingTxBatches(ctx context.Context, req *QueryOutgoingTxBatchesRequest) (*QueryOutgoingTxBatchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutgoingTxBatches not implemented")
}
func (*UnimplementedQueryServer) LastPendingBatchRequestByAddr(ctx context.Context, req *QueryLastPendingBatchRequestByAddrRequest) (*QueryLastPendingBatchRequestByAddrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastPendingBatchRequestByAddr not implemented")
}
func (*UnimplementedQueryServer) LastPendingBatchsRequestByAddr(ctx context.Context, req *QueryLastPendingBatchsRequestByAddrRequest) (*QueryLastPendingBatchsRequestByAddrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastPendingBatchsRequestByAddr not implemented")
}
func (*UnimplementedQueryServer) BatchRequestByNonce(ctx context.Context, req *QueryBatchRequestByNonceRequest) (*QueryBatchRequestByNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchRequestByNonce not implemented")
}
func (*UnimplementedQueryServer) BatchConfirms(ctx context.Context, req *QueryBatchConfirmsRequest) (*QueryBatchConfirmsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchConfirms not implemented")
}
func (*UnimplementedQueryServer) TokenAddressToDenom(ctx context.Context, req *QueryTokenAddressToDenomRequest) (*QueryTokenAddressToDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenAddressToDenom not implemented")
}
func (*UnimplementedQueryServer) DenomToTokenAddress(ctx context.Context, req *QueryDenomToTokenAddressRequest) (*QueryDenomToTokenAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DenomToTokenAddress not implemented")
}
func (*UnimplementedQueryServer) GetDelegateKeyByValidator(ctx context.Context, req *QueryDelegateKeysByValidatorAddress) (*QueryDelegateKeysByValidatorAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegateKeyByValidator not implemented")
}
func (*UnimplementedQueryServer) GetDelegateKeyByEth(ctx context.Context, req *QueryDelegateKeysByEthAddress) (*QueryDelegateKeysByEthAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegateKeyByEth not implemented")
}
func (*UnimplementedQueryServer) GetDelegateKeyByOrchestrator(ctx context.Context, req *QueryDelegateKeysByOrchestratorAddress) (*QueryDelegateKeysByOrchestratorAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegateKeyByOrchestrator not implemented")
}
func (*UnimplementedQueryServer) HyperionModuleState(ctx context.Context, req *QueryModuleStateRequest) (*QueryModuleStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HyperionModuleState not implemented")
}
func (*UnimplementedQueryServer) MissingHyperionNonces(ctx context.Context, req *MissingNoncesRequest) (*MissingNoncesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MissingHyperionNonces not implemented")
}
func (*UnimplementedQueryServer) GetHyperionIdFromChainId(ctx context.Context, req *QueryGetHyperionIdFromChainIdRequest) (*QueryGetHyperionIdFromChainIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHyperionIdFromChainId not implemented")
}
func (*UnimplementedQueryServer) QueryGetLastObservedEthereumBlockHeight(ctx context.Context, req *QueryGetLastObservedEthereumBlockHeightRequest) (*QueryGetLastObservedEthereumBlockHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGetLastObservedEthereumBlockHeight not implemented")
}
func (*UnimplementedQueryServer) QueryGetLastObservedEventNonce(ctx context.Context, req *QueryGetLastObservedEventNonceRequest) (*QueryGetLastObservedEventNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGetLastObservedEventNonce not implemented")
}
func (*UnimplementedQueryServer) QueryGetTransactionsByPageAndSize(ctx context.Context, req *QueryGetTransactionsByPageAndSizeRequest) (*QueryGetTransactionsByPageAndSizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGetTransactionsByPageAndSize not implemented")
}
func (*UnimplementedQueryServer) QueryGetCounterpartyChainParamsByChainId(ctx context.Context, req *QueryGetCounterpartyChainParamsByChainIdRequest) (*QueryGetCounterpartyChainParamsByChainIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGetCounterpartyChainParamsByChainId not implemented")
}
func (*UnimplementedQueryServer) QueryGetRpcListByChainId(ctx context.Context, req *QueryGetRpcListByChainIdRequest) (*QueryGetRpcListByChainIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGetRpcListByChainId not implemented")
}
func (*UnimplementedQueryServer) QueryGetDelegateKeysByAddress(ctx context.Context, req *QueryGetDelegateKeysByAddressRequest) (*QueryGetDelegateKeysByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGetDelegateKeysByAddress not implemented")
}
func (*UnimplementedQueryServer) OutgoingExternalDataTxs(ctx context.Context, req *QueryOutgoingExternalDataTxsRequest) (*QueryOutgoingExternalDataTxsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutgoingExternalDataTxs not implemented")
}
func (*UnimplementedQueryServer) QueryGetTokensOfChain(ctx context.Context, req *QueryGetTokensOfChainRequest) (*QueryGetTokensOfChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGetTokensOfChain not implemented")
}
func (*UnimplementedQueryServer) OutgoingTxBatchesCount(ctx context.Context, req *QueryOutgoingTxBatchesCountRequest) (*QueryOutgoingTxBatchesCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutgoingTxBatchesCount not implemented")
}
func (*UnimplementedQueryServer) QueryHistoricalFees(ctx context.Context, req *QueryHistoricalFeesRequest) (*QueryHistoricalFeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryHistoricalFees not implemented")
}
func (*UnimplementedQueryServer) QueryGetOrchestratorsData(ctx context.Context, req *QueryGetOrchestratorsDataRequest) (*QueryGetOrchestratorsDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGetOrchestratorsData not implemented")
}
func (*UnimplementedQueryServer) QueryGetOrchestratorData(ctx context.Context, req *QueryGetOrchestratorDataRequest) (*QueryGetOrchestratorDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGetOrchestratorData not implemented")
}
func (*UnimplementedQueryServer) QueryGetOrchestratorHyperionData(ctx context.Context, req *QueryGetOrchestratorHyperionDataRequest) (*QueryGetOrchestratorHyperionDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGetOrchestratorHyperionData not implemented")
}
func (*UnimplementedQueryServer) OutgoingTxBatchesWithOptions(ctx context.Context, req *QueryOutgoingTxBatchesWithOptionsRequest) (*QueryOutgoingTxBatchesWithOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutgoingTxBatchesWithOptions not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios.hyperion.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Attestation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAttestationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Attestation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios.hyperion.v1.Query/Attestation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Attestation(ctx, req.(*QueryAttestationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CurrentValset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCurrentValsetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CurrentValset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios.hyperion.v1.Query/CurrentValset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CurrentValset(ctx, req.(*QueryCurrentValsetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValsetRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValsetRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValsetRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios.hyperion.v1.Query/ValsetRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValsetRequest(ctx, req.(*QueryValsetRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValsetConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValsetConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValsetConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios.hyperion.v1.Query/ValsetConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValsetConfirm(ctx, req.(*QueryValsetConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValsetConfirmsByNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValsetConfirmsByNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValsetConfirmsByNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios.hyperion.v1.Query/ValsetConfirmsByNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValsetConfirmsByNonce(ctx, req.(*QueryValsetConfirmsByNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastValsetRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLastValsetRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastValsetRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios.hyperion.v1.Query/LastValsetRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastValsetRequests(ctx, req.(*QueryLastValsetRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastPendingValsetRequestByAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLastPendingValsetRequestByAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastPendingValsetRequestByAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios.hyperion.v1.Query/LastPendingValsetRequestByAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastPendingValsetRequestByAddr(ctx, req.(*QueryLastPendingValsetRequestByAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastEventByAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLastEventByAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastEventByAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios.hyperion.v1.Query/LastEventByAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastEventByAddr(ctx, req.(*QueryLastEventByAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetPendingSendToChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPendingSendToChain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPendingSendToChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios.hyperion.v1.Query/GetPendingSendToChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPendingSendToChain(ctx, req.(*QueryPendingSendToChain))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAllPendingSendToChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPendingSendToChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAllPendingSendToChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios.hyperion.v1.Query/GetAllPendingSendToChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAllPendingSendToChain(ctx, req.(*QueryAllPendingSendToChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BatchFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBatchFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BatchFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios.hyperion.v1.Query/BatchFees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BatchFees(ctx, req.(*QueryBatchFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BatchFeesWithMinimumFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBatchFeeWithMinimumFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BatchFeesWithMinimumFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios.hyperion.v1.Query/BatchFeesWithMinimumFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BatchFeesWithMinimumFee(ctx, req.(*QueryBatchFeeWithMinimumFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OutgoingTxBatches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOutgoingTxBatchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OutgoingTxBatches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios.hyperion.v1.Query/OutgoingTxBatches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OutgoingTxBatches(ctx, req.(*QueryOutgoingTxBatchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastPendingBatchRequestByAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLastPendingBatchRequestByAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastPendingBatchRequestByAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios.hyperion.v1.Query/LastPendingBatchRequestByAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastPendingBatchRequestByAddr(ctx, req.(*QueryLastPendingBatchRequestByAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastPendingBatchsRequestByAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLastPendingBatchsRequestByAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastPendingBatchsRequestByAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios.hyperion.v1.Query/LastPendingBatchsRequestByAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastPendingBatchsRequestByAddr(ctx, req.(*QueryLastPendingBatchsRequestByAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BatchRequestByNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBatchRequestByNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BatchRequestByNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios.hyperion.v1.Query/BatchRequestByNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BatchRequestByNonce(ctx, req.(*QueryBatchRequestByNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BatchConfirms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBatchConfirmsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BatchConfirms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios.hyperion.v1.Query/BatchConfirms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BatchConfirms(ctx, req.(*QueryBatchConfirmsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokenAddressToDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokenAddressToDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenAddressToDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios.hyperion.v1.Query/TokenAddressToDenom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenAddressToDenom(ctx, req.(*QueryTokenAddressToDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DenomToTokenAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDenomToTokenAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DenomToTokenAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios.hyperion.v1.Query/DenomToTokenAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DenomToTokenAddress(ctx, req.(*QueryDenomToTokenAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetDelegateKeyByValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegateKeysByValidatorAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetDelegateKeyByValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios.hyperion.v1.Query/GetDelegateKeyByValidator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetDelegateKeyByValidator(ctx, req.(*QueryDelegateKeysByValidatorAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetDelegateKeyByEth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegateKeysByEthAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetDelegateKeyByEth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios.hyperion.v1.Query/GetDelegateKeyByEth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetDelegateKeyByEth(ctx, req.(*QueryDelegateKeysByEthAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetDelegateKeyByOrchestrator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegateKeysByOrchestratorAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetDelegateKeyByOrchestrator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios.hyperion.v1.Query/GetDelegateKeyByOrchestrator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetDelegateKeyByOrchestrator(ctx, req.(*QueryDelegateKeysByOrchestratorAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HyperionModuleState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryModuleStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HyperionModuleState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios.hyperion.v1.Query/HyperionModuleState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HyperionModuleState(ctx, req.(*QueryModuleStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MissingHyperionNonces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MissingNoncesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MissingHyperionNonces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios.hyperion.v1.Query/MissingHyperionNonces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MissingHyperionNonces(ctx, req.(*MissingNoncesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetHyperionIdFromChainId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetHyperionIdFromChainIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetHyperionIdFromChainId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios.hyperion.v1.Query/GetHyperionIdFromChainId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetHyperionIdFromChainId(ctx, req.(*QueryGetHyperionIdFromChainIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryGetLastObservedEthereumBlockHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetLastObservedEthereumBlockHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryGetLastObservedEthereumBlockHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios.hyperion.v1.Query/QueryGetLastObservedEthereumBlockHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryGetLastObservedEthereumBlockHeight(ctx, req.(*QueryGetLastObservedEthereumBlockHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryGetLastObservedEventNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetLastObservedEventNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryGetLastObservedEventNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios.hyperion.v1.Query/QueryGetLastObservedEventNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryGetLastObservedEventNonce(ctx, req.(*QueryGetLastObservedEventNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryGetTransactionsByPageAndSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTransactionsByPageAndSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryGetTransactionsByPageAndSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios.hyperion.v1.Query/QueryGetTransactionsByPageAndSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryGetTransactionsByPageAndSize(ctx, req.(*QueryGetTransactionsByPageAndSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryGetCounterpartyChainParamsByChainId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCounterpartyChainParamsByChainIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryGetCounterpartyChainParamsByChainId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios.hyperion.v1.Query/QueryGetCounterpartyChainParamsByChainId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryGetCounterpartyChainParamsByChainId(ctx, req.(*QueryGetCounterpartyChainParamsByChainIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryGetRpcListByChainId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRpcListByChainIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryGetRpcListByChainId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios.hyperion.v1.Query/QueryGetRpcListByChainId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryGetRpcListByChainId(ctx, req.(*QueryGetRpcListByChainIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryGetDelegateKeysByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetDelegateKeysByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryGetDelegateKeysByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios.hyperion.v1.Query/QueryGetDelegateKeysByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryGetDelegateKeysByAddress(ctx, req.(*QueryGetDelegateKeysByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OutgoingExternalDataTxs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOutgoingExternalDataTxsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OutgoingExternalDataTxs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios.hyperion.v1.Query/OutgoingExternalDataTxs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OutgoingExternalDataTxs(ctx, req.(*QueryOutgoingExternalDataTxsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryGetTokensOfChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTokensOfChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryGetTokensOfChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios.hyperion.v1.Query/QueryGetTokensOfChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryGetTokensOfChain(ctx, req.(*QueryGetTokensOfChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OutgoingTxBatchesCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOutgoingTxBatchesCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OutgoingTxBatchesCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios.hyperion.v1.Query/OutgoingTxBatchesCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OutgoingTxBatchesCount(ctx, req.(*QueryOutgoingTxBatchesCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryHistoricalFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHistoricalFeesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryHistoricalFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios.hyperion.v1.Query/QueryHistoricalFees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryHistoricalFees(ctx, req.(*QueryHistoricalFeesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryGetOrchestratorsData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetOrchestratorsDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryGetOrchestratorsData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios.hyperion.v1.Query/QueryGetOrchestratorsData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryGetOrchestratorsData(ctx, req.(*QueryGetOrchestratorsDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryGetOrchestratorData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetOrchestratorDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryGetOrchestratorData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios.hyperion.v1.Query/QueryGetOrchestratorData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryGetOrchestratorData(ctx, req.(*QueryGetOrchestratorDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryGetOrchestratorHyperionData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetOrchestratorHyperionDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryGetOrchestratorHyperionData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios.hyperion.v1.Query/QueryGetOrchestratorHyperionData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryGetOrchestratorHyperionData(ctx, req.(*QueryGetOrchestratorHyperionDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OutgoingTxBatchesWithOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOutgoingTxBatchesWithOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OutgoingTxBatchesWithOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios.hyperion.v1.Query/OutgoingTxBatchesWithOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OutgoingTxBatchesWithOptions(ctx, req.(*QueryOutgoingTxBatchesWithOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "helios.hyperion.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Attestation",
			Handler:    _Query_Attestation_Handler,
		},
		{
			MethodName: "CurrentValset",
			Handler:    _Query_CurrentValset_Handler,
		},
		{
			MethodName: "ValsetRequest",
			Handler:    _Query_ValsetRequest_Handler,
		},
		{
			MethodName: "ValsetConfirm",
			Handler:    _Query_ValsetConfirm_Handler,
		},
		{
			MethodName: "ValsetConfirmsByNonce",
			Handler:    _Query_ValsetConfirmsByNonce_Handler,
		},
		{
			MethodName: "LastValsetRequests",
			Handler:    _Query_LastValsetRequests_Handler,
		},
		{
			MethodName: "LastPendingValsetRequestByAddr",
			Handler:    _Query_LastPendingValsetRequestByAddr_Handler,
		},
		{
			MethodName: "LastEventByAddr",
			Handler:    _Query_LastEventByAddr_Handler,
		},
		{
			MethodName: "GetPendingSendToChain",
			Handler:    _Query_GetPendingSendToChain_Handler,
		},
		{
			MethodName: "GetAllPendingSendToChain",
			Handler:    _Query_GetAllPendingSendToChain_Handler,
		},
		{
			MethodName: "BatchFees",
			Handler:    _Query_BatchFees_Handler,
		},
		{
			MethodName: "BatchFeesWithMinimumFee",
			Handler:    _Query_BatchFeesWithMinimumFee_Handler,
		},
		{
			MethodName: "OutgoingTxBatches",
			Handler:    _Query_OutgoingTxBatches_Handler,
		},
		{
			MethodName: "LastPendingBatchRequestByAddr",
			Handler:    _Query_LastPendingBatchRequestByAddr_Handler,
		},
		{
			MethodName: "LastPendingBatchsRequestByAddr",
			Handler:    _Query_LastPendingBatchsRequestByAddr_Handler,
		},
		{
			MethodName: "BatchRequestByNonce",
			Handler:    _Query_BatchRequestByNonce_Handler,
		},
		{
			MethodName: "BatchConfirms",
			Handler:    _Query_BatchConfirms_Handler,
		},
		{
			MethodName: "TokenAddressToDenom",
			Handler:    _Query_TokenAddressToDenom_Handler,
		},
		{
			MethodName: "DenomToTokenAddress",
			Handler:    _Query_DenomToTokenAddress_Handler,
		},
		{
			MethodName: "GetDelegateKeyByValidator",
			Handler:    _Query_GetDelegateKeyByValidator_Handler,
		},
		{
			MethodName: "GetDelegateKeyByEth",
			Handler:    _Query_GetDelegateKeyByEth_Handler,
		},
		{
			MethodName: "GetDelegateKeyByOrchestrator",
			Handler:    _Query_GetDelegateKeyByOrchestrator_Handler,
		},
		{
			MethodName: "HyperionModuleState",
			Handler:    _Query_HyperionModuleState_Handler,
		},
		{
			MethodName: "MissingHyperionNonces",
			Handler:    _Query_MissingHyperionNonces_Handler,
		},
		{
			MethodName: "GetHyperionIdFromChainId",
			Handler:    _Query_GetHyperionIdFromChainId_Handler,
		},
		{
			MethodName: "QueryGetLastObservedEthereumBlockHeight",
			Handler:    _Query_QueryGetLastObservedEthereumBlockHeight_Handler,
		},
		{
			MethodName: "QueryGetLastObservedEventNonce",
			Handler:    _Query_QueryGetLastObservedEventNonce_Handler,
		},
		{
			MethodName: "QueryGetTransactionsByPageAndSize",
			Handler:    _Query_QueryGetTransactionsByPageAndSize_Handler,
		},
		{
			MethodName: "QueryGetCounterpartyChainParamsByChainId",
			Handler:    _Query_QueryGetCounterpartyChainParamsByChainId_Handler,
		},
		{
			MethodName: "QueryGetRpcListByChainId",
			Handler:    _Query_QueryGetRpcListByChainId_Handler,
		},
		{
			MethodName: "QueryGetDelegateKeysByAddress",
			Handler:    _Query_QueryGetDelegateKeysByAddress_Handler,
		},
		{
			MethodName: "OutgoingExternalDataTxs",
			Handler:    _Query_OutgoingExternalDataTxs_Handler,
		},
		{
			MethodName: "QueryGetTokensOfChain",
			Handler:    _Query_QueryGetTokensOfChain_Handler,
		},
		{
			MethodName: "OutgoingTxBatchesCount",
			Handler:    _Query_OutgoingTxBatchesCount_Handler,
		},
		{
			MethodName: "QueryHistoricalFees",
			Handler:    _Query_QueryHistoricalFees_Handler,
		},
		{
			MethodName: "QueryGetOrchestratorsData",
			Handler:    _Query_QueryGetOrchestratorsData_Handler,
		},
		{
			MethodName: "QueryGetOrchestratorData",
			Handler:    _Query_QueryGetOrchestratorData_Handler,
		},
		{
			MethodName: "QueryGetOrchestratorHyperionData",
			Handler:    _Query_QueryGetOrchestratorHyperionData_Handler,
		},
		{
			MethodName: "OutgoingTxBatchesWithOptions",
			Handler:    _Query_OutgoingTxBatchesWithOptions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helios/hyperion/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAttestationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAttestationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAttestationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HyperionId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.HyperionId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ClaimHash) > 0 {
		i -= len(m.ClaimHash)
		copy(dAtA[i:], m.ClaimHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ClaimHash)))
		i--
		dAtA[i] = 0x12
	}
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAttestationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAttestationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAttestationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Attestation != nil {
		{
			size, err := m.Attestation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCurrentValsetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCurrentValsetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCurrentValsetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HyperionId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.HyperionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryCurrentValsetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCurrentValsetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCurrentValsetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Valset != nil {
		{
			size, err := m.Valset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryValsetRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValsetRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValsetRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x10
	}
	if m.HyperionId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.HyperionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryValsetRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValsetRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValsetRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Valset != nil {
		{
			size, err := m.Valset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryValsetConfirmRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValsetConfirmRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValsetConfirmRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x10
	}
	if m.HyperionId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.HyperionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryValsetConfirmResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValsetConfirmResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValsetConfirmResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Confirm != nil {
		{
			size, err := m.Confirm.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryValsetConfirmsByNonceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValsetConfirmsByNonceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValsetConfirmsByNonceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x10
	}
	if m.HyperionId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.HyperionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryValsetConfirmsByNonceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValsetConfirmsByNonceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValsetConfirmsByNonceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Confirms) > 0 {
		for iNdEx := len(m.Confirms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Confirms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastValsetRequestsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastValsetRequestsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastValsetRequestsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HyperionId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.HyperionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastValsetRequestsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastValsetRequestsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastValsetRequestsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Valsets) > 0 {
		for iNdEx := len(m.Valsets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Valsets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastPendingValsetRequestByAddrRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastPendingValsetRequestByAddrRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastPendingValsetRequestByAddrRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.HyperionId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.HyperionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastPendingValsetRequestByAddrResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastPendingValsetRequestByAddrResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastPendingValsetRequestByAddrResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Valsets) > 0 {
		for iNdEx := len(m.Valsets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Valsets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryBatchFeeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBatchFeeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBatchFeeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HyperionId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.HyperionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryBatchFeeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBatchFeeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBatchFeeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BatchFees) > 0 {
		for iNdEx := len(m.BatchFees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BatchFees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryBatchFeeWithMinimumFeeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBatchFeeWithMinimumFeeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBatchFeeWithMinimumFeeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.MinimumTxFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.MinimumBatchFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.HyperionId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.HyperionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryBatchFeeWithMinimumFeeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBatchFeeWithMinimumFeeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBatchFeeWithMinimumFeeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BatchFees) > 0 {
		for iNdEx := len(m.BatchFees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BatchFees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastPendingBatchRequestByAddrRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastPendingBatchRequestByAddrRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastPendingBatchRequestByAddrRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.HyperionId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.HyperionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastPendingBatchRequestByAddrResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastPendingBatchRequestByAddrResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastPendingBatchRequestByAddrResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Batch != nil {
		{
			size, err := m.Batch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastPendingBatchsRequestByAddrRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastPendingBatchsRequestByAddrRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastPendingBatchsRequestByAddrRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.HyperionId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.HyperionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastPendingBatchsRequestByAddrResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastPendingBatchsRequestByAddrResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastPendingBatchsRequestByAddrResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Batchs) > 0 {
		for iNdEx := len(m.Batchs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Batchs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryOutgoingTxBatchesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOutgoingTxBatchesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOutgoingTxBatchesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HyperionId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.HyperionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryOutgoingTxBatchesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOutgoingTxBatchesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOutgoingTxBatchesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Batches) > 0 {
		for iNdEx := len(m.Batches) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Batches[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryBatchRequestByNonceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBatchRequestByNonceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBatchRequestByNonceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x10
	}
	if m.HyperionId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.HyperionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryBatchRequestByNonceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBatchRequestByNonceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBatchRequestByNonceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Batch != nil {
		{
			size, err := m.Batch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBatchConfirmsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBatchConfirmsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBatchConfirmsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x10
	}
	if m.HyperionId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.HyperionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryBatchConfirmsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBatchConfirmsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBatchConfirmsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Confirms) > 0 {
		for iNdEx := len(m.Confirms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Confirms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastEventByAddrRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastEventByAddrRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastEventByAddrRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.HyperionId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.HyperionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastEventByAddrResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastEventByAddrResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastEventByAddrResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastClaimEvent != nil {
		{
			size, err := m.LastClaimEvent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenAddressToDenomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenAddressToDenomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenAddressToDenomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenAddress) > 0 {
		i -= len(m.TokenAddress)
		copy(dAtA[i:], m.TokenAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TokenAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.HyperionId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.HyperionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenAddressToDenomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenAddressToDenomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenAddressToDenomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CosmosOriginated {
		i--
		if m.CosmosOriginated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDenomToTokenAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDenomToTokenAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDenomToTokenAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if m.HyperionId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.HyperionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDenomToTokenAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDenomToTokenAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDenomToTokenAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CosmosOriginated {
		i--
		if m.CosmosOriginated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.TokenAddress) > 0 {
		i -= len(m.TokenAddress)
		copy(dAtA[i:], m.TokenAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TokenAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegateKeysByValidatorAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegateKeysByValidatorAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegateKeysByValidatorAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.HyperionId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.HyperionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegateKeysByValidatorAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegateKeysByValidatorAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegateKeysByValidatorAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrchestratorAddress) > 0 {
		i -= len(m.OrchestratorAddress)
		copy(dAtA[i:], m.OrchestratorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OrchestratorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.EthAddress) > 0 {
		i -= len(m.EthAddress)
		copy(dAtA[i:], m.EthAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EthAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegateKeysByEthAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegateKeysByEthAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegateKeysByEthAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EthAddress) > 0 {
		i -= len(m.EthAddress)
		copy(dAtA[i:], m.EthAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EthAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.HyperionId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.HyperionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegateKeysByEthAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegateKeysByEthAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegateKeysByEthAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrchestratorAddress) > 0 {
		i -= len(m.OrchestratorAddress)
		copy(dAtA[i:], m.OrchestratorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OrchestratorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegateKeysByOrchestratorAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegateKeysByOrchestratorAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegateKeysByOrchestratorAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrchestratorAddress) > 0 {
		i -= len(m.OrchestratorAddress)
		copy(dAtA[i:], m.OrchestratorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OrchestratorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.HyperionId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.HyperionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegateKeysByOrchestratorAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegateKeysByOrchestratorAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegateKeysByOrchestratorAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EthAddress) > 0 {
		i -= len(m.EthAddress)
		copy(dAtA[i:], m.EthAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EthAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPendingSendToChain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingSendToChain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingSendToChain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SenderAddress) > 0 {
		i -= len(m.SenderAddress)
		copy(dAtA[i:], m.SenderAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SenderAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.HyperionId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.HyperionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPendingSendToChainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingSendToChainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingSendToChainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UnbatchedTransfers) > 0 {
		for iNdEx := len(m.UnbatchedTransfers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UnbatchedTransfers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.TransfersInBatches) > 0 {
		for iNdEx := len(m.TransfersInBatches) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TransfersInBatches[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPendingSendToChainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPendingSendToChainRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPendingSendToChainRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HyperionId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.HyperionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPendingSendToChainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPendingSendToChainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPendingSendToChainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UnbatchedTransfers) > 0 {
		for iNdEx := len(m.UnbatchedTransfers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UnbatchedTransfers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.TransfersInBatches) > 0 {
		for iNdEx := len(m.TransfersInBatches) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TransfersInBatches[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryModuleStateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryModuleStateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryModuleStateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryModuleStateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryModuleStateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryModuleStateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MissingNoncesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MissingNoncesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MissingNoncesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HyperionId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.HyperionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MissingNoncesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MissingNoncesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MissingNoncesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OperatorAddresses) > 0 {
		for iNdEx := len(m.OperatorAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.OperatorAddresses[iNdEx])
			copy(dAtA[i:], m.OperatorAddresses[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.OperatorAddresses[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetHyperionIdFromChainIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetHyperionIdFromChainIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetHyperionIdFromChainIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetHyperionIdFromChainIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetHyperionIdFromChainIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetHyperionIdFromChainIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HyperionId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.HyperionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLastObservedEthereumBlockHeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLastObservedEthereumBlockHeightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLastObservedEthereumBlockHeightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HyperionId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.HyperionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLastObservedEthereumBlockHeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLastObservedEthereumBlockHeightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLastObservedEthereumBlockHeightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastObservedHeight != nil {
		{
			size, err := m.LastObservedHeight.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLastObservedEventNonceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLastObservedEventNonceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLastObservedEventNonceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HyperionId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.HyperionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLastObservedEventNonceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLastObservedEventNonceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLastObservedEventNonceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastObservedEventNonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.LastObservedEventNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTransactionsByPageAndSizeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTransactionsByPageAndSizeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTransactionsByPageAndSizeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FormatErc20 {
		i--
		if m.FormatErc20 {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTransactionsByPageAndSizeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTransactionsByPageAndSizeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTransactionsByPageAndSizeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Txs) > 0 {
		for iNdEx := len(m.Txs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Txs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCounterpartyChainParamsByChainIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCounterpartyChainParamsByChainIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCounterpartyChainParamsByChainIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCounterpartyChainParamsByChainIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCounterpartyChainParamsByChainIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCounterpartyChainParamsByChainIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CounterpartyChainParams != nil {
		{
			size, err := m.CounterpartyChainParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRpcListByChainIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRpcListByChainIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRpcListByChainIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRpcListByChainIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRpcListByChainIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRpcListByChainIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rpcs) > 0 {
		for iNdEx := len(m.Rpcs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rpcs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDelegateKeysByAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDelegateKeysByAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDelegateKeysByAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EthAddress) > 0 {
		i -= len(m.EthAddress)
		copy(dAtA[i:], m.EthAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EthAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDelegateKeysByAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDelegateKeysByAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDelegateKeysByAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainIds) > 0 {
		dAtA16 := make([]byte, len(m.ChainIds)*10)
		var j15 int
		for _, num := range m.ChainIds {
			for num >= 1<<7 {
				dAtA16[j15] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j15++
			}
			dAtA16[j15] = uint8(num)
			j15++
		}
		i -= j15
		copy(dAtA[i:], dAtA16[:j15])
		i = encodeVarintQuery(dAtA, i, uint64(j15))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOutgoingExternalDataTxsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOutgoingExternalDataTxsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOutgoingExternalDataTxsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HyperionId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.HyperionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryOutgoingExternalDataTxsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOutgoingExternalDataTxsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOutgoingExternalDataTxsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Txs) > 0 {
		for iNdEx := len(m.Txs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Txs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTokensOfChainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTokensOfChainRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTokensOfChainRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x18
	}
	if m.Size_ != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x10
	}
	if m.Page != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTokensOfChainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTokensOfChainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTokensOfChainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Tokens) > 0 {
		for iNdEx := len(m.Tokens) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tokens[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryOutgoingTxBatchesCountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOutgoingTxBatchesCountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOutgoingTxBatchesCountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HyperionId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.HyperionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryOutgoingTxBatchesCountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOutgoingTxBatchesCountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOutgoingTxBatchesCountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BatchCount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BatchCount))
		i--
		dAtA[i] = 0x10
	}
	if m.TxCount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TxCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryHistoricalFeesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHistoricalFeesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHistoricalFeesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HyperionId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.HyperionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryHistoricalFeesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHistoricalFeesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHistoricalFeesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Average != nil {
		{
			size, err := m.Average.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.High != nil {
		{
			size, err := m.High.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Low != nil {
		{
			size, err := m.Low.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.HistoricalFees) > 0 {
		for iNdEx := len(m.HistoricalFees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HistoricalFees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetOrchestratorsDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOrchestratorsDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOrchestratorsDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Orchestrators) > 0 {
		for iNdEx := len(m.Orchestrators) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Orchestrators[iNdEx])
			copy(dAtA[i:], m.Orchestrators[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Orchestrators[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetOrchestratorsDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOrchestratorsDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOrchestratorsDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrchestratorsData) > 0 {
		for iNdEx := len(m.OrchestratorsData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OrchestratorsData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetOrchestratorDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOrchestratorDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOrchestratorDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrchestratorAddress) > 0 {
		i -= len(m.OrchestratorAddress)
		copy(dAtA[i:], m.OrchestratorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OrchestratorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetOrchestratorDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOrchestratorDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOrchestratorDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrchestratorData != nil {
		{
			size, err := m.OrchestratorData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetOrchestratorHyperionDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOrchestratorHyperionDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOrchestratorHyperionDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HyperionId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.HyperionId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.OrchestratorAddress) > 0 {
		i -= len(m.OrchestratorAddress)
		copy(dAtA[i:], m.OrchestratorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OrchestratorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetOrchestratorHyperionDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOrchestratorHyperionDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOrchestratorHyperionDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrchestratorHyperionData != nil {
		{
			size, err := m.OrchestratorHyperionData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOutgoingTxBatchesWithOptionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOutgoingTxBatchesWithOptionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOutgoingTxBatchesWithOptionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CheckIfIHaveSignedBatch {
		i--
		if m.CheckIfIHaveSignedBatch {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x2a
	}
	if m.BatchTimeout != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BatchTimeout))
		i--
		dAtA[i] = 0x20
	}
	if len(m.TokenContract) > 0 {
		i -= len(m.TokenContract)
		copy(dAtA[i:], m.TokenContract)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TokenContract)))
		i--
		dAtA[i] = 0x1a
	}
	if m.BatchNonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BatchNonce))
		i--
		dAtA[i] = 0x10
	}
	if m.HyperionId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.HyperionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryOutgoingTxBatchesWithOptionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOutgoingTxBatchesWithOptionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOutgoingTxBatchesWithOptionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Batches) > 0 {
		for iNdEx := len(m.Batches) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Batches[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAttestationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	l = len(m.ClaimHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.HyperionId != 0 {
		n += 1 + sovQuery(uint64(m.HyperionId))
	}
	return n
}

func (m *QueryAttestationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Attestation != nil {
		l = m.Attestation.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCurrentValsetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HyperionId != 0 {
		n += 1 + sovQuery(uint64(m.HyperionId))
	}
	return n
}

func (m *QueryCurrentValsetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Valset != nil {
		l = m.Valset.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryValsetRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HyperionId != 0 {
		n += 1 + sovQuery(uint64(m.HyperionId))
	}
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	return n
}

func (m *QueryValsetRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Valset != nil {
		l = m.Valset.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryValsetConfirmRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HyperionId != 0 {
		n += 1 + sovQuery(uint64(m.HyperionId))
	}
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryValsetConfirmResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Confirm != nil {
		l = m.Confirm.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryValsetConfirmsByNonceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HyperionId != 0 {
		n += 1 + sovQuery(uint64(m.HyperionId))
	}
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	return n
}

func (m *QueryValsetConfirmsByNonceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Confirms) > 0 {
		for _, e := range m.Confirms {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryLastValsetRequestsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HyperionId != 0 {
		n += 1 + sovQuery(uint64(m.HyperionId))
	}
	return n
}

func (m *QueryLastValsetRequestsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Valsets) > 0 {
		for _, e := range m.Valsets {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryLastPendingValsetRequestByAddrRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HyperionId != 0 {
		n += 1 + sovQuery(uint64(m.HyperionId))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLastPendingValsetRequestByAddrResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Valsets) > 0 {
		for _, e := range m.Valsets {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryBatchFeeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HyperionId != 0 {
		n += 1 + sovQuery(uint64(m.HyperionId))
	}
	return n
}

func (m *QueryBatchFeeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BatchFees) > 0 {
		for _, e := range m.BatchFees {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryBatchFeeWithMinimumFeeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HyperionId != 0 {
		n += 1 + sovQuery(uint64(m.HyperionId))
	}
	l = m.MinimumBatchFee.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.MinimumTxFee.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryBatchFeeWithMinimumFeeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BatchFees) > 0 {
		for _, e := range m.BatchFees {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryLastPendingBatchRequestByAddrRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HyperionId != 0 {
		n += 1 + sovQuery(uint64(m.HyperionId))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLastPendingBatchRequestByAddrResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Batch != nil {
		l = m.Batch.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLastPendingBatchsRequestByAddrRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HyperionId != 0 {
		n += 1 + sovQuery(uint64(m.HyperionId))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLastPendingBatchsRequestByAddrResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Batchs) > 0 {
		for _, e := range m.Batchs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryOutgoingTxBatchesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HyperionId != 0 {
		n += 1 + sovQuery(uint64(m.HyperionId))
	}
	return n
}

func (m *QueryOutgoingTxBatchesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Batches) > 0 {
		for _, e := range m.Batches {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryBatchRequestByNonceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HyperionId != 0 {
		n += 1 + sovQuery(uint64(m.HyperionId))
	}
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBatchRequestByNonceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Batch != nil {
		l = m.Batch.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBatchConfirmsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HyperionId != 0 {
		n += 1 + sovQuery(uint64(m.HyperionId))
	}
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBatchConfirmsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Confirms) > 0 {
		for _, e := range m.Confirms {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryLastEventByAddrRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HyperionId != 0 {
		n += 1 + sovQuery(uint64(m.HyperionId))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLastEventByAddrResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LastClaimEvent != nil {
		l = m.LastClaimEvent.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTokenAddressToDenomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HyperionId != 0 {
		n += 1 + sovQuery(uint64(m.HyperionId))
	}
	l = len(m.TokenAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTokenAddressToDenomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.CosmosOriginated {
		n += 2
	}
	return n
}

func (m *QueryDenomToTokenAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HyperionId != 0 {
		n += 1 + sovQuery(uint64(m.HyperionId))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDenomToTokenAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TokenAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.CosmosOriginated {
		n += 2
	}
	return n
}

func (m *QueryDelegateKeysByValidatorAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HyperionId != 0 {
		n += 1 + sovQuery(uint64(m.HyperionId))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelegateKeysByValidatorAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EthAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.OrchestratorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelegateKeysByEthAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HyperionId != 0 {
		n += 1 + sovQuery(uint64(m.HyperionId))
	}
	l = len(m.EthAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelegateKeysByEthAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.OrchestratorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelegateKeysByOrchestratorAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HyperionId != 0 {
		n += 1 + sovQuery(uint64(m.HyperionId))
	}
	l = len(m.OrchestratorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelegateKeysByOrchestratorAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.EthAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPendingSendToChain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HyperionId != 0 {
		n += 1 + sovQuery(uint64(m.HyperionId))
	}
	l = len(m.SenderAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPendingSendToChainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TransfersInBatches) > 0 {
		for _, e := range m.TransfersInBatches {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.UnbatchedTransfers) > 0 {
		for _, e := range m.UnbatchedTransfers {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAllPendingSendToChainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HyperionId != 0 {
		n += 1 + sovQuery(uint64(m.HyperionId))
	}
	return n
}

func (m *QueryAllPendingSendToChainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TransfersInBatches) > 0 {
		for _, e := range m.TransfersInBatches {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.UnbatchedTransfers) > 0 {
		for _, e := range m.UnbatchedTransfers {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryModuleStateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryModuleStateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *MissingNoncesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HyperionId != 0 {
		n += 1 + sovQuery(uint64(m.HyperionId))
	}
	return n
}

func (m *MissingNoncesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OperatorAddresses) > 0 {
		for _, s := range m.OperatorAddresses {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetHyperionIdFromChainIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovQuery(uint64(m.ChainId))
	}
	return n
}

func (m *QueryGetHyperionIdFromChainIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HyperionId != 0 {
		n += 1 + sovQuery(uint64(m.HyperionId))
	}
	return n
}

func (m *QueryGetLastObservedEthereumBlockHeightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HyperionId != 0 {
		n += 1 + sovQuery(uint64(m.HyperionId))
	}
	return n
}

func (m *QueryGetLastObservedEthereumBlockHeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LastObservedHeight != nil {
		l = m.LastObservedHeight.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetLastObservedEventNonceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HyperionId != 0 {
		n += 1 + sovQuery(uint64(m.HyperionId))
	}
	return n
}

func (m *QueryGetLastObservedEventNonceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LastObservedEventNonce != 0 {
		n += 1 + sovQuery(uint64(m.LastObservedEventNonce))
	}
	return n
}

func (m *QueryGetTransactionsByPageAndSizeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.FormatErc20 {
		n += 2
	}
	return n
}

func (m *QueryGetTransactionsByPageAndSizeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Txs) > 0 {
		for _, e := range m.Txs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetCounterpartyChainParamsByChainIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovQuery(uint64(m.ChainId))
	}
	return n
}

func (m *QueryGetCounterpartyChainParamsByChainIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CounterpartyChainParams != nil {
		l = m.CounterpartyChainParams.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRpcListByChainIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovQuery(uint64(m.ChainId))
	}
	return n
}

func (m *QueryGetRpcListByChainIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rpcs) > 0 {
		for _, e := range m.Rpcs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetDelegateKeysByAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EthAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetDelegateKeysByAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ChainIds) > 0 {
		l = 0
		for _, e := range m.ChainIds {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	return n
}

func (m *QueryOutgoingExternalDataTxsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HyperionId != 0 {
		n += 1 + sovQuery(uint64(m.HyperionId))
	}
	return n
}

func (m *QueryOutgoingExternalDataTxsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Txs) > 0 {
		for _, e := range m.Txs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetTokensOfChainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovQuery(uint64(m.Page))
	}
	if m.Size_ != 0 {
		n += 1 + sovQuery(uint64(m.Size_))
	}
	if m.ChainId != 0 {
		n += 1 + sovQuery(uint64(m.ChainId))
	}
	return n
}

func (m *QueryGetTokensOfChainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tokens) > 0 {
		for _, e := range m.Tokens {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOutgoingTxBatchesCountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HyperionId != 0 {
		n += 1 + sovQuery(uint64(m.HyperionId))
	}
	return n
}

func (m *QueryOutgoingTxBatchesCountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TxCount != 0 {
		n += 1 + sovQuery(uint64(m.TxCount))
	}
	if m.BatchCount != 0 {
		n += 1 + sovQuery(uint64(m.BatchCount))
	}
	return n
}

func (m *QueryHistoricalFeesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HyperionId != 0 {
		n += 1 + sovQuery(uint64(m.HyperionId))
	}
	return n
}

func (m *QueryHistoricalFeesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.HistoricalFees) > 0 {
		for _, e := range m.HistoricalFees {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Low != nil {
		l = m.Low.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.High != nil {
		l = m.High.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Average != nil {
		l = m.Average.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetOrchestratorsDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Orchestrators) > 0 {
		for _, s := range m.Orchestrators {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetOrchestratorsDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OrchestratorsData) > 0 {
		for _, e := range m.OrchestratorsData {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetOrchestratorDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrchestratorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetOrchestratorDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrchestratorData != nil {
		l = m.OrchestratorData.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetOrchestratorHyperionDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrchestratorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.HyperionId != 0 {
		n += 1 + sovQuery(uint64(m.HyperionId))
	}
	return n
}

func (m *QueryGetOrchestratorHyperionDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrchestratorHyperionData != nil {
		l = m.OrchestratorHyperionData.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOutgoingTxBatchesWithOptionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HyperionId != 0 {
		n += 1 + sovQuery(uint64(m.HyperionId))
	}
	if m.BatchNonce != 0 {
		n += 1 + sovQuery(uint64(m.BatchNonce))
	}
	l = len(m.TokenContract)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.BatchTimeout != 0 {
		n += 1 + sovQuery(uint64(m.BatchTimeout))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.CheckIfIHaveSignedBatch {
		n += 2
	}
	return n
}

func (m *QueryOutgoingTxBatchesWithOptionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Batches) > 0 {
		for _, e := range m.Batches {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAttestationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAttestationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAttestationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimHash = append(m.ClaimHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ClaimHash == nil {
				m.ClaimHash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HyperionId", wireType)
			}
			m.HyperionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HyperionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAttestationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAttestationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAttestationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attestation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attestation == nil {
				m.Attestation = &Attestation{}
			}
			if err := m.Attestation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCurrentValsetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCurrentValsetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCurrentValsetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HyperionId", wireType)
			}
			m.HyperionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HyperionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCurrentValsetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCurrentValsetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCurrentValsetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Valset == nil {
				m.Valset = &Valset{}
			}
			if err := m.Valset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValsetRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValsetRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValsetRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HyperionId", wireType)
			}
			m.HyperionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HyperionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValsetRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValsetRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValsetRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Valset == nil {
				m.Valset = &Valset{}
			}
			if err := m.Valset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValsetConfirmRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValsetConfirmRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValsetConfirmRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HyperionId", wireType)
			}
			m.HyperionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HyperionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValsetConfirmResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValsetConfirmResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValsetConfirmResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Confirm == nil {
				m.Confirm = &MsgValsetConfirm{}
			}
			if err := m.Confirm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValsetConfirmsByNonceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValsetConfirmsByNonceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValsetConfirmsByNonceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HyperionId", wireType)
			}
			m.HyperionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HyperionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValsetConfirmsByNonceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValsetConfirmsByNonceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValsetConfirmsByNonceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Confirms = append(m.Confirms, &MsgValsetConfirm{})
			if err := m.Confirms[len(m.Confirms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastValsetRequestsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastValsetRequestsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastValsetRequestsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HyperionId", wireType)
			}
			m.HyperionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HyperionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastValsetRequestsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastValsetRequestsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastValsetRequestsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valsets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Valsets = append(m.Valsets, &Valset{})
			if err := m.Valsets[len(m.Valsets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastPendingValsetRequestByAddrRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastPendingValsetRequestByAddrRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastPendingValsetRequestByAddrRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HyperionId", wireType)
			}
			m.HyperionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HyperionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastPendingValsetRequestByAddrResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastPendingValsetRequestByAddrResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastPendingValsetRequestByAddrResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valsets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Valsets = append(m.Valsets, &Valset{})
			if err := m.Valsets[len(m.Valsets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBatchFeeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBatchFeeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBatchFeeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HyperionId", wireType)
			}
			m.HyperionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HyperionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBatchFeeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBatchFeeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBatchFeeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchFees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BatchFees = append(m.BatchFees, &BatchFees{})
			if err := m.BatchFees[len(m.BatchFees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBatchFeeWithMinimumFeeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBatchFeeWithMinimumFeeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBatchFeeWithMinimumFeeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HyperionId", wireType)
			}
			m.HyperionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HyperionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumBatchFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinimumBatchFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumTxFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinimumTxFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBatchFeeWithMinimumFeeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBatchFeeWithMinimumFeeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBatchFeeWithMinimumFeeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchFees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BatchFees = append(m.BatchFees, &BatchFeesWithIds{})
			if err := m.BatchFees[len(m.BatchFees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastPendingBatchRequestByAddrRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastPendingBatchRequestByAddrRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastPendingBatchRequestByAddrRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HyperionId", wireType)
			}
			m.HyperionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HyperionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastPendingBatchRequestByAddrResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastPendingBatchRequestByAddrResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastPendingBatchRequestByAddrResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Batch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Batch == nil {
				m.Batch = &OutgoingTxBatch{}
			}
			if err := m.Batch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastPendingBatchsRequestByAddrRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastPendingBatchsRequestByAddrRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastPendingBatchsRequestByAddrRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HyperionId", wireType)
			}
			m.HyperionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HyperionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastPendingBatchsRequestByAddrResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastPendingBatchsRequestByAddrResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastPendingBatchsRequestByAddrResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Batchs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Batchs = append(m.Batchs, &OutgoingTxBatch{})
			if err := m.Batchs[len(m.Batchs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOutgoingTxBatchesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOutgoingTxBatchesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOutgoingTxBatchesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HyperionId", wireType)
			}
			m.HyperionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HyperionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOutgoingTxBatchesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOutgoingTxBatchesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOutgoingTxBatchesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Batches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Batches = append(m.Batches, &OutgoingTxBatch{})
			if err := m.Batches[len(m.Batches)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBatchRequestByNonceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBatchRequestByNonceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBatchRequestByNonceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HyperionId", wireType)
			}
			m.HyperionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HyperionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBatchRequestByNonceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBatchRequestByNonceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBatchRequestByNonceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Batch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Batch == nil {
				m.Batch = &OutgoingTxBatch{}
			}
			if err := m.Batch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBatchConfirmsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBatchConfirmsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBatchConfirmsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HyperionId", wireType)
			}
			m.HyperionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HyperionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBatchConfirmsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBatchConfirmsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBatchConfirmsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Confirms = append(m.Confirms, &MsgConfirmBatch{})
			if err := m.Confirms[len(m.Confirms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastEventByAddrRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastEventByAddrRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastEventByAddrRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HyperionId", wireType)
			}
			m.HyperionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HyperionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastEventByAddrResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastEventByAddrResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastEventByAddrResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastClaimEvent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastClaimEvent == nil {
				m.LastClaimEvent = &LastClaimEvent{}
			}
			if err := m.LastClaimEvent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenAddressToDenomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenAddressToDenomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenAddressToDenomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HyperionId", wireType)
			}
			m.HyperionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HyperionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenAddressToDenomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenAddressToDenomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenAddressToDenomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosmosOriginated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CosmosOriginated = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDenomToTokenAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDenomToTokenAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDenomToTokenAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HyperionId", wireType)
			}
			m.HyperionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HyperionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDenomToTokenAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDenomToTokenAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDenomToTokenAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosmosOriginated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CosmosOriginated = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegateKeysByValidatorAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegateKeysByValidatorAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegateKeysByValidatorAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HyperionId", wireType)
			}
			m.HyperionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HyperionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegateKeysByValidatorAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegateKeysByValidatorAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegateKeysByValidatorAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrchestratorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrchestratorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegateKeysByEthAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegateKeysByEthAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegateKeysByEthAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HyperionId", wireType)
			}
			m.HyperionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HyperionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegateKeysByEthAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegateKeysByEthAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegateKeysByEthAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrchestratorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrchestratorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegateKeysByOrchestratorAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegateKeysByOrchestratorAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegateKeysByOrchestratorAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HyperionId", wireType)
			}
			m.HyperionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HyperionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrchestratorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrchestratorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegateKeysByOrchestratorAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegateKeysByOrchestratorAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegateKeysByOrchestratorAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPendingSendToChain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPendingSendToChain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPendingSendToChain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HyperionId", wireType)
			}
			m.HyperionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HyperionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPendingSendToChainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPendingSendToChainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPendingSendToChainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransfersInBatches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransfersInBatches = append(m.TransfersInBatches, &OutgoingTransferTx{})
			if err := m.TransfersInBatches[len(m.TransfersInBatches)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbatchedTransfers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnbatchedTransfers = append(m.UnbatchedTransfers, &OutgoingTransferTx{})
			if err := m.UnbatchedTransfers[len(m.UnbatchedTransfers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPendingSendToChainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPendingSendToChainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPendingSendToChainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HyperionId", wireType)
			}
			m.HyperionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HyperionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPendingSendToChainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPendingSendToChainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPendingSendToChainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransfersInBatches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransfersInBatches = append(m.TransfersInBatches, &OutgoingTransferTx{})
			if err := m.TransfersInBatches[len(m.TransfersInBatches)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbatchedTransfers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnbatchedTransfers = append(m.UnbatchedTransfers, &OutgoingTransferTx{})
			if err := m.UnbatchedTransfers[len(m.UnbatchedTransfers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryModuleStateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryModuleStateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryModuleStateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryModuleStateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryModuleStateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryModuleStateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &GenesisState{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MissingNoncesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MissingNoncesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MissingNoncesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HyperionId", wireType)
			}
			m.HyperionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HyperionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MissingNoncesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MissingNoncesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MissingNoncesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddresses = append(m.OperatorAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetHyperionIdFromChainIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetHyperionIdFromChainIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetHyperionIdFromChainIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetHyperionIdFromChainIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetHyperionIdFromChainIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetHyperionIdFromChainIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HyperionId", wireType)
			}
			m.HyperionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HyperionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLastObservedEthereumBlockHeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLastObservedEthereumBlockHeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLastObservedEthereumBlockHeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HyperionId", wireType)
			}
			m.HyperionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HyperionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLastObservedEthereumBlockHeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLastObservedEthereumBlockHeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLastObservedEthereumBlockHeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastObservedHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastObservedHeight == nil {
				m.LastObservedHeight = &LastObservedEthereumBlockHeight{}
			}
			if err := m.LastObservedHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLastObservedEventNonceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLastObservedEventNonceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLastObservedEventNonceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HyperionId", wireType)
			}
			m.HyperionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HyperionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLastObservedEventNonceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLastObservedEventNonceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLastObservedEventNonceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastObservedEventNonce", wireType)
			}
			m.LastObservedEventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastObservedEventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTransactionsByPageAndSizeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTransactionsByPageAndSizeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTransactionsByPageAndSizeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FormatErc20", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FormatErc20 = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTransactionsByPageAndSizeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTransactionsByPageAndSizeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTransactionsByPageAndSizeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txs = append(m.Txs, &TransferTx{})
			if err := m.Txs[len(m.Txs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCounterpartyChainParamsByChainIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCounterpartyChainParamsByChainIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCounterpartyChainParamsByChainIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCounterpartyChainParamsByChainIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCounterpartyChainParamsByChainIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCounterpartyChainParamsByChainIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterpartyChainParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CounterpartyChainParams == nil {
				m.CounterpartyChainParams = &CounterpartyChainParams{}
			}
			if err := m.CounterpartyChainParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRpcListByChainIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRpcListByChainIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRpcListByChainIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRpcListByChainIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRpcListByChainIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRpcListByChainIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rpcs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rpcs = append(m.Rpcs, &Rpc{})
			if err := m.Rpcs[len(m.Rpcs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDelegateKeysByAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDelegateKeysByAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDelegateKeysByAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDelegateKeysByAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDelegateKeysByAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDelegateKeysByAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ChainIds = append(m.ChainIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ChainIds) == 0 {
					m.ChainIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ChainIds = append(m.ChainIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOutgoingExternalDataTxsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOutgoingExternalDataTxsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOutgoingExternalDataTxsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HyperionId", wireType)
			}
			m.HyperionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HyperionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOutgoingExternalDataTxsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOutgoingExternalDataTxsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOutgoingExternalDataTxsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txs = append(m.Txs, &OutgoingExternalDataTx{})
			if err := m.Txs[len(m.Txs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTokensOfChainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTokensOfChainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTokensOfChainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTokensOfChainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTokensOfChainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTokensOfChainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tokens = append(m.Tokens, &FullMetadataToken{})
			if err := m.Tokens[len(m.Tokens)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOutgoingTxBatchesCountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOutgoingTxBatchesCountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOutgoingTxBatchesCountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HyperionId", wireType)
			}
			m.HyperionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HyperionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOutgoingTxBatchesCountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOutgoingTxBatchesCountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOutgoingTxBatchesCountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxCount", wireType)
			}
			m.TxCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchCount", wireType)
			}
			m.BatchCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHistoricalFeesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHistoricalFeesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHistoricalFeesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HyperionId", wireType)
			}
			m.HyperionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HyperionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHistoricalFeesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHistoricalFeesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHistoricalFeesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoricalFees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HistoricalFees = append(m.HistoricalFees, &types.Coin{})
			if err := m.HistoricalFees[len(m.HistoricalFees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Low", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Low == nil {
				m.Low = &types.Coin{}
			}
			if err := m.Low.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field High", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.High == nil {
				m.High = &types.Coin{}
			}
			if err := m.High.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Average", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Average == nil {
				m.Average = &types.Coin{}
			}
			if err := m.Average.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOrchestratorsDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOrchestratorsDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOrchestratorsDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrators", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrators = append(m.Orchestrators, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOrchestratorsDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOrchestratorsDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOrchestratorsDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrchestratorsData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrchestratorsData = append(m.OrchestratorsData, &OrchestratorData{})
			if err := m.OrchestratorsData[len(m.OrchestratorsData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOrchestratorDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOrchestratorDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOrchestratorDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrchestratorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrchestratorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOrchestratorDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOrchestratorDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOrchestratorDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrchestratorData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OrchestratorData == nil {
				m.OrchestratorData = &OrchestratorData{}
			}
			if err := m.OrchestratorData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOrchestratorHyperionDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOrchestratorHyperionDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOrchestratorHyperionDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrchestratorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrchestratorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HyperionId", wireType)
			}
			m.HyperionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HyperionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOrchestratorHyperionDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOrchestratorHyperionDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOrchestratorHyperionDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrchestratorHyperionData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OrchestratorHyperionData == nil {
				m.OrchestratorHyperionData = &OrchestratorHyperionData{}
			}
			if err := m.OrchestratorHyperionData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOutgoingTxBatchesWithOptionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOutgoingTxBatchesWithOptionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOutgoingTxBatchesWithOptionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HyperionId", wireType)
			}
			m.HyperionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HyperionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchNonce", wireType)
			}
			m.BatchNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchTimeout", wireType)
			}
			m.BatchTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchTimeout |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckIfIHaveSignedBatch", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CheckIfIHaveSignedBatch = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOutgoingTxBatchesWithOptionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOutgoingTxBatchesWithOptionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOutgoingTxBatchesWithOptionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Batches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Batches = append(m.Batches, &OutgoingTxBatch{})
			if err := m.Batches[len(m.Batches)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
