// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: helios/hyperion/v1/external_data.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// OutgoingExternalDataTx represents an individual send from Hyperion to external contract
type OutgoingExternalDataTx struct {
	HyperionId              uint64                  `protobuf:"varint,1,opt,name=hyperion_id,json=hyperionId,proto3" json:"hyperion_id,omitempty"`
	Id                      uint64                  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Sender                  string                  `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
	CronId                  string                  `protobuf:"bytes,4,opt,name=cron_id,json=cronId,proto3" json:"cron_id,omitempty"`
	ExternalContractAddress string                  `protobuf:"bytes,5,opt,name=external_contract_address,json=externalContractAddress,proto3" json:"external_contract_address,omitempty"`
	AbiCallHex              string                  `protobuf:"bytes,6,opt,name=abi_call_hex,json=abiCallHex,proto3" json:"abi_call_hex,omitempty"`
	Fee                     *Token                  `protobuf:"bytes,7,opt,name=fee,proto3" json:"fee,omitempty"`
	Timeout                 uint64                  `protobuf:"varint,8,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Nonce                   uint64                  `protobuf:"varint,9,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Block                   uint64                  `protobuf:"varint,10,opt,name=block,proto3" json:"block,omitempty"`
	Claims                  []*MsgExternalDataClaim `protobuf:"bytes,11,rep,name=claims,proto3" json:"claims,omitempty"`
	Votes                   []string                `protobuf:"bytes,12,rep,name=votes,proto3" json:"votes,omitempty"`
}

func (m *OutgoingExternalDataTx) Reset()         { *m = OutgoingExternalDataTx{} }
func (m *OutgoingExternalDataTx) String() string { return proto.CompactTextString(m) }
func (*OutgoingExternalDataTx) ProtoMessage()    {}
func (*OutgoingExternalDataTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_2501f73a14d4f331, []int{0}
}
func (m *OutgoingExternalDataTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutgoingExternalDataTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OutgoingExternalDataTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OutgoingExternalDataTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutgoingExternalDataTx.Merge(m, src)
}
func (m *OutgoingExternalDataTx) XXX_Size() int {
	return m.Size()
}
func (m *OutgoingExternalDataTx) XXX_DiscardUnknown() {
	xxx_messageInfo_OutgoingExternalDataTx.DiscardUnknown(m)
}

var xxx_messageInfo_OutgoingExternalDataTx proto.InternalMessageInfo

func (m *OutgoingExternalDataTx) GetHyperionId() uint64 {
	if m != nil {
		return m.HyperionId
	}
	return 0
}

func (m *OutgoingExternalDataTx) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *OutgoingExternalDataTx) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *OutgoingExternalDataTx) GetCronId() string {
	if m != nil {
		return m.CronId
	}
	return ""
}

func (m *OutgoingExternalDataTx) GetExternalContractAddress() string {
	if m != nil {
		return m.ExternalContractAddress
	}
	return ""
}

func (m *OutgoingExternalDataTx) GetAbiCallHex() string {
	if m != nil {
		return m.AbiCallHex
	}
	return ""
}

func (m *OutgoingExternalDataTx) GetFee() *Token {
	if m != nil {
		return m.Fee
	}
	return nil
}

func (m *OutgoingExternalDataTx) GetTimeout() uint64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *OutgoingExternalDataTx) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *OutgoingExternalDataTx) GetBlock() uint64 {
	if m != nil {
		return m.Block
	}
	return 0
}

func (m *OutgoingExternalDataTx) GetClaims() []*MsgExternalDataClaim {
	if m != nil {
		return m.Claims
	}
	return nil
}

func (m *OutgoingExternalDataTx) GetVotes() []string {
	if m != nil {
		return m.Votes
	}
	return nil
}

func init() {
	proto.RegisterType((*OutgoingExternalDataTx)(nil), "helios.hyperion.v1.OutgoingExternalDataTx")
}

func init() {
	proto.RegisterFile("helios/hyperion/v1/external_data.proto", fileDescriptor_2501f73a14d4f331)
}

var fileDescriptor_2501f73a14d4f331 = []byte{
	// 407 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xc1, 0x6e, 0xd3, 0x30,
	0x1c, 0xc6, 0x9b, 0x66, 0x6b, 0xa9, 0x3b, 0x71, 0xb0, 0xd0, 0xe6, 0x4d, 0x22, 0x44, 0x08, 0xa1,
	0x20, 0x44, 0xa2, 0x8d, 0x1b, 0x27, 0xa0, 0x20, 0xb1, 0x03, 0x42, 0x8a, 0x76, 0xe2, 0x12, 0x39,
	0xf6, 0x9f, 0xc6, 0x9a, 0x6b, 0x57, 0xb6, 0x57, 0x65, 0x6f, 0xc1, 0x3b, 0xf0, 0x32, 0x1c, 0x77,
	0xe4, 0x88, 0xda, 0x17, 0x41, 0xb1, 0x13, 0x10, 0x5a, 0x6f, 0xfe, 0xbe, 0xef, 0xf7, 0xf9, 0x2f,
	0xfb, 0x8f, 0x9e, 0x37, 0x20, 0x85, 0xb6, 0x45, 0x73, 0xbb, 0x06, 0x23, 0xb4, 0x2a, 0x36, 0xe7,
	0x05, 0xb4, 0x0e, 0x8c, 0xa2, 0xb2, 0xe2, 0xd4, 0xd1, 0x7c, 0x6d, 0xb4, 0xd3, 0x18, 0x07, 0x2e,
	0x1f, 0xb8, 0x7c, 0x73, 0x7e, 0xf6, 0x6c, 0x4f, 0x97, 0x3a, 0x07, 0xd6, 0x51, 0xd7, 0x21, 0xbe,
	0x79, 0xf6, 0x78, 0x0f, 0xb5, 0xb2, 0x4b, 0x1b, 0xe2, 0xa7, 0x3f, 0x62, 0x74, 0xfc, 0xe5, 0xc6,
	0x2d, 0xb5, 0x50, 0xcb, 0x8f, 0xfd, 0xe0, 0x0f, 0xd4, 0xd1, 0xab, 0x16, 0x3f, 0x41, 0xf3, 0xa1,
	0x54, 0x09, 0x4e, 0xa2, 0x34, 0xca, 0x0e, 0x4a, 0x34, 0x58, 0x97, 0x1c, 0x3f, 0x44, 0x63, 0xc1,
	0xc9, 0xd8, 0xfb, 0x63, 0xc1, 0xf1, 0x31, 0x9a, 0x58, 0x50, 0x1c, 0x0c, 0x89, 0xd3, 0x28, 0x9b,
	0x95, 0xbd, 0xc2, 0x27, 0x68, 0xca, 0x4c, 0xb8, 0xe4, 0x20, 0x04, 0x9d, 0xbc, 0xe4, 0xf8, 0x0d,
	0x3a, 0xfd, 0xfb, 0x58, 0xa6, 0x95, 0x33, 0x94, 0xb9, 0x8a, 0x72, 0x6e, 0xc0, 0x5a, 0x72, 0xe8,
	0xd1, 0x93, 0x01, 0x58, 0xf4, 0xf9, 0xbb, 0x10, 0xe3, 0x14, 0x1d, 0xd1, 0x5a, 0x54, 0x8c, 0x4a,
	0x59, 0x35, 0xd0, 0x92, 0x89, 0xc7, 0x11, 0xad, 0xc5, 0x82, 0x4a, 0xf9, 0x09, 0x5a, 0xfc, 0x12,
	0xc5, 0xdf, 0x00, 0xc8, 0x34, 0x8d, 0xb2, 0xf9, 0xc5, 0x69, 0x7e, 0xff, 0x07, 0xf3, 0x2b, 0x7d,
	0x0d, 0xaa, 0xec, 0x28, 0x4c, 0xd0, 0xd4, 0x89, 0x15, 0xe8, 0x1b, 0x47, 0x1e, 0xf8, 0x07, 0x0d,
	0x12, 0x3f, 0x42, 0x87, 0x4a, 0x2b, 0x06, 0x64, 0xe6, 0xfd, 0x20, 0x3a, 0xb7, 0x96, 0x9a, 0x5d,
	0x13, 0x14, 0x5c, 0x2f, 0xf0, 0x5b, 0x34, 0x61, 0x92, 0x8a, 0x95, 0x25, 0xf3, 0x34, 0xce, 0xe6,
	0x17, 0xd9, 0xbe, 0xa9, 0x9f, 0xed, 0x7f, 0x3f, 0xbd, 0xe8, 0x0a, 0x65, 0xdf, 0xeb, 0xee, 0xdd,
	0x68, 0x07, 0x96, 0x1c, 0xa5, 0x71, 0x36, 0x2b, 0x83, 0x78, 0xbf, 0xf8, 0xb9, 0x4d, 0xa2, 0xbb,
	0x6d, 0x12, 0xfd, 0xde, 0x26, 0xd1, 0xf7, 0x5d, 0x32, 0xba, 0xdb, 0x25, 0xa3, 0x5f, 0xbb, 0x64,
	0xf4, 0xf5, 0x45, 0x18, 0xf0, 0x8a, 0x69, 0x03, 0xc5, 0x70, 0x6e, 0xa8, 0x50, 0x45, 0xfb, 0x6f,
	0xe5, 0xee, 0x76, 0x0d, 0xb6, 0x9e, 0xf8, 0x8d, 0xbf, 0xfe, 0x13, 0x00, 0x00, 0xff, 0xff, 0xb1,
	0x46, 0x17, 0xaf, 0x74, 0x02, 0x00, 0x00,
}

func (m *OutgoingExternalDataTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutgoingExternalDataTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OutgoingExternalDataTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Votes) > 0 {
		for iNdEx := len(m.Votes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Votes[iNdEx])
			copy(dAtA[i:], m.Votes[iNdEx])
			i = encodeVarintExternalData(dAtA, i, uint64(len(m.Votes[iNdEx])))
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.Claims) > 0 {
		for iNdEx := len(m.Claims) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Claims[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExternalData(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.Block != 0 {
		i = encodeVarintExternalData(dAtA, i, uint64(m.Block))
		i--
		dAtA[i] = 0x50
	}
	if m.Nonce != 0 {
		i = encodeVarintExternalData(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x48
	}
	if m.Timeout != 0 {
		i = encodeVarintExternalData(dAtA, i, uint64(m.Timeout))
		i--
		dAtA[i] = 0x40
	}
	if m.Fee != nil {
		{
			size, err := m.Fee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExternalData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.AbiCallHex) > 0 {
		i -= len(m.AbiCallHex)
		copy(dAtA[i:], m.AbiCallHex)
		i = encodeVarintExternalData(dAtA, i, uint64(len(m.AbiCallHex)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ExternalContractAddress) > 0 {
		i -= len(m.ExternalContractAddress)
		copy(dAtA[i:], m.ExternalContractAddress)
		i = encodeVarintExternalData(dAtA, i, uint64(len(m.ExternalContractAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CronId) > 0 {
		i -= len(m.CronId)
		copy(dAtA[i:], m.CronId)
		i = encodeVarintExternalData(dAtA, i, uint64(len(m.CronId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintExternalData(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintExternalData(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.HyperionId != 0 {
		i = encodeVarintExternalData(dAtA, i, uint64(m.HyperionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintExternalData(dAtA []byte, offset int, v uint64) int {
	offset -= sovExternalData(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OutgoingExternalDataTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HyperionId != 0 {
		n += 1 + sovExternalData(uint64(m.HyperionId))
	}
	if m.Id != 0 {
		n += 1 + sovExternalData(uint64(m.Id))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovExternalData(uint64(l))
	}
	l = len(m.CronId)
	if l > 0 {
		n += 1 + l + sovExternalData(uint64(l))
	}
	l = len(m.ExternalContractAddress)
	if l > 0 {
		n += 1 + l + sovExternalData(uint64(l))
	}
	l = len(m.AbiCallHex)
	if l > 0 {
		n += 1 + l + sovExternalData(uint64(l))
	}
	if m.Fee != nil {
		l = m.Fee.Size()
		n += 1 + l + sovExternalData(uint64(l))
	}
	if m.Timeout != 0 {
		n += 1 + sovExternalData(uint64(m.Timeout))
	}
	if m.Nonce != 0 {
		n += 1 + sovExternalData(uint64(m.Nonce))
	}
	if m.Block != 0 {
		n += 1 + sovExternalData(uint64(m.Block))
	}
	if len(m.Claims) > 0 {
		for _, e := range m.Claims {
			l = e.Size()
			n += 1 + l + sovExternalData(uint64(l))
		}
	}
	if len(m.Votes) > 0 {
		for _, s := range m.Votes {
			l = len(s)
			n += 1 + l + sovExternalData(uint64(l))
		}
	}
	return n
}

func sovExternalData(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozExternalData(x uint64) (n int) {
	return sovExternalData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OutgoingExternalDataTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExternalData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutgoingExternalDataTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutgoingExternalDataTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HyperionId", wireType)
			}
			m.HyperionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HyperionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExternalData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExternalData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CronId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExternalData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExternalData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CronId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExternalData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExternalData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbiCallHex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExternalData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExternalData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AbiCallHex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExternalData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExternalData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fee == nil {
				m.Fee = &Token{}
			}
			if err := m.Fee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			m.Block = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Block |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claims", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExternalData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExternalData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Claims = append(m.Claims, &MsgExternalDataClaim{})
			if err := m.Claims[len(m.Claims)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Votes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExternalData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExternalData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Votes = append(m.Votes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExternalData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExternalData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExternalData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExternalData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExternalData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExternalData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthExternalData
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupExternalData
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthExternalData
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthExternalData        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExternalData          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupExternalData = fmt.Errorf("proto: unexpected end of group")
)
