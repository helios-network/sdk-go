// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: helios/hyperion/v1/events.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EventAttestationObserved struct {
	AttestationType ClaimType `protobuf:"varint,1,opt,name=attestation_type,json=attestationType,proto3,enum=helios.hyperion.v1.ClaimType" json:"attestation_type,omitempty"`
	BridgeContract  string    `protobuf:"bytes,2,opt,name=bridge_contract,json=bridgeContract,proto3" json:"bridge_contract,omitempty"`
	BridgeChainId   uint64    `protobuf:"varint,3,opt,name=bridge_chain_id,json=bridgeChainId,proto3" json:"bridge_chain_id,omitempty"`
	AttestationId   []byte    `protobuf:"bytes,4,opt,name=attestation_id,json=attestationId,proto3" json:"attestation_id,omitempty"`
	Nonce           uint64    `protobuf:"varint,5,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *EventAttestationObserved) Reset()         { *m = EventAttestationObserved{} }
func (m *EventAttestationObserved) String() string { return proto.CompactTextString(m) }
func (*EventAttestationObserved) ProtoMessage()    {}
func (*EventAttestationObserved) Descriptor() ([]byte, []int) {
	return fileDescriptor_26d0bd3a761f8331, []int{0}
}
func (m *EventAttestationObserved) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventAttestationObserved) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventAttestationObserved.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventAttestationObserved) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAttestationObserved.Merge(m, src)
}
func (m *EventAttestationObserved) XXX_Size() int {
	return m.Size()
}
func (m *EventAttestationObserved) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAttestationObserved.DiscardUnknown(m)
}

var xxx_messageInfo_EventAttestationObserved proto.InternalMessageInfo

func (m *EventAttestationObserved) GetAttestationType() ClaimType {
	if m != nil {
		return m.AttestationType
	}
	return CLAIM_TYPE_UNKNOWN
}

func (m *EventAttestationObserved) GetBridgeContract() string {
	if m != nil {
		return m.BridgeContract
	}
	return ""
}

func (m *EventAttestationObserved) GetBridgeChainId() uint64 {
	if m != nil {
		return m.BridgeChainId
	}
	return 0
}

func (m *EventAttestationObserved) GetAttestationId() []byte {
	if m != nil {
		return m.AttestationId
	}
	return nil
}

func (m *EventAttestationObserved) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type EventBridgeWithdrawCanceled struct {
	BridgeContract string `protobuf:"bytes,1,opt,name=bridge_contract,json=bridgeContract,proto3" json:"bridge_contract,omitempty"`
	BridgeChainId  uint64 `protobuf:"varint,2,opt,name=bridge_chain_id,json=bridgeChainId,proto3" json:"bridge_chain_id,omitempty"`
}

func (m *EventBridgeWithdrawCanceled) Reset()         { *m = EventBridgeWithdrawCanceled{} }
func (m *EventBridgeWithdrawCanceled) String() string { return proto.CompactTextString(m) }
func (*EventBridgeWithdrawCanceled) ProtoMessage()    {}
func (*EventBridgeWithdrawCanceled) Descriptor() ([]byte, []int) {
	return fileDescriptor_26d0bd3a761f8331, []int{1}
}
func (m *EventBridgeWithdrawCanceled) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventBridgeWithdrawCanceled) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventBridgeWithdrawCanceled.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventBridgeWithdrawCanceled) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventBridgeWithdrawCanceled.Merge(m, src)
}
func (m *EventBridgeWithdrawCanceled) XXX_Size() int {
	return m.Size()
}
func (m *EventBridgeWithdrawCanceled) XXX_DiscardUnknown() {
	xxx_messageInfo_EventBridgeWithdrawCanceled.DiscardUnknown(m)
}

var xxx_messageInfo_EventBridgeWithdrawCanceled proto.InternalMessageInfo

func (m *EventBridgeWithdrawCanceled) GetBridgeContract() string {
	if m != nil {
		return m.BridgeContract
	}
	return ""
}

func (m *EventBridgeWithdrawCanceled) GetBridgeChainId() uint64 {
	if m != nil {
		return m.BridgeChainId
	}
	return 0
}

type EventOutgoingBatch struct {
	HyperionId          uint64   `protobuf:"varint,1,opt,name=hyperion_id,json=hyperionId,proto3" json:"hyperion_id,omitempty"`
	Denom               string   `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	OrchestratorAddress string   `protobuf:"bytes,3,opt,name=orchestrator_address,json=orchestratorAddress,proto3" json:"orchestrator_address,omitempty"`
	BatchNonce          uint64   `protobuf:"varint,4,opt,name=batch_nonce,json=batchNonce,proto3" json:"batch_nonce,omitempty"`
	BatchTimeout        uint64   `protobuf:"varint,5,opt,name=batch_timeout,json=batchTimeout,proto3" json:"batch_timeout,omitempty"`
	BatchTxIds          []uint64 `protobuf:"varint,6,rep,packed,name=batch_tx_ids,json=batchTxIds,proto3" json:"batch_tx_ids,omitempty"`
}

func (m *EventOutgoingBatch) Reset()         { *m = EventOutgoingBatch{} }
func (m *EventOutgoingBatch) String() string { return proto.CompactTextString(m) }
func (*EventOutgoingBatch) ProtoMessage()    {}
func (*EventOutgoingBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_26d0bd3a761f8331, []int{2}
}
func (m *EventOutgoingBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventOutgoingBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventOutgoingBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventOutgoingBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventOutgoingBatch.Merge(m, src)
}
func (m *EventOutgoingBatch) XXX_Size() int {
	return m.Size()
}
func (m *EventOutgoingBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_EventOutgoingBatch.DiscardUnknown(m)
}

var xxx_messageInfo_EventOutgoingBatch proto.InternalMessageInfo

func (m *EventOutgoingBatch) GetHyperionId() uint64 {
	if m != nil {
		return m.HyperionId
	}
	return 0
}

func (m *EventOutgoingBatch) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *EventOutgoingBatch) GetOrchestratorAddress() string {
	if m != nil {
		return m.OrchestratorAddress
	}
	return ""
}

func (m *EventOutgoingBatch) GetBatchNonce() uint64 {
	if m != nil {
		return m.BatchNonce
	}
	return 0
}

func (m *EventOutgoingBatch) GetBatchTimeout() uint64 {
	if m != nil {
		return m.BatchTimeout
	}
	return 0
}

func (m *EventOutgoingBatch) GetBatchTxIds() []uint64 {
	if m != nil {
		return m.BatchTxIds
	}
	return nil
}

type EventOutgoingBatchCanceled struct {
	HyperionId     uint64 `protobuf:"varint,1,opt,name=hyperion_id,json=hyperionId,proto3" json:"hyperion_id,omitempty"`
	BridgeContract string `protobuf:"bytes,2,opt,name=bridge_contract,json=bridgeContract,proto3" json:"bridge_contract,omitempty"`
	BridgeChainId  uint64 `protobuf:"varint,3,opt,name=bridge_chain_id,json=bridgeChainId,proto3" json:"bridge_chain_id,omitempty"`
	BatchId        uint64 `protobuf:"varint,4,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	Nonce          uint64 `protobuf:"varint,5,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *EventOutgoingBatchCanceled) Reset()         { *m = EventOutgoingBatchCanceled{} }
func (m *EventOutgoingBatchCanceled) String() string { return proto.CompactTextString(m) }
func (*EventOutgoingBatchCanceled) ProtoMessage()    {}
func (*EventOutgoingBatchCanceled) Descriptor() ([]byte, []int) {
	return fileDescriptor_26d0bd3a761f8331, []int{3}
}
func (m *EventOutgoingBatchCanceled) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventOutgoingBatchCanceled) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventOutgoingBatchCanceled.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventOutgoingBatchCanceled) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventOutgoingBatchCanceled.Merge(m, src)
}
func (m *EventOutgoingBatchCanceled) XXX_Size() int {
	return m.Size()
}
func (m *EventOutgoingBatchCanceled) XXX_DiscardUnknown() {
	xxx_messageInfo_EventOutgoingBatchCanceled.DiscardUnknown(m)
}

var xxx_messageInfo_EventOutgoingBatchCanceled proto.InternalMessageInfo

func (m *EventOutgoingBatchCanceled) GetHyperionId() uint64 {
	if m != nil {
		return m.HyperionId
	}
	return 0
}

func (m *EventOutgoingBatchCanceled) GetBridgeContract() string {
	if m != nil {
		return m.BridgeContract
	}
	return ""
}

func (m *EventOutgoingBatchCanceled) GetBridgeChainId() uint64 {
	if m != nil {
		return m.BridgeChainId
	}
	return 0
}

func (m *EventOutgoingBatchCanceled) GetBatchId() uint64 {
	if m != nil {
		return m.BatchId
	}
	return 0
}

func (m *EventOutgoingBatchCanceled) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type EventValsetUpdateRequest struct {
	HyperionId    uint64                `protobuf:"varint,1,opt,name=hyperion_id,json=hyperionId,proto3" json:"hyperion_id,omitempty"`
	ValsetNonce   uint64                `protobuf:"varint,2,opt,name=valset_nonce,json=valsetNonce,proto3" json:"valset_nonce,omitempty"`
	ValsetHeight  uint64                `protobuf:"varint,3,opt,name=valset_height,json=valsetHeight,proto3" json:"valset_height,omitempty"`
	ValsetMembers []*BridgeValidator    `protobuf:"bytes,4,rep,name=valset_members,json=valsetMembers,proto3" json:"valset_members,omitempty"`
	RewardAmount  cosmossdk_io_math.Int `protobuf:"bytes,5,opt,name=reward_amount,json=rewardAmount,proto3,customtype=cosmossdk.io/math.Int" json:"reward_amount"`
	RewardToken   string                `protobuf:"bytes,6,opt,name=reward_token,json=rewardToken,proto3" json:"reward_token,omitempty"`
}

func (m *EventValsetUpdateRequest) Reset()         { *m = EventValsetUpdateRequest{} }
func (m *EventValsetUpdateRequest) String() string { return proto.CompactTextString(m) }
func (*EventValsetUpdateRequest) ProtoMessage()    {}
func (*EventValsetUpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_26d0bd3a761f8331, []int{4}
}
func (m *EventValsetUpdateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventValsetUpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventValsetUpdateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventValsetUpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventValsetUpdateRequest.Merge(m, src)
}
func (m *EventValsetUpdateRequest) XXX_Size() int {
	return m.Size()
}
func (m *EventValsetUpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EventValsetUpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EventValsetUpdateRequest proto.InternalMessageInfo

func (m *EventValsetUpdateRequest) GetHyperionId() uint64 {
	if m != nil {
		return m.HyperionId
	}
	return 0
}

func (m *EventValsetUpdateRequest) GetValsetNonce() uint64 {
	if m != nil {
		return m.ValsetNonce
	}
	return 0
}

func (m *EventValsetUpdateRequest) GetValsetHeight() uint64 {
	if m != nil {
		return m.ValsetHeight
	}
	return 0
}

func (m *EventValsetUpdateRequest) GetValsetMembers() []*BridgeValidator {
	if m != nil {
		return m.ValsetMembers
	}
	return nil
}

func (m *EventValsetUpdateRequest) GetRewardToken() string {
	if m != nil {
		return m.RewardToken
	}
	return ""
}

type EventSetOrchestratorAddresses struct {
	ValidatorAddress    string `protobuf:"bytes,1,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	OrchestratorAddress string `protobuf:"bytes,2,opt,name=orchestrator_address,json=orchestratorAddress,proto3" json:"orchestrator_address,omitempty"`
	OperatorEthAddress  string `protobuf:"bytes,3,opt,name=operator_eth_address,json=operatorEthAddress,proto3" json:"operator_eth_address,omitempty"`
	HyperionId          uint64 `protobuf:"varint,4,opt,name=hyperion_id,json=hyperionId,proto3" json:"hyperion_id,omitempty"`
}

func (m *EventSetOrchestratorAddresses) Reset()         { *m = EventSetOrchestratorAddresses{} }
func (m *EventSetOrchestratorAddresses) String() string { return proto.CompactTextString(m) }
func (*EventSetOrchestratorAddresses) ProtoMessage()    {}
func (*EventSetOrchestratorAddresses) Descriptor() ([]byte, []int) {
	return fileDescriptor_26d0bd3a761f8331, []int{5}
}
func (m *EventSetOrchestratorAddresses) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSetOrchestratorAddresses) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSetOrchestratorAddresses.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSetOrchestratorAddresses) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSetOrchestratorAddresses.Merge(m, src)
}
func (m *EventSetOrchestratorAddresses) XXX_Size() int {
	return m.Size()
}
func (m *EventSetOrchestratorAddresses) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSetOrchestratorAddresses.DiscardUnknown(m)
}

var xxx_messageInfo_EventSetOrchestratorAddresses proto.InternalMessageInfo

func (m *EventSetOrchestratorAddresses) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *EventSetOrchestratorAddresses) GetOrchestratorAddress() string {
	if m != nil {
		return m.OrchestratorAddress
	}
	return ""
}

func (m *EventSetOrchestratorAddresses) GetOperatorEthAddress() string {
	if m != nil {
		return m.OperatorEthAddress
	}
	return ""
}

func (m *EventSetOrchestratorAddresses) GetHyperionId() uint64 {
	if m != nil {
		return m.HyperionId
	}
	return 0
}

type EventValsetConfirm struct {
	HyperionId          uint64 `protobuf:"varint,1,opt,name=hyperion_id,json=hyperionId,proto3" json:"hyperion_id,omitempty"`
	ValsetNonce         uint64 `protobuf:"varint,2,opt,name=valset_nonce,json=valsetNonce,proto3" json:"valset_nonce,omitempty"`
	OrchestratorAddress string `protobuf:"bytes,3,opt,name=orchestrator_address,json=orchestratorAddress,proto3" json:"orchestrator_address,omitempty"`
}

func (m *EventValsetConfirm) Reset()         { *m = EventValsetConfirm{} }
func (m *EventValsetConfirm) String() string { return proto.CompactTextString(m) }
func (*EventValsetConfirm) ProtoMessage()    {}
func (*EventValsetConfirm) Descriptor() ([]byte, []int) {
	return fileDescriptor_26d0bd3a761f8331, []int{6}
}
func (m *EventValsetConfirm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventValsetConfirm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventValsetConfirm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventValsetConfirm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventValsetConfirm.Merge(m, src)
}
func (m *EventValsetConfirm) XXX_Size() int {
	return m.Size()
}
func (m *EventValsetConfirm) XXX_DiscardUnknown() {
	xxx_messageInfo_EventValsetConfirm.DiscardUnknown(m)
}

var xxx_messageInfo_EventValsetConfirm proto.InternalMessageInfo

func (m *EventValsetConfirm) GetHyperionId() uint64 {
	if m != nil {
		return m.HyperionId
	}
	return 0
}

func (m *EventValsetConfirm) GetValsetNonce() uint64 {
	if m != nil {
		return m.ValsetNonce
	}
	return 0
}

func (m *EventValsetConfirm) GetOrchestratorAddress() string {
	if m != nil {
		return m.OrchestratorAddress
	}
	return ""
}

type EventSendToChain struct {
	HyperionId   uint64                                  `protobuf:"varint,1,opt,name=hyperion_id,json=hyperionId,proto3" json:"hyperion_id,omitempty"`
	OutgoingTxId uint64                                  `protobuf:"varint,2,opt,name=outgoing_tx_id,json=outgoingTxId,proto3" json:"outgoing_tx_id,omitempty"`
	Sender       string                                  `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
	Receiver     string                                  `protobuf:"bytes,4,opt,name=receiver,proto3" json:"receiver,omitempty"`
	Amount       github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,5,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"amount"`
	BridgeFee    github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,6,opt,name=bridge_fee,json=bridgeFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"bridge_fee"`
}

func (m *EventSendToChain) Reset()         { *m = EventSendToChain{} }
func (m *EventSendToChain) String() string { return proto.CompactTextString(m) }
func (*EventSendToChain) ProtoMessage()    {}
func (*EventSendToChain) Descriptor() ([]byte, []int) {
	return fileDescriptor_26d0bd3a761f8331, []int{7}
}
func (m *EventSendToChain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSendToChain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSendToChain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSendToChain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSendToChain.Merge(m, src)
}
func (m *EventSendToChain) XXX_Size() int {
	return m.Size()
}
func (m *EventSendToChain) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSendToChain.DiscardUnknown(m)
}

var xxx_messageInfo_EventSendToChain proto.InternalMessageInfo

func (m *EventSendToChain) GetHyperionId() uint64 {
	if m != nil {
		return m.HyperionId
	}
	return 0
}

func (m *EventSendToChain) GetOutgoingTxId() uint64 {
	if m != nil {
		return m.OutgoingTxId
	}
	return 0
}

func (m *EventSendToChain) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *EventSendToChain) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

type EventConfirmBatch struct {
	HyperionId          uint64 `protobuf:"varint,1,opt,name=hyperion_id,json=hyperionId,proto3" json:"hyperion_id,omitempty"`
	BatchNonce          uint64 `protobuf:"varint,2,opt,name=batch_nonce,json=batchNonce,proto3" json:"batch_nonce,omitempty"`
	OrchestratorAddress string `protobuf:"bytes,3,opt,name=orchestrator_address,json=orchestratorAddress,proto3" json:"orchestrator_address,omitempty"`
}

func (m *EventConfirmBatch) Reset()         { *m = EventConfirmBatch{} }
func (m *EventConfirmBatch) String() string { return proto.CompactTextString(m) }
func (*EventConfirmBatch) ProtoMessage()    {}
func (*EventConfirmBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_26d0bd3a761f8331, []int{8}
}
func (m *EventConfirmBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventConfirmBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventConfirmBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventConfirmBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventConfirmBatch.Merge(m, src)
}
func (m *EventConfirmBatch) XXX_Size() int {
	return m.Size()
}
func (m *EventConfirmBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_EventConfirmBatch.DiscardUnknown(m)
}

var xxx_messageInfo_EventConfirmBatch proto.InternalMessageInfo

func (m *EventConfirmBatch) GetHyperionId() uint64 {
	if m != nil {
		return m.HyperionId
	}
	return 0
}

func (m *EventConfirmBatch) GetBatchNonce() uint64 {
	if m != nil {
		return m.BatchNonce
	}
	return 0
}

func (m *EventConfirmBatch) GetOrchestratorAddress() string {
	if m != nil {
		return m.OrchestratorAddress
	}
	return ""
}

type EventAttestationVote struct {
	EventNonce    uint64 `protobuf:"varint,1,opt,name=event_nonce,json=eventNonce,proto3" json:"event_nonce,omitempty"`
	AttestationId []byte `protobuf:"bytes,2,opt,name=attestation_id,json=attestationId,proto3" json:"attestation_id,omitempty"`
	Voter         string `protobuf:"bytes,3,opt,name=voter,proto3" json:"voter,omitempty"`
}

func (m *EventAttestationVote) Reset()         { *m = EventAttestationVote{} }
func (m *EventAttestationVote) String() string { return proto.CompactTextString(m) }
func (*EventAttestationVote) ProtoMessage()    {}
func (*EventAttestationVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_26d0bd3a761f8331, []int{9}
}
func (m *EventAttestationVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventAttestationVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventAttestationVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventAttestationVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAttestationVote.Merge(m, src)
}
func (m *EventAttestationVote) XXX_Size() int {
	return m.Size()
}
func (m *EventAttestationVote) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAttestationVote.DiscardUnknown(m)
}

var xxx_messageInfo_EventAttestationVote proto.InternalMessageInfo

func (m *EventAttestationVote) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *EventAttestationVote) GetAttestationId() []byte {
	if m != nil {
		return m.AttestationId
	}
	return nil
}

func (m *EventAttestationVote) GetVoter() string {
	if m != nil {
		return m.Voter
	}
	return ""
}

type EventDepositClaim struct {
	HyperionId          uint64                `protobuf:"varint,1,opt,name=hyperion_id,json=hyperionId,proto3" json:"hyperion_id,omitempty"`
	EventNonce          uint64                `protobuf:"varint,2,opt,name=event_nonce,json=eventNonce,proto3" json:"event_nonce,omitempty"`
	EventHeight         uint64                `protobuf:"varint,3,opt,name=event_height,json=eventHeight,proto3" json:"event_height,omitempty"`
	AttestationId       []byte                `protobuf:"bytes,4,opt,name=attestation_id,json=attestationId,proto3" json:"attestation_id,omitempty"`
	EthereumSender      string                `protobuf:"bytes,5,opt,name=ethereum_sender,json=ethereumSender,proto3" json:"ethereum_sender,omitempty"`
	CosmosReceiver      string                `protobuf:"bytes,6,opt,name=cosmos_receiver,json=cosmosReceiver,proto3" json:"cosmos_receiver,omitempty"`
	TokenContract       string                `protobuf:"bytes,7,opt,name=token_contract,json=tokenContract,proto3" json:"token_contract,omitempty"`
	Amount              cosmossdk_io_math.Int `protobuf:"bytes,8,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
	OrchestratorAddress string                `protobuf:"bytes,9,opt,name=orchestrator_address,json=orchestratorAddress,proto3" json:"orchestrator_address,omitempty"`
	Data                string                `protobuf:"bytes,10,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *EventDepositClaim) Reset()         { *m = EventDepositClaim{} }
func (m *EventDepositClaim) String() string { return proto.CompactTextString(m) }
func (*EventDepositClaim) ProtoMessage()    {}
func (*EventDepositClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_26d0bd3a761f8331, []int{10}
}
func (m *EventDepositClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventDepositClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventDepositClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventDepositClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventDepositClaim.Merge(m, src)
}
func (m *EventDepositClaim) XXX_Size() int {
	return m.Size()
}
func (m *EventDepositClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_EventDepositClaim.DiscardUnknown(m)
}

var xxx_messageInfo_EventDepositClaim proto.InternalMessageInfo

func (m *EventDepositClaim) GetHyperionId() uint64 {
	if m != nil {
		return m.HyperionId
	}
	return 0
}

func (m *EventDepositClaim) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *EventDepositClaim) GetEventHeight() uint64 {
	if m != nil {
		return m.EventHeight
	}
	return 0
}

func (m *EventDepositClaim) GetAttestationId() []byte {
	if m != nil {
		return m.AttestationId
	}
	return nil
}

func (m *EventDepositClaim) GetEthereumSender() string {
	if m != nil {
		return m.EthereumSender
	}
	return ""
}

func (m *EventDepositClaim) GetCosmosReceiver() string {
	if m != nil {
		return m.CosmosReceiver
	}
	return ""
}

func (m *EventDepositClaim) GetTokenContract() string {
	if m != nil {
		return m.TokenContract
	}
	return ""
}

func (m *EventDepositClaim) GetOrchestratorAddress() string {
	if m != nil {
		return m.OrchestratorAddress
	}
	return ""
}

func (m *EventDepositClaim) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type EventWithdrawClaim struct {
	HyperionId          uint64 `protobuf:"varint,1,opt,name=hyperion_id,json=hyperionId,proto3" json:"hyperion_id,omitempty"`
	EventNonce          uint64 `protobuf:"varint,2,opt,name=event_nonce,json=eventNonce,proto3" json:"event_nonce,omitempty"`
	EventHeight         uint64 `protobuf:"varint,3,opt,name=event_height,json=eventHeight,proto3" json:"event_height,omitempty"`
	AttestationId       []byte `protobuf:"bytes,4,opt,name=attestation_id,json=attestationId,proto3" json:"attestation_id,omitempty"`
	BatchNonce          uint64 `protobuf:"varint,5,opt,name=batch_nonce,json=batchNonce,proto3" json:"batch_nonce,omitempty"`
	TokenContract       string `protobuf:"bytes,6,opt,name=token_contract,json=tokenContract,proto3" json:"token_contract,omitempty"`
	OrchestratorAddress string `protobuf:"bytes,7,opt,name=orchestrator_address,json=orchestratorAddress,proto3" json:"orchestrator_address,omitempty"`
}

func (m *EventWithdrawClaim) Reset()         { *m = EventWithdrawClaim{} }
func (m *EventWithdrawClaim) String() string { return proto.CompactTextString(m) }
func (*EventWithdrawClaim) ProtoMessage()    {}
func (*EventWithdrawClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_26d0bd3a761f8331, []int{11}
}
func (m *EventWithdrawClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventWithdrawClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventWithdrawClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventWithdrawClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventWithdrawClaim.Merge(m, src)
}
func (m *EventWithdrawClaim) XXX_Size() int {
	return m.Size()
}
func (m *EventWithdrawClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_EventWithdrawClaim.DiscardUnknown(m)
}

var xxx_messageInfo_EventWithdrawClaim proto.InternalMessageInfo

func (m *EventWithdrawClaim) GetHyperionId() uint64 {
	if m != nil {
		return m.HyperionId
	}
	return 0
}

func (m *EventWithdrawClaim) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *EventWithdrawClaim) GetEventHeight() uint64 {
	if m != nil {
		return m.EventHeight
	}
	return 0
}

func (m *EventWithdrawClaim) GetAttestationId() []byte {
	if m != nil {
		return m.AttestationId
	}
	return nil
}

func (m *EventWithdrawClaim) GetBatchNonce() uint64 {
	if m != nil {
		return m.BatchNonce
	}
	return 0
}

func (m *EventWithdrawClaim) GetTokenContract() string {
	if m != nil {
		return m.TokenContract
	}
	return ""
}

func (m *EventWithdrawClaim) GetOrchestratorAddress() string {
	if m != nil {
		return m.OrchestratorAddress
	}
	return ""
}

type EventERC20DeployedClaim struct {
	HyperionId          uint64 `protobuf:"varint,1,opt,name=hyperion_id,json=hyperionId,proto3" json:"hyperion_id,omitempty"`
	EventNonce          uint64 `protobuf:"varint,2,opt,name=event_nonce,json=eventNonce,proto3" json:"event_nonce,omitempty"`
	EventHeight         uint64 `protobuf:"varint,3,opt,name=event_height,json=eventHeight,proto3" json:"event_height,omitempty"`
	AttestationId       []byte `protobuf:"bytes,4,opt,name=attestation_id,json=attestationId,proto3" json:"attestation_id,omitempty"`
	CosmosDenom         string `protobuf:"bytes,5,opt,name=cosmos_denom,json=cosmosDenom,proto3" json:"cosmos_denom,omitempty"`
	TokenContract       string `protobuf:"bytes,6,opt,name=token_contract,json=tokenContract,proto3" json:"token_contract,omitempty"`
	Name                string `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Symbol              string `protobuf:"bytes,8,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Decimals            uint64 `protobuf:"varint,9,opt,name=decimals,proto3" json:"decimals,omitempty"`
	OrchestratorAddress string `protobuf:"bytes,10,opt,name=orchestrator_address,json=orchestratorAddress,proto3" json:"orchestrator_address,omitempty"`
}

func (m *EventERC20DeployedClaim) Reset()         { *m = EventERC20DeployedClaim{} }
func (m *EventERC20DeployedClaim) String() string { return proto.CompactTextString(m) }
func (*EventERC20DeployedClaim) ProtoMessage()    {}
func (*EventERC20DeployedClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_26d0bd3a761f8331, []int{12}
}
func (m *EventERC20DeployedClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventERC20DeployedClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventERC20DeployedClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventERC20DeployedClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventERC20DeployedClaim.Merge(m, src)
}
func (m *EventERC20DeployedClaim) XXX_Size() int {
	return m.Size()
}
func (m *EventERC20DeployedClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_EventERC20DeployedClaim.DiscardUnknown(m)
}

var xxx_messageInfo_EventERC20DeployedClaim proto.InternalMessageInfo

func (m *EventERC20DeployedClaim) GetHyperionId() uint64 {
	if m != nil {
		return m.HyperionId
	}
	return 0
}

func (m *EventERC20DeployedClaim) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *EventERC20DeployedClaim) GetEventHeight() uint64 {
	if m != nil {
		return m.EventHeight
	}
	return 0
}

func (m *EventERC20DeployedClaim) GetAttestationId() []byte {
	if m != nil {
		return m.AttestationId
	}
	return nil
}

func (m *EventERC20DeployedClaim) GetCosmosDenom() string {
	if m != nil {
		return m.CosmosDenom
	}
	return ""
}

func (m *EventERC20DeployedClaim) GetTokenContract() string {
	if m != nil {
		return m.TokenContract
	}
	return ""
}

func (m *EventERC20DeployedClaim) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EventERC20DeployedClaim) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *EventERC20DeployedClaim) GetDecimals() uint64 {
	if m != nil {
		return m.Decimals
	}
	return 0
}

func (m *EventERC20DeployedClaim) GetOrchestratorAddress() string {
	if m != nil {
		return m.OrchestratorAddress
	}
	return ""
}

type EventValsetUpdateClaim struct {
	HyperionId          uint64                `protobuf:"varint,1,opt,name=hyperion_id,json=hyperionId,proto3" json:"hyperion_id,omitempty"`
	EventNonce          uint64                `protobuf:"varint,2,opt,name=event_nonce,json=eventNonce,proto3" json:"event_nonce,omitempty"`
	EventHeight         uint64                `protobuf:"varint,3,opt,name=event_height,json=eventHeight,proto3" json:"event_height,omitempty"`
	AttestationId       []byte                `protobuf:"bytes,4,opt,name=attestation_id,json=attestationId,proto3" json:"attestation_id,omitempty"`
	ValsetNonce         uint64                `protobuf:"varint,5,opt,name=valset_nonce,json=valsetNonce,proto3" json:"valset_nonce,omitempty"`
	ValsetMembers       []*BridgeValidator    `protobuf:"bytes,6,rep,name=valset_members,json=valsetMembers,proto3" json:"valset_members,omitempty"`
	RewardAmount        cosmossdk_io_math.Int `protobuf:"bytes,7,opt,name=reward_amount,json=rewardAmount,proto3,customtype=cosmossdk.io/math.Int" json:"reward_amount"`
	RewardToken         string                `protobuf:"bytes,8,opt,name=reward_token,json=rewardToken,proto3" json:"reward_token,omitempty"`
	OrchestratorAddress string                `protobuf:"bytes,9,opt,name=orchestrator_address,json=orchestratorAddress,proto3" json:"orchestrator_address,omitempty"`
}

func (m *EventValsetUpdateClaim) Reset()         { *m = EventValsetUpdateClaim{} }
func (m *EventValsetUpdateClaim) String() string { return proto.CompactTextString(m) }
func (*EventValsetUpdateClaim) ProtoMessage()    {}
func (*EventValsetUpdateClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_26d0bd3a761f8331, []int{13}
}
func (m *EventValsetUpdateClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventValsetUpdateClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventValsetUpdateClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventValsetUpdateClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventValsetUpdateClaim.Merge(m, src)
}
func (m *EventValsetUpdateClaim) XXX_Size() int {
	return m.Size()
}
func (m *EventValsetUpdateClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_EventValsetUpdateClaim.DiscardUnknown(m)
}

var xxx_messageInfo_EventValsetUpdateClaim proto.InternalMessageInfo

func (m *EventValsetUpdateClaim) GetHyperionId() uint64 {
	if m != nil {
		return m.HyperionId
	}
	return 0
}

func (m *EventValsetUpdateClaim) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *EventValsetUpdateClaim) GetEventHeight() uint64 {
	if m != nil {
		return m.EventHeight
	}
	return 0
}

func (m *EventValsetUpdateClaim) GetAttestationId() []byte {
	if m != nil {
		return m.AttestationId
	}
	return nil
}

func (m *EventValsetUpdateClaim) GetValsetNonce() uint64 {
	if m != nil {
		return m.ValsetNonce
	}
	return 0
}

func (m *EventValsetUpdateClaim) GetValsetMembers() []*BridgeValidator {
	if m != nil {
		return m.ValsetMembers
	}
	return nil
}

func (m *EventValsetUpdateClaim) GetRewardToken() string {
	if m != nil {
		return m.RewardToken
	}
	return ""
}

func (m *EventValsetUpdateClaim) GetOrchestratorAddress() string {
	if m != nil {
		return m.OrchestratorAddress
	}
	return ""
}

type EventCancelSendToChain struct {
	OutgoingTxId uint64 `protobuf:"varint,1,opt,name=outgoing_tx_id,json=outgoingTxId,proto3" json:"outgoing_tx_id,omitempty"`
}

func (m *EventCancelSendToChain) Reset()         { *m = EventCancelSendToChain{} }
func (m *EventCancelSendToChain) String() string { return proto.CompactTextString(m) }
func (*EventCancelSendToChain) ProtoMessage()    {}
func (*EventCancelSendToChain) Descriptor() ([]byte, []int) {
	return fileDescriptor_26d0bd3a761f8331, []int{14}
}
func (m *EventCancelSendToChain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCancelSendToChain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCancelSendToChain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCancelSendToChain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCancelSendToChain.Merge(m, src)
}
func (m *EventCancelSendToChain) XXX_Size() int {
	return m.Size()
}
func (m *EventCancelSendToChain) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCancelSendToChain.DiscardUnknown(m)
}

var xxx_messageInfo_EventCancelSendToChain proto.InternalMessageInfo

func (m *EventCancelSendToChain) GetOutgoingTxId() uint64 {
	if m != nil {
		return m.OutgoingTxId
	}
	return 0
}

type EventSubmitBadSignatureEvidence struct {
	BadEthSignature        string `protobuf:"bytes,1,opt,name=bad_eth_signature,json=badEthSignature,proto3" json:"bad_eth_signature,omitempty"`
	BadEthSignatureSubject string `protobuf:"bytes,2,opt,name=bad_eth_signature_subject,json=badEthSignatureSubject,proto3" json:"bad_eth_signature_subject,omitempty"`
}

func (m *EventSubmitBadSignatureEvidence) Reset()         { *m = EventSubmitBadSignatureEvidence{} }
func (m *EventSubmitBadSignatureEvidence) String() string { return proto.CompactTextString(m) }
func (*EventSubmitBadSignatureEvidence) ProtoMessage()    {}
func (*EventSubmitBadSignatureEvidence) Descriptor() ([]byte, []int) {
	return fileDescriptor_26d0bd3a761f8331, []int{15}
}
func (m *EventSubmitBadSignatureEvidence) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSubmitBadSignatureEvidence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSubmitBadSignatureEvidence.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSubmitBadSignatureEvidence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSubmitBadSignatureEvidence.Merge(m, src)
}
func (m *EventSubmitBadSignatureEvidence) XXX_Size() int {
	return m.Size()
}
func (m *EventSubmitBadSignatureEvidence) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSubmitBadSignatureEvidence.DiscardUnknown(m)
}

var xxx_messageInfo_EventSubmitBadSignatureEvidence proto.InternalMessageInfo

func (m *EventSubmitBadSignatureEvidence) GetBadEthSignature() string {
	if m != nil {
		return m.BadEthSignature
	}
	return ""
}

func (m *EventSubmitBadSignatureEvidence) GetBadEthSignatureSubject() string {
	if m != nil {
		return m.BadEthSignatureSubject
	}
	return ""
}

type EventValidatorSlash struct {
	HyperionId       uint64 `protobuf:"varint,1,opt,name=hyperion_id,json=hyperionId,proto3" json:"hyperion_id,omitempty"`
	Power            int64  `protobuf:"varint,2,opt,name=power,proto3" json:"power,omitempty"`
	Reason           string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	ConsensusAddress string `protobuf:"bytes,4,opt,name=consensus_address,json=consensusAddress,proto3" json:"consensus_address,omitempty"`
	OperatorAddress  string `protobuf:"bytes,5,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"`
	Moniker          string `protobuf:"bytes,6,opt,name=moniker,proto3" json:"moniker,omitempty"`
}

func (m *EventValidatorSlash) Reset()         { *m = EventValidatorSlash{} }
func (m *EventValidatorSlash) String() string { return proto.CompactTextString(m) }
func (*EventValidatorSlash) ProtoMessage()    {}
func (*EventValidatorSlash) Descriptor() ([]byte, []int) {
	return fileDescriptor_26d0bd3a761f8331, []int{16}
}
func (m *EventValidatorSlash) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventValidatorSlash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventValidatorSlash.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventValidatorSlash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventValidatorSlash.Merge(m, src)
}
func (m *EventValidatorSlash) XXX_Size() int {
	return m.Size()
}
func (m *EventValidatorSlash) XXX_DiscardUnknown() {
	xxx_messageInfo_EventValidatorSlash.DiscardUnknown(m)
}

var xxx_messageInfo_EventValidatorSlash proto.InternalMessageInfo

func (m *EventValidatorSlash) GetHyperionId() uint64 {
	if m != nil {
		return m.HyperionId
	}
	return 0
}

func (m *EventValidatorSlash) GetPower() int64 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (m *EventValidatorSlash) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *EventValidatorSlash) GetConsensusAddress() string {
	if m != nil {
		return m.ConsensusAddress
	}
	return ""
}

func (m *EventValidatorSlash) GetOperatorAddress() string {
	if m != nil {
		return m.OperatorAddress
	}
	return ""
}

func (m *EventValidatorSlash) GetMoniker() string {
	if m != nil {
		return m.Moniker
	}
	return ""
}

func init() {
	proto.RegisterType((*EventAttestationObserved)(nil), "helios.hyperion.v1.EventAttestationObserved")
	proto.RegisterType((*EventBridgeWithdrawCanceled)(nil), "helios.hyperion.v1.EventBridgeWithdrawCanceled")
	proto.RegisterType((*EventOutgoingBatch)(nil), "helios.hyperion.v1.EventOutgoingBatch")
	proto.RegisterType((*EventOutgoingBatchCanceled)(nil), "helios.hyperion.v1.EventOutgoingBatchCanceled")
	proto.RegisterType((*EventValsetUpdateRequest)(nil), "helios.hyperion.v1.EventValsetUpdateRequest")
	proto.RegisterType((*EventSetOrchestratorAddresses)(nil), "helios.hyperion.v1.EventSetOrchestratorAddresses")
	proto.RegisterType((*EventValsetConfirm)(nil), "helios.hyperion.v1.EventValsetConfirm")
	proto.RegisterType((*EventSendToChain)(nil), "helios.hyperion.v1.EventSendToChain")
	proto.RegisterType((*EventConfirmBatch)(nil), "helios.hyperion.v1.EventConfirmBatch")
	proto.RegisterType((*EventAttestationVote)(nil), "helios.hyperion.v1.EventAttestationVote")
	proto.RegisterType((*EventDepositClaim)(nil), "helios.hyperion.v1.EventDepositClaim")
	proto.RegisterType((*EventWithdrawClaim)(nil), "helios.hyperion.v1.EventWithdrawClaim")
	proto.RegisterType((*EventERC20DeployedClaim)(nil), "helios.hyperion.v1.EventERC20DeployedClaim")
	proto.RegisterType((*EventValsetUpdateClaim)(nil), "helios.hyperion.v1.EventValsetUpdateClaim")
	proto.RegisterType((*EventCancelSendToChain)(nil), "helios.hyperion.v1.EventCancelSendToChain")
	proto.RegisterType((*EventSubmitBadSignatureEvidence)(nil), "helios.hyperion.v1.EventSubmitBadSignatureEvidence")
	proto.RegisterType((*EventValidatorSlash)(nil), "helios.hyperion.v1.EventValidatorSlash")
}

func init() { proto.RegisterFile("helios/hyperion/v1/events.proto", fileDescriptor_26d0bd3a761f8331) }

var fileDescriptor_26d0bd3a761f8331 = []byte{
	// 1292 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xcf, 0xda, 0x8e, 0x13, 0x4f, 0x1c, 0x3b, 0xdd, 0x86, 0xe2, 0x06, 0xd5, 0x71, 0xb7, 0x2d,
	0x49, 0x41, 0xb5, 0xdb, 0x22, 0x0e, 0x5c, 0x90, 0x6a, 0x37, 0xd0, 0x20, 0xd1, 0x4a, 0x9b, 0x50,
	0x24, 0x2e, 0xd6, 0x78, 0xe7, 0xd5, 0x3b, 0xc4, 0xbb, 0x63, 0x76, 0xc6, 0x6e, 0xf3, 0x0d, 0x90,
	0xb8, 0x70, 0xe2, 0xc2, 0x9d, 0x1b, 0x57, 0xae, 0x5c, 0x7b, 0xac, 0x38, 0x20, 0xc4, 0xa1, 0x42,
	0xad, 0xc4, 0x81, 0x23, 0x9f, 0x00, 0xed, 0xbc, 0xd9, 0x8d, 0xeb, 0xb5, 0x55, 0xb7, 0xf4, 0x90,
	0x93, 0x77, 0xde, 0xbc, 0x37, 0xf3, 0xe6, 0xf7, 0x7e, 0xef, 0x8f, 0xc9, 0xb6, 0x0f, 0x03, 0x2e,
	0x64, 0xcb, 0x3f, 0x1e, 0x42, 0xc4, 0x45, 0xd8, 0x1a, 0xdf, 0x68, 0xc1, 0x18, 0x42, 0x25, 0x9b,
	0xc3, 0x48, 0x28, 0x61, 0xdb, 0xa8, 0xd0, 0x4c, 0x14, 0x9a, 0xe3, 0x1b, 0x5b, 0x9b, 0x7d, 0xd1,
	0x17, 0x7a, 0xbb, 0x15, 0x7f, 0xa1, 0xe6, 0xd6, 0xe5, 0x19, 0x47, 0x51, 0xa5, 0x40, 0x2a, 0xaa,
	0x62, 0x43, 0xd4, 0xaa, 0xcf, 0xd0, 0x52, 0xc7, 0x43, 0x30, 0xf7, 0x39, 0xff, 0x5a, 0xa4, 0xb6,
	0x17, 0x3b, 0x70, 0xeb, 0xc4, 0xf4, 0x5e, 0x4f, 0x42, 0x34, 0x06, 0x66, 0xdf, 0x21, 0x1b, 0x13,
	0x27, 0x76, 0x63, 0xbb, 0x9a, 0xd5, 0xb0, 0x76, 0x2b, 0x37, 0x2f, 0x34, 0xb3, 0x7e, 0x36, 0x3b,
	0x03, 0xca, 0x83, 0xc3, 0xe3, 0x21, 0xb8, 0xd5, 0x09, 0xb3, 0x58, 0x60, 0xef, 0x90, 0x6a, 0x2f,
	0xe2, 0xac, 0x0f, 0x5d, 0x4f, 0x84, 0x2a, 0xa2, 0x9e, 0xaa, 0xe5, 0x1a, 0xd6, 0x6e, 0xc9, 0xad,
	0xa0, 0xb8, 0x63, 0xa4, 0xf6, 0xbb, 0x27, 0x8a, 0x3e, 0xe5, 0x61, 0x97, 0xb3, 0x5a, 0xbe, 0x61,
	0xed, 0x16, 0xdc, 0x75, 0xa3, 0x18, 0x4b, 0xf7, 0x99, 0x7d, 0x85, 0x54, 0x26, 0x5d, 0xe3, 0xac,
	0x56, 0x68, 0x58, 0xbb, 0x65, 0x77, 0x7d, 0x42, 0xba, 0xcf, 0xec, 0x4d, 0xb2, 0x1c, 0x8a, 0xd0,
	0x83, 0xda, 0xb2, 0x3e, 0x04, 0x17, 0x4e, 0x48, 0xde, 0xd1, 0x6f, 0x6e, 0xeb, 0x23, 0xbf, 0xe4,
	0xca, 0x67, 0x11, 0x7d, 0xd8, 0xa1, 0xa1, 0x07, 0x03, 0x60, 0xb3, 0x9c, 0xb5, 0x16, 0x75, 0x36,
	0x37, 0xc3, 0x59, 0xe7, 0x6f, 0x8b, 0xd8, 0xfa, 0xc2, 0x7b, 0x23, 0xd5, 0x17, 0x3c, 0xec, 0xb7,
	0xa9, 0xf2, 0x7c, 0x7b, 0x9b, 0xac, 0x25, 0xf0, 0xc5, 0xa6, 0x96, 0x36, 0x25, 0x89, 0x08, 0xbd,
	0x67, 0x10, 0x8a, 0xc0, 0x60, 0x85, 0x0b, 0xfb, 0x06, 0xd9, 0x14, 0x91, 0xe7, 0x83, 0x54, 0x11,
	0x55, 0x22, 0xea, 0x52, 0xc6, 0x22, 0x90, 0x52, 0xe3, 0x54, 0x72, 0xcf, 0x4e, 0xee, 0xdd, 0xc2,
	0xad, 0xf8, 0xa6, 0x5e, 0x7c, 0x65, 0x17, 0xc1, 0x28, 0xe0, 0x4d, 0x5a, 0x74, 0x37, 0x96, 0xd8,
	0x97, 0xc8, 0x3a, 0x2a, 0x28, 0x1e, 0x80, 0x18, 0x29, 0x83, 0x57, 0x59, 0x0b, 0x0f, 0x51, 0x66,
	0x37, 0x48, 0xd9, 0x28, 0x3d, 0xea, 0x72, 0x26, 0x6b, 0xc5, 0x46, 0x3e, 0x3d, 0xe6, 0xf0, 0xd1,
	0x3e, 0x93, 0xce, 0xaf, 0x16, 0xd9, 0xca, 0x3e, 0x34, 0x05, 0xf6, 0xa5, 0x0f, 0x7e, 0xe3, 0x34,
	0x39, 0x4f, 0x56, 0xd1, 0x65, 0x43, 0x90, 0x82, 0xbb, 0xa2, 0xd7, 0x73, 0xa9, 0xf1, 0x4b, 0xce,
	0xe4, 0xc3, 0x7d, 0x3a, 0x90, 0xa0, 0xbe, 0x18, 0x32, 0xaa, 0xc0, 0x85, 0x6f, 0x46, 0x20, 0xd5,
	0xcb, 0xfd, 0xbf, 0x48, 0xca, 0x63, 0x6d, 0x67, 0x80, 0x46, 0x36, 0xac, 0xa1, 0x2c, 0x45, 0xda,
	0xa8, 0xf8, 0xc0, 0xfb, 0xbe, 0x32, 0x7e, 0x1b, 0xbb, 0x3b, 0x5a, 0x66, 0x7f, 0x46, 0x2a, 0x46,
	0x29, 0x80, 0xa0, 0x07, 0x91, 0xac, 0x15, 0x1a, 0xf9, 0xdd, 0xb5, 0x9b, 0x97, 0x66, 0xa5, 0x1d,
	0xb2, 0xf8, 0x3e, 0x1d, 0x70, 0x16, 0xc7, 0xdc, 0x35, 0xe7, 0x7f, 0x8e, 0x96, 0x76, 0x9b, 0xac,
	0x47, 0xf0, 0x90, 0x46, 0xac, 0x4b, 0x03, 0x31, 0x0a, 0x31, 0xb4, 0xa5, 0xf6, 0x85, 0xc7, 0x4f,
	0xb7, 0x97, 0xfe, 0x7c, 0xba, 0xfd, 0x96, 0x27, 0x64, 0x20, 0xa4, 0x64, 0x47, 0x4d, 0x2e, 0x5a,
	0x01, 0x55, 0x7e, 0x73, 0x3f, 0x54, 0x6e, 0x19, 0x6d, 0x6e, 0x69, 0x93, 0xf8, 0x5d, 0xe6, 0x0c,
	0x25, 0x8e, 0x20, 0xac, 0x15, 0x75, 0x50, 0xd6, 0x50, 0x76, 0x18, 0x8b, 0x9c, 0xdf, 0x2c, 0x72,
	0x41, 0x03, 0x77, 0x00, 0xea, 0x5e, 0x96, 0x82, 0x20, 0xed, 0xf7, 0xc9, 0x99, 0x71, 0xe2, 0x64,
	0x4a, 0x5a, 0x4c, 0xac, 0x8d, 0x74, 0x23, 0x61, 0xec, 0x3c, 0x92, 0xe7, 0xe6, 0x93, 0xfc, 0x3a,
	0xd9, 0x14, 0x43, 0x40, 0x75, 0x50, 0xfe, 0x54, 0x5e, 0xd8, 0xc9, 0xde, 0x9e, 0xf2, 0x27, 0xd2,
	0x62, 0x32, 0x9e, 0x85, 0xe9, 0x78, 0x3a, 0xdf, 0x25, 0x89, 0x8b, 0x6c, 0xe8, 0x88, 0xf0, 0x01,
	0x8f, 0x82, 0x37, 0xc2, 0x83, 0x57, 0xcf, 0x62, 0xe7, 0xa7, 0x1c, 0xd9, 0x30, 0x10, 0x87, 0xec,
	0x50, 0x68, 0x8e, 0xbf, 0xdc, 0x97, 0xcb, 0xa4, 0x22, 0x4c, 0x36, 0x62, 0xe2, 0x1a, 0x6f, 0xca,
	0x89, 0x34, 0x4e, 0x5d, 0xfb, 0x1c, 0x29, 0x4a, 0x08, 0x19, 0x44, 0xc6, 0x01, 0xb3, 0xb2, 0xb7,
	0xc8, 0x6a, 0x04, 0x1e, 0xf0, 0x31, 0x44, 0x1a, 0x9f, 0x92, 0x9b, 0xae, 0xed, 0x4f, 0x49, 0xf1,
	0x05, 0x4a, 0xb5, 0x0c, 0xa5, 0x76, 0xfa, 0x5c, 0xf9, 0xa3, 0x5e, 0xd3, 0x13, 0x41, 0x0b, 0xd9,
	0x65, 0x7e, 0xae, 0x49, 0x76, 0x64, 0xba, 0x4f, 0x47, 0xf0, 0xd0, 0x35, 0xe6, 0xf6, 0x5d, 0x42,
	0x4c, 0x36, 0x3f, 0x00, 0x40, 0x72, 0xbd, 0xfa, 0x61, 0x25, 0x3c, 0xe2, 0x13, 0x00, 0xe7, 0x5b,
	0x8b, 0x9c, 0xd1, 0x40, 0x99, 0x80, 0x2d, 0x58, 0x6e, 0xa7, 0xaa, 0x64, 0x2e, 0x53, 0x25, 0x5f,
	0x23, 0x66, 0x8a, 0x6c, 0x4e, 0xb7, 0xd7, 0xfb, 0x42, 0x41, 0x7c, 0x97, 0xee, 0xfb, 0xe6, 0x2e,
	0xe3, 0x8c, 0x16, 0xe1, 0x5d, 0xd9, 0x06, 0x97, 0x9b, 0xd3, 0xe0, 0xc6, 0x42, 0xa5, 0x61, 0xc3,
	0x85, 0xf3, 0x43, 0xde, 0x00, 0x70, 0x1b, 0x86, 0x42, 0x72, 0xa5, 0x3b, 0xf3, 0x42, 0x00, 0x4c,
	0x3a, 0x95, 0xcb, 0x38, 0x75, 0x91, 0x94, 0x51, 0xe1, 0x85, 0xda, 0x85, 0x46, 0xa6, 0x74, 0x2d,
	0xd8, 0x98, 0x77, 0x48, 0x15, 0x94, 0x0f, 0x11, 0x8c, 0x82, 0xae, 0x21, 0xde, 0x32, 0x56, 0xfa,
	0x44, 0x7c, 0x80, 0x04, 0xdc, 0x21, 0x55, 0x8c, 0x77, 0x37, 0xe5, 0x21, 0x56, 0x9f, 0x0a, 0x8a,
	0xdd, 0x84, 0x8d, 0x57, 0x48, 0x45, 0x17, 0xa7, 0x93, 0xd6, 0xb1, 0xa2, 0xf5, 0xd6, 0xb5, 0x34,
	0xed, 0x1c, 0x1f, 0xa6, 0xa4, 0x5d, 0x5d, 0xa4, 0x0e, 0x26, 0x14, 0x9d, 0x17, 0xfa, 0xd2, 0xfc,
	0x7a, 0x64, 0x93, 0x02, 0xa3, 0x8a, 0xd6, 0x88, 0x56, 0xd1, 0xdf, 0xce, 0x8f, 0x39, 0x53, 0x50,
	0xd2, 0xa1, 0xe3, 0xd4, 0x45, 0x66, 0x2a, 0x0b, 0x96, 0x33, 0x59, 0x90, 0x05, 0xba, 0x38, 0x0b,
	0xe8, 0x79, 0x88, 0xad, 0xcc, 0x4f, 0x96, 0x7f, 0x72, 0xe4, 0x6d, 0x8d, 0xce, 0x9e, 0xdb, 0xb9,
	0x79, 0xfd, 0x36, 0x0c, 0x07, 0xe2, 0x18, 0xd8, 0xe9, 0x83, 0xe8, 0x22, 0x29, 0x1b, 0x4e, 0xe2,
	0x78, 0x86, 0xcc, 0x5d, 0x43, 0xd9, 0x6d, 0x3d, 0xa4, 0x2d, 0x08, 0x92, 0x4d, 0x0a, 0x21, 0x0d,
	0xc0, 0x80, 0xa2, 0xbf, 0x75, 0x29, 0x3e, 0x0e, 0x7a, 0x62, 0x80, 0x0c, 0x75, 0xcd, 0x2a, 0x2e,
	0xc5, 0x0c, 0x3c, 0x1e, 0xd0, 0x01, 0xd2, 0xae, 0xe0, 0xa6, 0xeb, 0xb9, 0x60, 0x93, 0xf9, 0x60,
	0xff, 0x9c, 0x27, 0xe7, 0x32, 0x93, 0xce, 0xa9, 0xc4, 0xfa, 0x85, 0x56, 0xba, 0x9c, 0x6d, 0xa5,
	0xd9, 0x69, 0xa9, 0xf8, 0xe6, 0xa6, 0xa5, 0x95, 0xff, 0x3f, 0x2d, 0xad, 0x66, 0xa6, 0xa5, 0xd7,
	0x28, 0x27, 0xce, 0xc7, 0x26, 0x5c, 0x38, 0x4d, 0x4f, 0x8e, 0x00, 0xd9, 0x0e, 0x6f, 0x65, 0x3b,
	0x7c, 0xdc, 0x14, 0xb7, 0x71, 0x7a, 0x18, 0xf5, 0x02, 0xae, 0xda, 0x94, 0x1d, 0xf0, 0x7e, 0x48,
	0xd5, 0x28, 0x82, 0xbd, 0x31, 0x67, 0x10, 0x23, 0xf9, 0x1e, 0x39, 0xd3, 0xa3, 0x4c, 0x4f, 0x4f,
	0x32, 0xd9, 0x34, 0x23, 0x5a, 0xb5, 0x47, 0xd9, 0x9e, 0xf2, 0x53, 0x1b, 0xfb, 0x23, 0x72, 0x3e,
	0xa3, 0xdb, 0x95, 0xa3, 0xde, 0xd7, 0x90, 0x4e, 0xed, 0xe7, 0xa6, 0x6c, 0x0e, 0x70, 0xd7, 0xf9,
	0xdd, 0x22, 0x67, 0x13, 0xea, 0x61, 0x18, 0x0e, 0x06, 0x54, 0x2e, 0xf6, 0x87, 0x68, 0x28, 0x1e,
	0x42, 0xa4, 0xcf, 0xcf, 0xbb, 0xb8, 0x88, 0x13, 0x26, 0x02, 0x2a, 0x45, 0x98, 0xcc, 0x2e, 0xb8,
	0x8a, 0x07, 0x4e, 0x4f, 0x84, 0x12, 0x42, 0x39, 0x92, 0x29, 0xc2, 0x38, 0xc4, 0x6c, 0xa4, 0x1b,
	0x49, 0xb5, 0xbe, 0x4a, 0x36, 0xd2, 0xe9, 0x31, 0xd1, 0xc5, 0xbc, 0xae, 0x26, 0xf2, 0x44, 0xb5,
	0x46, 0x56, 0x02, 0x11, 0xf2, 0xa3, 0xb4, 0x15, 0x25, 0xcb, 0x76, 0xe7, 0xf1, 0xb3, 0xba, 0xf5,
	0xe4, 0x59, 0xdd, 0xfa, 0xeb, 0x59, 0xdd, 0xfa, 0xfe, 0x79, 0x7d, 0xe9, 0xc9, 0xf3, 0xfa, 0xd2,
	0x1f, 0xcf, 0xeb, 0x4b, 0x5f, 0x5d, 0x45, 0x2a, 0x5e, 0xf3, 0x44, 0x04, 0xad, 0xe4, 0x3b, 0x8e,
	0x5e, 0xeb, 0xd1, 0xc9, 0x7f, 0x73, 0x3d, 0xcd, 0xf4, 0x8a, 0xfa, 0x9f, 0xf9, 0x07, 0xff, 0x05,
	0x00, 0x00, 0xff, 0xff, 0xf6, 0x83, 0xea, 0x55, 0x2c, 0x10, 0x00, 0x00,
}

func (m *EventAttestationObserved) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAttestationObserved) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventAttestationObserved) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x28
	}
	if len(m.AttestationId) > 0 {
		i -= len(m.AttestationId)
		copy(dAtA[i:], m.AttestationId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.AttestationId)))
		i--
		dAtA[i] = 0x22
	}
	if m.BridgeChainId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.BridgeChainId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.BridgeContract) > 0 {
		i -= len(m.BridgeContract)
		copy(dAtA[i:], m.BridgeContract)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.BridgeContract)))
		i--
		dAtA[i] = 0x12
	}
	if m.AttestationType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.AttestationType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventBridgeWithdrawCanceled) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventBridgeWithdrawCanceled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventBridgeWithdrawCanceled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BridgeChainId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.BridgeChainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.BridgeContract) > 0 {
		i -= len(m.BridgeContract)
		copy(dAtA[i:], m.BridgeContract)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.BridgeContract)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventOutgoingBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventOutgoingBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventOutgoingBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BatchTxIds) > 0 {
		dAtA2 := make([]byte, len(m.BatchTxIds)*10)
		var j1 int
		for _, num := range m.BatchTxIds {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintEvents(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x32
	}
	if m.BatchTimeout != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.BatchTimeout))
		i--
		dAtA[i] = 0x28
	}
	if m.BatchNonce != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.BatchNonce))
		i--
		dAtA[i] = 0x20
	}
	if len(m.OrchestratorAddress) > 0 {
		i -= len(m.OrchestratorAddress)
		copy(dAtA[i:], m.OrchestratorAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.OrchestratorAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if m.HyperionId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.HyperionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventOutgoingBatchCanceled) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventOutgoingBatchCanceled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventOutgoingBatchCanceled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x28
	}
	if m.BatchId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.BatchId))
		i--
		dAtA[i] = 0x20
	}
	if m.BridgeChainId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.BridgeChainId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.BridgeContract) > 0 {
		i -= len(m.BridgeContract)
		copy(dAtA[i:], m.BridgeContract)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.BridgeContract)))
		i--
		dAtA[i] = 0x12
	}
	if m.HyperionId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.HyperionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventValsetUpdateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventValsetUpdateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventValsetUpdateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardToken) > 0 {
		i -= len(m.RewardToken)
		copy(dAtA[i:], m.RewardToken)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RewardToken)))
		i--
		dAtA[i] = 0x32
	}
	{
		size := m.RewardAmount.Size()
		i -= size
		if _, err := m.RewardAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.ValsetMembers) > 0 {
		for iNdEx := len(m.ValsetMembers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValsetMembers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.ValsetHeight != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ValsetHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.ValsetNonce != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ValsetNonce))
		i--
		dAtA[i] = 0x10
	}
	if m.HyperionId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.HyperionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventSetOrchestratorAddresses) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSetOrchestratorAddresses) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSetOrchestratorAddresses) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HyperionId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.HyperionId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.OperatorEthAddress) > 0 {
		i -= len(m.OperatorEthAddress)
		copy(dAtA[i:], m.OperatorEthAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.OperatorEthAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OrchestratorAddress) > 0 {
		i -= len(m.OrchestratorAddress)
		copy(dAtA[i:], m.OrchestratorAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.OrchestratorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventValsetConfirm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventValsetConfirm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventValsetConfirm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrchestratorAddress) > 0 {
		i -= len(m.OrchestratorAddress)
		copy(dAtA[i:], m.OrchestratorAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.OrchestratorAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ValsetNonce != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ValsetNonce))
		i--
		dAtA[i] = 0x10
	}
	if m.HyperionId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.HyperionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventSendToChain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSendToChain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSendToChain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.BridgeFee.Size()
		i -= size
		if _, err := m.BridgeFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x1a
	}
	if m.OutgoingTxId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.OutgoingTxId))
		i--
		dAtA[i] = 0x10
	}
	if m.HyperionId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.HyperionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventConfirmBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventConfirmBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventConfirmBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrchestratorAddress) > 0 {
		i -= len(m.OrchestratorAddress)
		copy(dAtA[i:], m.OrchestratorAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.OrchestratorAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.BatchNonce != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.BatchNonce))
		i--
		dAtA[i] = 0x10
	}
	if m.HyperionId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.HyperionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventAttestationVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAttestationVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventAttestationVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Voter) > 0 {
		i -= len(m.Voter)
		copy(dAtA[i:], m.Voter)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Voter)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AttestationId) > 0 {
		i -= len(m.AttestationId)
		copy(dAtA[i:], m.AttestationId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.AttestationId)))
		i--
		dAtA[i] = 0x12
	}
	if m.EventNonce != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventDepositClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventDepositClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventDepositClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.OrchestratorAddress) > 0 {
		i -= len(m.OrchestratorAddress)
		copy(dAtA[i:], m.OrchestratorAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.OrchestratorAddress)))
		i--
		dAtA[i] = 0x4a
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if len(m.TokenContract) > 0 {
		i -= len(m.TokenContract)
		copy(dAtA[i:], m.TokenContract)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.TokenContract)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CosmosReceiver) > 0 {
		i -= len(m.CosmosReceiver)
		copy(dAtA[i:], m.CosmosReceiver)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.CosmosReceiver)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.EthereumSender) > 0 {
		i -= len(m.EthereumSender)
		copy(dAtA[i:], m.EthereumSender)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.EthereumSender)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AttestationId) > 0 {
		i -= len(m.AttestationId)
		copy(dAtA[i:], m.AttestationId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.AttestationId)))
		i--
		dAtA[i] = 0x22
	}
	if m.EventHeight != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EventHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.EventNonce != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x10
	}
	if m.HyperionId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.HyperionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventWithdrawClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventWithdrawClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventWithdrawClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrchestratorAddress) > 0 {
		i -= len(m.OrchestratorAddress)
		copy(dAtA[i:], m.OrchestratorAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.OrchestratorAddress)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TokenContract) > 0 {
		i -= len(m.TokenContract)
		copy(dAtA[i:], m.TokenContract)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.TokenContract)))
		i--
		dAtA[i] = 0x32
	}
	if m.BatchNonce != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.BatchNonce))
		i--
		dAtA[i] = 0x28
	}
	if len(m.AttestationId) > 0 {
		i -= len(m.AttestationId)
		copy(dAtA[i:], m.AttestationId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.AttestationId)))
		i--
		dAtA[i] = 0x22
	}
	if m.EventHeight != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EventHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.EventNonce != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x10
	}
	if m.HyperionId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.HyperionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventERC20DeployedClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventERC20DeployedClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventERC20DeployedClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrchestratorAddress) > 0 {
		i -= len(m.OrchestratorAddress)
		copy(dAtA[i:], m.OrchestratorAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.OrchestratorAddress)))
		i--
		dAtA[i] = 0x52
	}
	if m.Decimals != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Decimals))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TokenContract) > 0 {
		i -= len(m.TokenContract)
		copy(dAtA[i:], m.TokenContract)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.TokenContract)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CosmosDenom) > 0 {
		i -= len(m.CosmosDenom)
		copy(dAtA[i:], m.CosmosDenom)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.CosmosDenom)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AttestationId) > 0 {
		i -= len(m.AttestationId)
		copy(dAtA[i:], m.AttestationId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.AttestationId)))
		i--
		dAtA[i] = 0x22
	}
	if m.EventHeight != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EventHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.EventNonce != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x10
	}
	if m.HyperionId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.HyperionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventValsetUpdateClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventValsetUpdateClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventValsetUpdateClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrchestratorAddress) > 0 {
		i -= len(m.OrchestratorAddress)
		copy(dAtA[i:], m.OrchestratorAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.OrchestratorAddress)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.RewardToken) > 0 {
		i -= len(m.RewardToken)
		copy(dAtA[i:], m.RewardToken)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RewardToken)))
		i--
		dAtA[i] = 0x42
	}
	{
		size := m.RewardAmount.Size()
		i -= size
		if _, err := m.RewardAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if len(m.ValsetMembers) > 0 {
		for iNdEx := len(m.ValsetMembers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValsetMembers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.ValsetNonce != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ValsetNonce))
		i--
		dAtA[i] = 0x28
	}
	if len(m.AttestationId) > 0 {
		i -= len(m.AttestationId)
		copy(dAtA[i:], m.AttestationId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.AttestationId)))
		i--
		dAtA[i] = 0x22
	}
	if m.EventHeight != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EventHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.EventNonce != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x10
	}
	if m.HyperionId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.HyperionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventCancelSendToChain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCancelSendToChain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCancelSendToChain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OutgoingTxId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.OutgoingTxId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventSubmitBadSignatureEvidence) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSubmitBadSignatureEvidence) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSubmitBadSignatureEvidence) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BadEthSignatureSubject) > 0 {
		i -= len(m.BadEthSignatureSubject)
		copy(dAtA[i:], m.BadEthSignatureSubject)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.BadEthSignatureSubject)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BadEthSignature) > 0 {
		i -= len(m.BadEthSignature)
		copy(dAtA[i:], m.BadEthSignature)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.BadEthSignature)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventValidatorSlash) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventValidatorSlash) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventValidatorSlash) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Moniker) > 0 {
		i -= len(m.Moniker)
		copy(dAtA[i:], m.Moniker)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Moniker)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ConsensusAddress) > 0 {
		i -= len(m.ConsensusAddress)
		copy(dAtA[i:], m.ConsensusAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ConsensusAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Power != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x10
	}
	if m.HyperionId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.HyperionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventAttestationObserved) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AttestationType != 0 {
		n += 1 + sovEvents(uint64(m.AttestationType))
	}
	l = len(m.BridgeContract)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.BridgeChainId != 0 {
		n += 1 + sovEvents(uint64(m.BridgeChainId))
	}
	l = len(m.AttestationId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovEvents(uint64(m.Nonce))
	}
	return n
}

func (m *EventBridgeWithdrawCanceled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BridgeContract)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.BridgeChainId != 0 {
		n += 1 + sovEvents(uint64(m.BridgeChainId))
	}
	return n
}

func (m *EventOutgoingBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HyperionId != 0 {
		n += 1 + sovEvents(uint64(m.HyperionId))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.OrchestratorAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.BatchNonce != 0 {
		n += 1 + sovEvents(uint64(m.BatchNonce))
	}
	if m.BatchTimeout != 0 {
		n += 1 + sovEvents(uint64(m.BatchTimeout))
	}
	if len(m.BatchTxIds) > 0 {
		l = 0
		for _, e := range m.BatchTxIds {
			l += sovEvents(uint64(e))
		}
		n += 1 + sovEvents(uint64(l)) + l
	}
	return n
}

func (m *EventOutgoingBatchCanceled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HyperionId != 0 {
		n += 1 + sovEvents(uint64(m.HyperionId))
	}
	l = len(m.BridgeContract)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.BridgeChainId != 0 {
		n += 1 + sovEvents(uint64(m.BridgeChainId))
	}
	if m.BatchId != 0 {
		n += 1 + sovEvents(uint64(m.BatchId))
	}
	if m.Nonce != 0 {
		n += 1 + sovEvents(uint64(m.Nonce))
	}
	return n
}

func (m *EventValsetUpdateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HyperionId != 0 {
		n += 1 + sovEvents(uint64(m.HyperionId))
	}
	if m.ValsetNonce != 0 {
		n += 1 + sovEvents(uint64(m.ValsetNonce))
	}
	if m.ValsetHeight != 0 {
		n += 1 + sovEvents(uint64(m.ValsetHeight))
	}
	if len(m.ValsetMembers) > 0 {
		for _, e := range m.ValsetMembers {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	l = m.RewardAmount.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = len(m.RewardToken)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventSetOrchestratorAddresses) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.OrchestratorAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.OperatorEthAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.HyperionId != 0 {
		n += 1 + sovEvents(uint64(m.HyperionId))
	}
	return n
}

func (m *EventValsetConfirm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HyperionId != 0 {
		n += 1 + sovEvents(uint64(m.HyperionId))
	}
	if m.ValsetNonce != 0 {
		n += 1 + sovEvents(uint64(m.ValsetNonce))
	}
	l = len(m.OrchestratorAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventSendToChain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HyperionId != 0 {
		n += 1 + sovEvents(uint64(m.HyperionId))
	}
	if m.OutgoingTxId != 0 {
		n += 1 + sovEvents(uint64(m.OutgoingTxId))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.BridgeFee.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *EventConfirmBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HyperionId != 0 {
		n += 1 + sovEvents(uint64(m.HyperionId))
	}
	if m.BatchNonce != 0 {
		n += 1 + sovEvents(uint64(m.BatchNonce))
	}
	l = len(m.OrchestratorAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventAttestationVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventNonce != 0 {
		n += 1 + sovEvents(uint64(m.EventNonce))
	}
	l = len(m.AttestationId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Voter)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventDepositClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HyperionId != 0 {
		n += 1 + sovEvents(uint64(m.HyperionId))
	}
	if m.EventNonce != 0 {
		n += 1 + sovEvents(uint64(m.EventNonce))
	}
	if m.EventHeight != 0 {
		n += 1 + sovEvents(uint64(m.EventHeight))
	}
	l = len(m.AttestationId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.EthereumSender)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.CosmosReceiver)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.TokenContract)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = len(m.OrchestratorAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventWithdrawClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HyperionId != 0 {
		n += 1 + sovEvents(uint64(m.HyperionId))
	}
	if m.EventNonce != 0 {
		n += 1 + sovEvents(uint64(m.EventNonce))
	}
	if m.EventHeight != 0 {
		n += 1 + sovEvents(uint64(m.EventHeight))
	}
	l = len(m.AttestationId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.BatchNonce != 0 {
		n += 1 + sovEvents(uint64(m.BatchNonce))
	}
	l = len(m.TokenContract)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.OrchestratorAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventERC20DeployedClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HyperionId != 0 {
		n += 1 + sovEvents(uint64(m.HyperionId))
	}
	if m.EventNonce != 0 {
		n += 1 + sovEvents(uint64(m.EventNonce))
	}
	if m.EventHeight != 0 {
		n += 1 + sovEvents(uint64(m.EventHeight))
	}
	l = len(m.AttestationId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.CosmosDenom)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.TokenContract)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Decimals != 0 {
		n += 1 + sovEvents(uint64(m.Decimals))
	}
	l = len(m.OrchestratorAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventValsetUpdateClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HyperionId != 0 {
		n += 1 + sovEvents(uint64(m.HyperionId))
	}
	if m.EventNonce != 0 {
		n += 1 + sovEvents(uint64(m.EventNonce))
	}
	if m.EventHeight != 0 {
		n += 1 + sovEvents(uint64(m.EventHeight))
	}
	l = len(m.AttestationId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.ValsetNonce != 0 {
		n += 1 + sovEvents(uint64(m.ValsetNonce))
	}
	if len(m.ValsetMembers) > 0 {
		for _, e := range m.ValsetMembers {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	l = m.RewardAmount.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = len(m.RewardToken)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.OrchestratorAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventCancelSendToChain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OutgoingTxId != 0 {
		n += 1 + sovEvents(uint64(m.OutgoingTxId))
	}
	return n
}

func (m *EventSubmitBadSignatureEvidence) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BadEthSignature)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.BadEthSignatureSubject)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventValidatorSlash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HyperionId != 0 {
		n += 1 + sovEvents(uint64(m.HyperionId))
	}
	if m.Power != 0 {
		n += 1 + sovEvents(uint64(m.Power))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.ConsensusAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Moniker)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventAttestationObserved) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAttestationObserved: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAttestationObserved: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestationType", wireType)
			}
			m.AttestationType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttestationType |= ClaimType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgeContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeChainId", wireType)
			}
			m.BridgeChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BridgeChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestationId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttestationId = append(m.AttestationId[:0], dAtA[iNdEx:postIndex]...)
			if m.AttestationId == nil {
				m.AttestationId = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventBridgeWithdrawCanceled) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventBridgeWithdrawCanceled: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventBridgeWithdrawCanceled: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgeContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeChainId", wireType)
			}
			m.BridgeChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BridgeChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventOutgoingBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventOutgoingBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventOutgoingBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HyperionId", wireType)
			}
			m.HyperionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HyperionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrchestratorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrchestratorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchNonce", wireType)
			}
			m.BatchNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchTimeout", wireType)
			}
			m.BatchTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchTimeout |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvents
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BatchTxIds = append(m.BatchTxIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvents
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEvents
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthEvents
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.BatchTxIds) == 0 {
					m.BatchTxIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEvents
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BatchTxIds = append(m.BatchTxIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchTxIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventOutgoingBatchCanceled) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventOutgoingBatchCanceled: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventOutgoingBatchCanceled: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HyperionId", wireType)
			}
			m.HyperionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HyperionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgeContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeChainId", wireType)
			}
			m.BridgeChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BridgeChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchId", wireType)
			}
			m.BatchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventValsetUpdateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventValsetUpdateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventValsetUpdateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HyperionId", wireType)
			}
			m.HyperionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HyperionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValsetNonce", wireType)
			}
			m.ValsetNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValsetNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValsetHeight", wireType)
			}
			m.ValsetHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValsetHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValsetMembers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValsetMembers = append(m.ValsetMembers, &BridgeValidator{})
			if err := m.ValsetMembers[len(m.ValsetMembers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSetOrchestratorAddresses) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSetOrchestratorAddresses: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSetOrchestratorAddresses: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrchestratorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrchestratorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorEthAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorEthAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HyperionId", wireType)
			}
			m.HyperionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HyperionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventValsetConfirm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventValsetConfirm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventValsetConfirm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HyperionId", wireType)
			}
			m.HyperionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HyperionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValsetNonce", wireType)
			}
			m.ValsetNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValsetNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrchestratorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrchestratorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSendToChain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSendToChain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSendToChain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HyperionId", wireType)
			}
			m.HyperionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HyperionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutgoingTxId", wireType)
			}
			m.OutgoingTxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutgoingTxId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BridgeFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventConfirmBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventConfirmBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventConfirmBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HyperionId", wireType)
			}
			m.HyperionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HyperionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchNonce", wireType)
			}
			m.BatchNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrchestratorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrchestratorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventAttestationVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAttestationVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAttestationVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestationId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttestationId = append(m.AttestationId[:0], dAtA[iNdEx:postIndex]...)
			if m.AttestationId == nil {
				m.AttestationId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Voter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventDepositClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventDepositClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventDepositClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HyperionId", wireType)
			}
			m.HyperionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HyperionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventHeight", wireType)
			}
			m.EventHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestationId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttestationId = append(m.AttestationId[:0], dAtA[iNdEx:postIndex]...)
			if m.AttestationId == nil {
				m.AttestationId = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthereumSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthereumSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosmosReceiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CosmosReceiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrchestratorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrchestratorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventWithdrawClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventWithdrawClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventWithdrawClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HyperionId", wireType)
			}
			m.HyperionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HyperionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventHeight", wireType)
			}
			m.EventHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestationId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttestationId = append(m.AttestationId[:0], dAtA[iNdEx:postIndex]...)
			if m.AttestationId == nil {
				m.AttestationId = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchNonce", wireType)
			}
			m.BatchNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrchestratorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrchestratorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventERC20DeployedClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventERC20DeployedClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventERC20DeployedClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HyperionId", wireType)
			}
			m.HyperionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HyperionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventHeight", wireType)
			}
			m.EventHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestationId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttestationId = append(m.AttestationId[:0], dAtA[iNdEx:postIndex]...)
			if m.AttestationId == nil {
				m.AttestationId = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosmosDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CosmosDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimals", wireType)
			}
			m.Decimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decimals |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrchestratorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrchestratorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventValsetUpdateClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventValsetUpdateClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventValsetUpdateClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HyperionId", wireType)
			}
			m.HyperionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HyperionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventHeight", wireType)
			}
			m.EventHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestationId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttestationId = append(m.AttestationId[:0], dAtA[iNdEx:postIndex]...)
			if m.AttestationId == nil {
				m.AttestationId = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValsetNonce", wireType)
			}
			m.ValsetNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValsetNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValsetMembers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValsetMembers = append(m.ValsetMembers, &BridgeValidator{})
			if err := m.ValsetMembers[len(m.ValsetMembers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrchestratorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrchestratorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCancelSendToChain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCancelSendToChain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCancelSendToChain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutgoingTxId", wireType)
			}
			m.OutgoingTxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutgoingTxId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSubmitBadSignatureEvidence) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSubmitBadSignatureEvidence: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSubmitBadSignatureEvidence: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadEthSignature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BadEthSignature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadEthSignatureSubject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BadEthSignatureSubject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventValidatorSlash) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventValidatorSlash: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventValidatorSlash: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HyperionId", wireType)
			}
			m.HyperionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HyperionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsensusAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Moniker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Moniker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
