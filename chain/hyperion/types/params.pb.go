// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: helios/hyperion/v1/params.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Params struct {
	CounterpartyChainParams []*CounterpartyChainParams `protobuf:"bytes,1,rep,name=counterparty_chain_params,json=counterpartyChainParams,proto3" json:"counterparty_chain_params,omitempty"`
	Admins                  []string                   `protobuf:"bytes,2,rep,name=admins,proto3" json:"admins,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5f87689d64baa8c, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetCounterpartyChainParams() []*CounterpartyChainParams {
	if m != nil {
		return m.CounterpartyChainParams
	}
	return nil
}

func (m *Params) GetAdmins() []string {
	if m != nil {
		return m.Admins
	}
	return nil
}

type CounterpartyChainParams struct {
	HyperionId                    uint64                                 `protobuf:"varint,1,opt,name=hyperion_id,json=hyperionId,proto3" json:"hyperion_id,omitempty"`
	ContractSourceHash            string                                 `protobuf:"bytes,2,opt,name=contract_source_hash,json=contractSourceHash,proto3" json:"contract_source_hash,omitempty"`
	BridgeCounterpartyAddress     string                                 `protobuf:"bytes,3,opt,name=bridge_counterparty_address,json=bridgeCounterpartyAddress,proto3" json:"bridge_counterparty_address,omitempty"`
	BridgeChainId                 uint64                                 `protobuf:"varint,4,opt,name=bridge_chain_id,json=bridgeChainId,proto3" json:"bridge_chain_id,omitempty"`
	BridgeChainName               string                                 `protobuf:"bytes,5,opt,name=bridge_chain_name,json=bridgeChainName,proto3" json:"bridge_chain_name,omitempty"`
	BridgeChainLogo               string                                 `protobuf:"bytes,6,opt,name=bridge_chain_logo,json=bridgeChainLogo,proto3" json:"bridge_chain_logo,omitempty"`
	BridgeChainType               string                                 `protobuf:"bytes,7,opt,name=bridge_chain_type,json=bridgeChainType,proto3" json:"bridge_chain_type,omitempty"`
	SignedValsetsWindow           uint64                                 `protobuf:"varint,8,opt,name=signed_valsets_window,json=signedValsetsWindow,proto3" json:"signed_valsets_window,omitempty"`
	SignedBatchesWindow           uint64                                 `protobuf:"varint,9,opt,name=signed_batches_window,json=signedBatchesWindow,proto3" json:"signed_batches_window,omitempty"`
	SignedClaimsWindow            uint64                                 `protobuf:"varint,10,opt,name=signed_claims_window,json=signedClaimsWindow,proto3" json:"signed_claims_window,omitempty"`
	TargetBatchTimeout            uint64                                 `protobuf:"varint,11,opt,name=target_batch_timeout,json=targetBatchTimeout,proto3" json:"target_batch_timeout,omitempty"`
	TargetOutgoingTxTimeout       uint64                                 `protobuf:"varint,12,opt,name=target_outgoing_tx_timeout,json=targetOutgoingTxTimeout,proto3" json:"target_outgoing_tx_timeout,omitempty"`
	AverageBlockTime              uint64                                 `protobuf:"varint,13,opt,name=average_block_time,json=averageBlockTime,proto3" json:"average_block_time,omitempty"`
	AverageCounterpartyBlockTime  uint64                                 `protobuf:"varint,14,opt,name=average_counterparty_block_time,json=averageCounterpartyBlockTime,proto3" json:"average_counterparty_block_time,omitempty"`
	SlashFractionValset           cosmossdk_io_math.LegacyDec            `protobuf:"bytes,15,opt,name=slash_fraction_valset,json=slashFractionValset,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"slash_fraction_valset"`
	SlashFractionBatch            cosmossdk_io_math.LegacyDec            `protobuf:"bytes,16,opt,name=slash_fraction_batch,json=slashFractionBatch,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"slash_fraction_batch"`
	SlashFractionClaim            cosmossdk_io_math.LegacyDec            `protobuf:"bytes,17,opt,name=slash_fraction_claim,json=slashFractionClaim,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"slash_fraction_claim"`
	SlashFractionConflictingClaim cosmossdk_io_math.LegacyDec            `protobuf:"bytes,18,opt,name=slash_fraction_conflicting_claim,json=slashFractionConflictingClaim,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"slash_fraction_conflicting_claim"`
	UnbondSlashingValsetsWindow   uint64                                 `protobuf:"varint,19,opt,name=unbond_slashing_valsets_window,json=unbondSlashingValsetsWindow,proto3" json:"unbond_slashing_valsets_window,omitempty"`
	SlashFractionBadEthSignature  cosmossdk_io_math.LegacyDec            `protobuf:"bytes,20,opt,name=slash_fraction_bad_eth_signature,json=slashFractionBadEthSignature,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"slash_fraction_bad_eth_signature"`
	BridgeContractStartHeight     uint64                                 `protobuf:"varint,23,opt,name=bridge_contract_start_height,json=bridgeContractStartHeight,proto3" json:"bridge_contract_start_height,omitempty"`
	ValsetReward                  types.Coin                             `protobuf:"bytes,24,opt,name=valset_reward,json=valsetReward,proto3" json:"valset_reward"`
	DefaultTokens                 []*TokenAddressToDenomWithGenesisInfos `protobuf:"bytes,25,rep,name=default_tokens,json=defaultTokens,proto3" json:"default_tokens,omitempty"`
	Initializer                   string                                 `protobuf:"bytes,26,opt,name=initializer,proto3" json:"initializer,omitempty"`
	Rpcs                          []*Rpc                                 `protobuf:"bytes,27,rep,name=rpcs,proto3" json:"rpcs,omitempty"`
	OffsetValsetNonce             uint64                                 `protobuf:"varint,28,opt,name=offset_valset_nonce,json=offsetValsetNonce,proto3" json:"offset_valset_nonce,omitempty"`
	MinCallExternalDataGas        uint64                                 `protobuf:"varint,29,opt,name=min_call_external_data_gas,json=minCallExternalDataGas,proto3" json:"min_call_external_data_gas,omitempty"`
	Paused                        bool                                   `protobuf:"varint,30,opt,name=paused,proto3" json:"paused,omitempty"`
}

func (m *CounterpartyChainParams) Reset()         { *m = CounterpartyChainParams{} }
func (m *CounterpartyChainParams) String() string { return proto.CompactTextString(m) }
func (*CounterpartyChainParams) ProtoMessage()    {}
func (*CounterpartyChainParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5f87689d64baa8c, []int{1}
}
func (m *CounterpartyChainParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CounterpartyChainParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CounterpartyChainParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CounterpartyChainParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CounterpartyChainParams.Merge(m, src)
}
func (m *CounterpartyChainParams) XXX_Size() int {
	return m.Size()
}
func (m *CounterpartyChainParams) XXX_DiscardUnknown() {
	xxx_messageInfo_CounterpartyChainParams.DiscardUnknown(m)
}

var xxx_messageInfo_CounterpartyChainParams proto.InternalMessageInfo

func (m *CounterpartyChainParams) GetHyperionId() uint64 {
	if m != nil {
		return m.HyperionId
	}
	return 0
}

func (m *CounterpartyChainParams) GetContractSourceHash() string {
	if m != nil {
		return m.ContractSourceHash
	}
	return ""
}

func (m *CounterpartyChainParams) GetBridgeCounterpartyAddress() string {
	if m != nil {
		return m.BridgeCounterpartyAddress
	}
	return ""
}

func (m *CounterpartyChainParams) GetBridgeChainId() uint64 {
	if m != nil {
		return m.BridgeChainId
	}
	return 0
}

func (m *CounterpartyChainParams) GetBridgeChainName() string {
	if m != nil {
		return m.BridgeChainName
	}
	return ""
}

func (m *CounterpartyChainParams) GetBridgeChainLogo() string {
	if m != nil {
		return m.BridgeChainLogo
	}
	return ""
}

func (m *CounterpartyChainParams) GetBridgeChainType() string {
	if m != nil {
		return m.BridgeChainType
	}
	return ""
}

func (m *CounterpartyChainParams) GetSignedValsetsWindow() uint64 {
	if m != nil {
		return m.SignedValsetsWindow
	}
	return 0
}

func (m *CounterpartyChainParams) GetSignedBatchesWindow() uint64 {
	if m != nil {
		return m.SignedBatchesWindow
	}
	return 0
}

func (m *CounterpartyChainParams) GetSignedClaimsWindow() uint64 {
	if m != nil {
		return m.SignedClaimsWindow
	}
	return 0
}

func (m *CounterpartyChainParams) GetTargetBatchTimeout() uint64 {
	if m != nil {
		return m.TargetBatchTimeout
	}
	return 0
}

func (m *CounterpartyChainParams) GetTargetOutgoingTxTimeout() uint64 {
	if m != nil {
		return m.TargetOutgoingTxTimeout
	}
	return 0
}

func (m *CounterpartyChainParams) GetAverageBlockTime() uint64 {
	if m != nil {
		return m.AverageBlockTime
	}
	return 0
}

func (m *CounterpartyChainParams) GetAverageCounterpartyBlockTime() uint64 {
	if m != nil {
		return m.AverageCounterpartyBlockTime
	}
	return 0
}

func (m *CounterpartyChainParams) GetUnbondSlashingValsetsWindow() uint64 {
	if m != nil {
		return m.UnbondSlashingValsetsWindow
	}
	return 0
}

func (m *CounterpartyChainParams) GetBridgeContractStartHeight() uint64 {
	if m != nil {
		return m.BridgeContractStartHeight
	}
	return 0
}

func (m *CounterpartyChainParams) GetValsetReward() types.Coin {
	if m != nil {
		return m.ValsetReward
	}
	return types.Coin{}
}

func (m *CounterpartyChainParams) GetDefaultTokens() []*TokenAddressToDenomWithGenesisInfos {
	if m != nil {
		return m.DefaultTokens
	}
	return nil
}

func (m *CounterpartyChainParams) GetInitializer() string {
	if m != nil {
		return m.Initializer
	}
	return ""
}

func (m *CounterpartyChainParams) GetRpcs() []*Rpc {
	if m != nil {
		return m.Rpcs
	}
	return nil
}

func (m *CounterpartyChainParams) GetOffsetValsetNonce() uint64 {
	if m != nil {
		return m.OffsetValsetNonce
	}
	return 0
}

func (m *CounterpartyChainParams) GetMinCallExternalDataGas() uint64 {
	if m != nil {
		return m.MinCallExternalDataGas
	}
	return 0
}

func (m *CounterpartyChainParams) GetPaused() bool {
	if m != nil {
		return m.Paused
	}
	return false
}

func init() {
	proto.RegisterType((*Params)(nil), "helios.hyperion.v1.Params")
	proto.RegisterType((*CounterpartyChainParams)(nil), "helios.hyperion.v1.CounterpartyChainParams")
}

func init() { proto.RegisterFile("helios/hyperion/v1/params.proto", fileDescriptor_f5f87689d64baa8c) }

var fileDescriptor_f5f87689d64baa8c = []byte{
	// 1001 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x95, 0xdf, 0x6e, 0xdb, 0x36,
	0x14, 0xc6, 0xa3, 0x26, 0xcb, 0x1a, 0x26, 0x69, 0x1a, 0x26, 0x6d, 0x98, 0x3f, 0x75, 0x84, 0x0e,
	0x18, 0xdc, 0x76, 0x93, 0x9a, 0xec, 0x62, 0x40, 0x06, 0x6c, 0x98, 0x9d, 0xac, 0x0d, 0x50, 0x74,
	0x83, 0xe2, 0x2d, 0xc0, 0x2e, 0x46, 0x1c, 0x4b, 0xb4, 0x44, 0x44, 0x22, 0x0d, 0x91, 0x76, 0xe2,
	0x5d, 0xed, 0x7a, 0x57, 0x7b, 0x87, 0xbd, 0xc0, 0x1e, 0xa3, 0x97, 0xbd, 0x1c, 0x86, 0xa1, 0x18,
	0x92, 0x8b, 0xbd, 0xc6, 0x20, 0x52, 0x72, 0xec, 0xd8, 0x05, 0x82, 0xdd, 0x18, 0x96, 0xbe, 0xef,
	0x77, 0xce, 0x21, 0x0f, 0xc5, 0x83, 0x76, 0x13, 0x96, 0x72, 0xa9, 0xfc, 0x64, 0xd0, 0x65, 0x39,
	0x97, 0xc2, 0xef, 0xef, 0xf9, 0x5d, 0xc8, 0x21, 0x53, 0x5e, 0x37, 0x97, 0x5a, 0x62, 0x6c, 0x0d,
	0x5e, 0x65, 0xf0, 0xfa, 0x7b, 0x5b, 0xeb, 0xb1, 0x8c, 0xa5, 0x91, 0xfd, 0xe2, 0x9f, 0x75, 0x6e,
	0xd5, 0x42, 0xa9, 0x32, 0xa9, 0xfc, 0x36, 0x28, 0xe6, 0xf7, 0xf7, 0xda, 0x4c, 0xc3, 0x9e, 0x1f,
	0x4a, 0x2e, 0x4a, 0x7d, 0x15, 0x32, 0x2e, 0xa4, 0x6f, 0x7e, 0x2b, 0x64, 0x4a, 0x76, 0x3d, 0xe8,
	0xb2, 0x32, 0xf9, 0xe3, 0xdf, 0x1d, 0x34, 0xff, 0x9d, 0xa9, 0x06, 0xc7, 0x68, 0x33, 0x94, 0x3d,
	0xa1, 0x59, 0xde, 0x85, 0x5c, 0x0f, 0x68, 0x98, 0x00, 0x17, 0xd4, 0x96, 0x4a, 0x1c, 0x77, 0xb6,
	0xbe, 0xb8, 0xff, 0xcc, 0x9b, 0xac, 0xd5, 0x6b, 0x8e, 0x40, 0xcd, 0x82, 0xb1, 0xf1, 0x82, 0x8d,
	0x70, 0xba, 0x80, 0x1f, 0xa2, 0x79, 0x88, 0x32, 0x2e, 0x14, 0xb9, 0xe3, 0xce, 0xd6, 0x17, 0x82,
	0xf2, 0xe9, 0x80, 0xfc, 0xf2, 0xb7, 0x3b, 0xf3, 0xeb, 0xbf, 0x7f, 0x3c, 0x5d, 0x19, 0x56, 0x6b,
	0x89, 0xc7, 0x97, 0xcb, 0x68, 0xe3, 0x3d, 0x69, 0xf0, 0x2e, 0x5a, 0xac, 0xec, 0x94, 0x47, 0xc4,
	0x71, 0x9d, 0xfa, 0x5c, 0x80, 0xaa, 0x57, 0xc7, 0x11, 0x7e, 0x8e, 0xd6, 0x43, 0x29, 0x74, 0x0e,
	0xa1, 0xa6, 0x4a, 0xf6, 0xf2, 0x90, 0xd1, 0x04, 0x54, 0x42, 0xee, 0xb8, 0x4e, 0x7d, 0x21, 0xc0,
	0x95, 0x76, 0x62, 0xa4, 0x97, 0xa0, 0x12, 0xfc, 0x25, 0xda, 0x6e, 0xe7, 0x3c, 0x8a, 0x19, 0x1d,
	0xdb, 0x10, 0x88, 0xa2, 0x9c, 0x29, 0x45, 0x66, 0x0d, 0xb8, 0x69, 0x2d, 0xa3, 0x65, 0x7d, 0x6d,
	0x0d, 0xf8, 0x63, 0xb4, 0x52, 0xf1, 0x66, 0x0f, 0x79, 0x44, 0xe6, 0x4c, 0x59, 0xcb, 0x25, 0x53,
	0xbc, 0x3d, 0x8e, 0xf0, 0x53, 0xb4, 0x3a, 0xe6, 0x13, 0x90, 0x31, 0xf2, 0x81, 0x89, 0xbe, 0x32,
	0xe2, 0x7c, 0x0d, 0x19, 0x9b, 0xf0, 0xa6, 0x32, 0x96, 0x64, 0x7e, 0xc2, 0xfb, 0x4a, 0xc6, 0x72,
	0xc2, 0x5b, 0x34, 0x9c, 0x7c, 0x38, 0xe1, 0x6d, 0x0d, 0xba, 0x0c, 0xef, 0xa3, 0x07, 0x8a, 0xc7,
	0x82, 0x45, 0xb4, 0x0f, 0xa9, 0x62, 0x5a, 0xd1, 0x73, 0x2e, 0x22, 0x79, 0x4e, 0xee, 0x9a, 0x8a,
	0xd7, 0xac, 0xf8, 0x83, 0xd5, 0x4e, 0x8d, 0x34, 0xc2, 0xb4, 0x41, 0x87, 0x09, 0x1b, 0x32, 0x0b,
	0xa3, 0x4c, 0xc3, 0x6a, 0x25, 0xf3, 0x1c, 0xad, 0x97, 0x4c, 0x98, 0x02, 0xcf, 0x86, 0x08, 0x32,
	0x08, 0xb6, 0x5a, 0xd3, 0x48, 0xd7, 0x84, 0x86, 0x3c, 0x66, 0xda, 0x66, 0xa1, 0x9a, 0x67, 0x4c,
	0xf6, 0x34, 0x59, 0xb4, 0x84, 0xd5, 0x4c, 0x92, 0x96, 0x55, 0xf0, 0x17, 0x68, 0xab, 0x24, 0x64,
	0x4f, 0xc7, 0x92, 0x8b, 0x98, 0xea, 0x8b, 0x21, 0xb7, 0x64, 0xb8, 0x0d, 0xeb, 0xf8, 0xb6, 0x34,
	0xb4, 0x2e, 0x2a, 0xf8, 0x13, 0x84, 0xa1, 0xcf, 0x72, 0x88, 0x19, 0x6d, 0xa7, 0x32, 0x3c, 0x33,
	0x1c, 0x59, 0x36, 0xd0, 0xfd, 0x52, 0x69, 0x14, 0x42, 0x01, 0xe0, 0x23, 0xb4, 0x5b, 0xb9, 0xc7,
	0xce, 0xc8, 0x08, 0x7a, 0xcf, 0xa0, 0x3b, 0xa5, 0x6d, 0xf4, 0x9c, 0x5c, 0x87, 0x39, 0x45, 0x0f,
	0x54, 0x0a, 0x2a, 0xa1, 0x9d, 0xe2, 0x08, 0x16, 0x47, 0xd8, 0x76, 0x81, 0xac, 0xb8, 0x4e, 0x7d,
	0xa9, 0xf1, 0xd1, 0x9b, 0x77, 0xbb, 0x33, 0x7f, 0xbd, 0xdb, 0xdd, 0xb6, 0x1f, 0xbe, 0x8a, 0xce,
	0x3c, 0x2e, 0xfd, 0x0c, 0x74, 0xe2, 0xbd, 0x62, 0x31, 0x84, 0x83, 0x43, 0x16, 0x06, 0x6b, 0x26,
	0xc2, 0x37, 0x65, 0x00, 0xdb, 0x29, 0xfc, 0x3d, 0x5a, 0xbf, 0x11, 0xd8, 0x6c, 0x22, 0xb9, 0x7f,
	0xfb, 0xb8, 0x78, 0x2c, 0xae, 0xd9, 0xe8, 0x29, 0x61, 0x4d, 0x37, 0xc9, 0xea, 0xff, 0x0d, 0x6b,
	0x3a, 0x8e, 0x53, 0xe4, 0xde, 0x0c, 0x2b, 0x45, 0x27, 0xe5, 0xa1, 0x2e, 0x7a, 0x68, 0x53, 0xe0,
	0xdb, 0xa7, 0x78, 0x34, 0x9e, 0xe2, 0x3a, 0x94, 0xcd, 0xd6, 0x44, 0xb5, 0x9e, 0x68, 0x4b, 0x11,
	0x51, 0xe3, 0x2b, 0x52, 0xdc, 0x38, 0xfb, 0x6b, 0xa6, 0x75, 0xdb, 0xd6, 0x75, 0x52, 0x9a, 0xc6,
	0xbf, 0x81, 0xb3, 0x89, 0x92, 0xdb, 0x10, 0x51, 0xa6, 0x13, 0x5a, 0x1c, 0x65, 0xd0, 0xbd, 0x9c,
	0x91, 0xf5, 0xdb, 0x97, 0xbc, 0x73, 0x63, 0xb3, 0xa3, 0x23, 0x9d, 0x9c, 0x54, 0x81, 0xf0, 0x57,
	0x68, 0x67, 0x78, 0x21, 0x55, 0x37, 0x99, 0x86, 0x5c, 0xd3, 0x84, 0xf1, 0x38, 0xd1, 0x64, 0xc3,
	0xd4, 0x3b, 0xbc, 0x91, 0xca, 0x0b, 0xad, 0x70, 0xbc, 0x34, 0x06, 0x7c, 0x88, 0x96, 0xed, 0x12,
	0x69, 0xce, 0xce, 0x21, 0x8f, 0x08, 0x71, 0x9d, 0xfa, 0xe2, 0xfe, 0xa6, 0x67, 0x6b, 0xf2, 0x8a,
	0x89, 0xe2, 0x95, 0x13, 0xc5, 0x6b, 0x4a, 0x2e, 0x1a, 0x73, 0x45, 0xd5, 0xc1, 0x92, 0xa5, 0x02,
	0x03, 0xe1, 0x9f, 0xd0, 0xbd, 0x88, 0x75, 0xa0, 0x97, 0x6a, 0xaa, 0xe5, 0x19, 0x13, 0x8a, 0x6c,
	0x9a, 0xb1, 0xf0, 0xf9, 0xb4, 0xb1, 0xd0, 0x2a, 0x1c, 0xe5, 0x8d, 0xd8, 0x92, 0x87, 0x4c, 0xc8,
	0xec, 0x94, 0xeb, 0xe4, 0x05, 0x13, 0x4c, 0x71, 0x75, 0x2c, 0x3a, 0x52, 0x05, 0xcb, 0x65, 0x38,
	0xe3, 0x55, 0xd8, 0x45, 0x8b, 0x5c, 0x70, 0xcd, 0x21, 0xe5, 0x3f, 0xb3, 0x9c, 0x6c, 0x99, 0x1b,
	0x6b, 0xf4, 0x15, 0x7e, 0x86, 0xe6, 0xf2, 0x6e, 0xa8, 0xc8, 0xb6, 0xc9, 0xbb, 0x31, 0x2d, 0x6f,
	0xd0, 0x0d, 0x03, 0x63, 0xc2, 0x1e, 0x5a, 0x93, 0x9d, 0x4e, 0xb1, 0xe8, 0x72, 0xed, 0x42, 0x8a,
	0x90, 0x91, 0x1d, 0xb3, 0x59, 0xab, 0x56, 0xb2, 0x4d, 0x7d, 0x5d, 0x08, 0xf8, 0x00, 0x6d, 0x65,
	0x5c, 0xd0, 0x10, 0xd2, 0x94, 0xb2, 0x0b, 0xcd, 0x72, 0x01, 0x29, 0x8d, 0x40, 0x03, 0x8d, 0x41,
	0x91, 0x47, 0x06, 0x7b, 0x98, 0x71, 0xd1, 0x84, 0x34, 0x3d, 0x2a, 0xf5, 0x43, 0xd0, 0xf0, 0x02,
	0xcc, 0x4c, 0xeb, 0x42, 0x4f, 0xb1, 0x88, 0xd4, 0x5c, 0xa7, 0x7e, 0x37, 0x28, 0x9f, 0x0e, 0x9e,
	0x54, 0x33, 0xcd, 0x1d, 0xce, 0xb4, 0xf7, 0x0c, 0xb2, 0x46, 0xf3, 0xcd, 0x65, 0xcd, 0x79, 0x7b,
	0x59, 0x73, 0xfe, 0xb9, 0xac, 0x39, 0xbf, 0x5d, 0xd5, 0x66, 0xde, 0x5e, 0xd5, 0x66, 0xfe, 0xbc,
	0xaa, 0xcd, 0xfc, 0xf8, 0xc4, 0x2e, 0xf3, 0xd3, 0x50, 0xe6, 0xcc, 0xaf, 0xfe, 0x17, 0xa4, 0x7f,
	0x71, 0x3d, 0xd8, 0xcd, 0x54, 0x6f, 0xcf, 0x9b, 0xb1, 0xfe, 0xd9, 0x7f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x69, 0x5b, 0x90, 0x42, 0x76, 0x08, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Admins) > 0 {
		for iNdEx := len(m.Admins) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Admins[iNdEx])
			copy(dAtA[i:], m.Admins[iNdEx])
			i = encodeVarintParams(dAtA, i, uint64(len(m.Admins[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.CounterpartyChainParams) > 0 {
		for iNdEx := len(m.CounterpartyChainParams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CounterpartyChainParams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CounterpartyChainParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CounterpartyChainParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CounterpartyChainParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Paused {
		i--
		if m.Paused {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf0
	}
	if m.MinCallExternalDataGas != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MinCallExternalDataGas))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe8
	}
	if m.OffsetValsetNonce != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.OffsetValsetNonce))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe0
	}
	if len(m.Rpcs) > 0 {
		for iNdEx := len(m.Rpcs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rpcs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xda
		}
	}
	if len(m.Initializer) > 0 {
		i -= len(m.Initializer)
		copy(dAtA[i:], m.Initializer)
		i = encodeVarintParams(dAtA, i, uint64(len(m.Initializer)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if len(m.DefaultTokens) > 0 {
		for iNdEx := len(m.DefaultTokens) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DefaultTokens[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xca
		}
	}
	{
		size, err := m.ValsetReward.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xc2
	if m.BridgeContractStartHeight != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.BridgeContractStartHeight))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	{
		size := m.SlashFractionBadEthSignature.Size()
		i -= size
		if _, err := m.SlashFractionBadEthSignature.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa2
	if m.UnbondSlashingValsetsWindow != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.UnbondSlashingValsetsWindow))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	{
		size := m.SlashFractionConflictingClaim.Size()
		i -= size
		if _, err := m.SlashFractionConflictingClaim.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x92
	{
		size := m.SlashFractionClaim.Size()
		i -= size
		if _, err := m.SlashFractionClaim.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x8a
	{
		size := m.SlashFractionBatch.Size()
		i -= size
		if _, err := m.SlashFractionBatch.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x82
	{
		size := m.SlashFractionValset.Size()
		i -= size
		if _, err := m.SlashFractionValset.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x7a
	if m.AverageCounterpartyBlockTime != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.AverageCounterpartyBlockTime))
		i--
		dAtA[i] = 0x70
	}
	if m.AverageBlockTime != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.AverageBlockTime))
		i--
		dAtA[i] = 0x68
	}
	if m.TargetOutgoingTxTimeout != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.TargetOutgoingTxTimeout))
		i--
		dAtA[i] = 0x60
	}
	if m.TargetBatchTimeout != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.TargetBatchTimeout))
		i--
		dAtA[i] = 0x58
	}
	if m.SignedClaimsWindow != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.SignedClaimsWindow))
		i--
		dAtA[i] = 0x50
	}
	if m.SignedBatchesWindow != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.SignedBatchesWindow))
		i--
		dAtA[i] = 0x48
	}
	if m.SignedValsetsWindow != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.SignedValsetsWindow))
		i--
		dAtA[i] = 0x40
	}
	if len(m.BridgeChainType) > 0 {
		i -= len(m.BridgeChainType)
		copy(dAtA[i:], m.BridgeChainType)
		i = encodeVarintParams(dAtA, i, uint64(len(m.BridgeChainType)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.BridgeChainLogo) > 0 {
		i -= len(m.BridgeChainLogo)
		copy(dAtA[i:], m.BridgeChainLogo)
		i = encodeVarintParams(dAtA, i, uint64(len(m.BridgeChainLogo)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.BridgeChainName) > 0 {
		i -= len(m.BridgeChainName)
		copy(dAtA[i:], m.BridgeChainName)
		i = encodeVarintParams(dAtA, i, uint64(len(m.BridgeChainName)))
		i--
		dAtA[i] = 0x2a
	}
	if m.BridgeChainId != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.BridgeChainId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.BridgeCounterpartyAddress) > 0 {
		i -= len(m.BridgeCounterpartyAddress)
		copy(dAtA[i:], m.BridgeCounterpartyAddress)
		i = encodeVarintParams(dAtA, i, uint64(len(m.BridgeCounterpartyAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ContractSourceHash) > 0 {
		i -= len(m.ContractSourceHash)
		copy(dAtA[i:], m.ContractSourceHash)
		i = encodeVarintParams(dAtA, i, uint64(len(m.ContractSourceHash)))
		i--
		dAtA[i] = 0x12
	}
	if m.HyperionId != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.HyperionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CounterpartyChainParams) > 0 {
		for _, e := range m.CounterpartyChainParams {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if len(m.Admins) > 0 {
		for _, s := range m.Admins {
			l = len(s)
			n += 1 + l + sovParams(uint64(l))
		}
	}
	return n
}

func (m *CounterpartyChainParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HyperionId != 0 {
		n += 1 + sovParams(uint64(m.HyperionId))
	}
	l = len(m.ContractSourceHash)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.BridgeCounterpartyAddress)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if m.BridgeChainId != 0 {
		n += 1 + sovParams(uint64(m.BridgeChainId))
	}
	l = len(m.BridgeChainName)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.BridgeChainLogo)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.BridgeChainType)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if m.SignedValsetsWindow != 0 {
		n += 1 + sovParams(uint64(m.SignedValsetsWindow))
	}
	if m.SignedBatchesWindow != 0 {
		n += 1 + sovParams(uint64(m.SignedBatchesWindow))
	}
	if m.SignedClaimsWindow != 0 {
		n += 1 + sovParams(uint64(m.SignedClaimsWindow))
	}
	if m.TargetBatchTimeout != 0 {
		n += 1 + sovParams(uint64(m.TargetBatchTimeout))
	}
	if m.TargetOutgoingTxTimeout != 0 {
		n += 1 + sovParams(uint64(m.TargetOutgoingTxTimeout))
	}
	if m.AverageBlockTime != 0 {
		n += 1 + sovParams(uint64(m.AverageBlockTime))
	}
	if m.AverageCounterpartyBlockTime != 0 {
		n += 1 + sovParams(uint64(m.AverageCounterpartyBlockTime))
	}
	l = m.SlashFractionValset.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.SlashFractionBatch.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.SlashFractionClaim.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.SlashFractionConflictingClaim.Size()
	n += 2 + l + sovParams(uint64(l))
	if m.UnbondSlashingValsetsWindow != 0 {
		n += 2 + sovParams(uint64(m.UnbondSlashingValsetsWindow))
	}
	l = m.SlashFractionBadEthSignature.Size()
	n += 2 + l + sovParams(uint64(l))
	if m.BridgeContractStartHeight != 0 {
		n += 2 + sovParams(uint64(m.BridgeContractStartHeight))
	}
	l = m.ValsetReward.Size()
	n += 2 + l + sovParams(uint64(l))
	if len(m.DefaultTokens) > 0 {
		for _, e := range m.DefaultTokens {
			l = e.Size()
			n += 2 + l + sovParams(uint64(l))
		}
	}
	l = len(m.Initializer)
	if l > 0 {
		n += 2 + l + sovParams(uint64(l))
	}
	if len(m.Rpcs) > 0 {
		for _, e := range m.Rpcs {
			l = e.Size()
			n += 2 + l + sovParams(uint64(l))
		}
	}
	if m.OffsetValsetNonce != 0 {
		n += 2 + sovParams(uint64(m.OffsetValsetNonce))
	}
	if m.MinCallExternalDataGas != 0 {
		n += 2 + sovParams(uint64(m.MinCallExternalDataGas))
	}
	if m.Paused {
		n += 3
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterpartyChainParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CounterpartyChainParams = append(m.CounterpartyChainParams, &CounterpartyChainParams{})
			if err := m.CounterpartyChainParams[len(m.CounterpartyChainParams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admins", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admins = append(m.Admins, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CounterpartyChainParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CounterpartyChainParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CounterpartyChainParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HyperionId", wireType)
			}
			m.HyperionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HyperionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractSourceHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractSourceHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeCounterpartyAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgeCounterpartyAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeChainId", wireType)
			}
			m.BridgeChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BridgeChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgeChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeChainLogo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgeChainLogo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeChainType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgeChainType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedValsetsWindow", wireType)
			}
			m.SignedValsetsWindow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignedValsetsWindow |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedBatchesWindow", wireType)
			}
			m.SignedBatchesWindow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignedBatchesWindow |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedClaimsWindow", wireType)
			}
			m.SignedClaimsWindow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignedClaimsWindow |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetBatchTimeout", wireType)
			}
			m.TargetBatchTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetBatchTimeout |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetOutgoingTxTimeout", wireType)
			}
			m.TargetOutgoingTxTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetOutgoingTxTimeout |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AverageBlockTime", wireType)
			}
			m.AverageBlockTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AverageBlockTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AverageCounterpartyBlockTime", wireType)
			}
			m.AverageCounterpartyBlockTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AverageCounterpartyBlockTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashFractionValset", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SlashFractionValset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashFractionBatch", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SlashFractionBatch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashFractionClaim", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SlashFractionClaim.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashFractionConflictingClaim", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SlashFractionConflictingClaim.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondSlashingValsetsWindow", wireType)
			}
			m.UnbondSlashingValsetsWindow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnbondSlashingValsetsWindow |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashFractionBadEthSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SlashFractionBadEthSignature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeContractStartHeight", wireType)
			}
			m.BridgeContractStartHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BridgeContractStartHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValsetReward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ValsetReward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultTokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultTokens = append(m.DefaultTokens, &TokenAddressToDenomWithGenesisInfos{})
			if err := m.DefaultTokens[len(m.DefaultTokens)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Initializer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Initializer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rpcs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rpcs = append(m.Rpcs, &Rpc{})
			if err := m.Rpcs[len(m.Rpcs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetValsetNonce", wireType)
			}
			m.OffsetValsetNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffsetValsetNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinCallExternalDataGas", wireType)
			}
			m.MinCallExternalDataGas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinCallExternalDataGas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paused", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Paused = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
