// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: helios/chronos/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/structpb"
	types "github.com/Helios-Chain-Labs/sdk-go/chain/evm/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fac12bc47b40dc1, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fac12bc47b40dc1, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetCronRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetCronRequest) Reset()         { *m = QueryGetCronRequest{} }
func (m *QueryGetCronRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCronRequest) ProtoMessage()    {}
func (*QueryGetCronRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fac12bc47b40dc1, []int{2}
}
func (m *QueryGetCronRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCronRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCronRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCronRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCronRequest.Merge(m, src)
}
func (m *QueryGetCronRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCronRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCronRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCronRequest proto.InternalMessageInfo

func (m *QueryGetCronRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetCronResponse struct {
	Cron Cron `protobuf:"bytes,1,opt,name=cron,proto3" json:"cron"`
}

func (m *QueryGetCronResponse) Reset()         { *m = QueryGetCronResponse{} }
func (m *QueryGetCronResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCronResponse) ProtoMessage()    {}
func (*QueryGetCronResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fac12bc47b40dc1, []int{3}
}
func (m *QueryGetCronResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCronResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCronResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCronResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCronResponse.Merge(m, src)
}
func (m *QueryGetCronResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCronResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCronResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCronResponse proto.InternalMessageInfo

func (m *QueryGetCronResponse) GetCron() Cron {
	if m != nil {
		return m.Cron
	}
	return Cron{}
}

type QueryGetCronByAddressRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryGetCronByAddressRequest) Reset()         { *m = QueryGetCronByAddressRequest{} }
func (m *QueryGetCronByAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCronByAddressRequest) ProtoMessage()    {}
func (*QueryGetCronByAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fac12bc47b40dc1, []int{4}
}
func (m *QueryGetCronByAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCronByAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCronByAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCronByAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCronByAddressRequest.Merge(m, src)
}
func (m *QueryGetCronByAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCronByAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCronByAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCronByAddressRequest proto.InternalMessageInfo

func (m *QueryGetCronByAddressRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryGetCronByAddressResponse struct {
	Cron Cron `protobuf:"bytes,1,opt,name=cron,proto3" json:"cron"`
}

func (m *QueryGetCronByAddressResponse) Reset()         { *m = QueryGetCronByAddressResponse{} }
func (m *QueryGetCronByAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCronByAddressResponse) ProtoMessage()    {}
func (*QueryGetCronByAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fac12bc47b40dc1, []int{5}
}
func (m *QueryGetCronByAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCronByAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCronByAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCronByAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCronByAddressResponse.Merge(m, src)
}
func (m *QueryGetCronByAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCronByAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCronByAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCronByAddressResponse proto.InternalMessageInfo

func (m *QueryGetCronByAddressResponse) GetCron() Cron {
	if m != nil {
		return m.Cron
	}
	return Cron{}
}

type QueryGetCronsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetCronsRequest) Reset()         { *m = QueryGetCronsRequest{} }
func (m *QueryGetCronsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCronsRequest) ProtoMessage()    {}
func (*QueryGetCronsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fac12bc47b40dc1, []int{6}
}
func (m *QueryGetCronsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCronsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCronsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCronsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCronsRequest.Merge(m, src)
}
func (m *QueryGetCronsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCronsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCronsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCronsRequest proto.InternalMessageInfo

func (m *QueryGetCronsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCronsResponse struct {
	Crons      []Cron              `protobuf:"bytes,1,rep,name=crons,proto3" json:"crons"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetCronsResponse) Reset()         { *m = QueryGetCronsResponse{} }
func (m *QueryGetCronsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCronsResponse) ProtoMessage()    {}
func (*QueryGetCronsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fac12bc47b40dc1, []int{7}
}
func (m *QueryGetCronsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCronsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCronsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCronsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCronsResponse.Merge(m, src)
}
func (m *QueryGetCronsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCronsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCronsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCronsResponse proto.InternalMessageInfo

func (m *QueryGetCronsResponse) GetCrons() []Cron {
	if m != nil {
		return m.Crons
	}
	return nil
}

func (m *QueryGetCronsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCronsByOwnerRequest struct {
	OwnerAddress string             `protobuf:"bytes,1,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
	Pagination   *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetCronsByOwnerRequest) Reset()         { *m = QueryGetCronsByOwnerRequest{} }
func (m *QueryGetCronsByOwnerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCronsByOwnerRequest) ProtoMessage()    {}
func (*QueryGetCronsByOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fac12bc47b40dc1, []int{8}
}
func (m *QueryGetCronsByOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCronsByOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCronsByOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCronsByOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCronsByOwnerRequest.Merge(m, src)
}
func (m *QueryGetCronsByOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCronsByOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCronsByOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCronsByOwnerRequest proto.InternalMessageInfo

func (m *QueryGetCronsByOwnerRequest) GetOwnerAddress() string {
	if m != nil {
		return m.OwnerAddress
	}
	return ""
}

func (m *QueryGetCronsByOwnerRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCronsByOwnerResponse struct {
	Crons      []Cron              `protobuf:"bytes,1,rep,name=crons,proto3" json:"crons"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetCronsByOwnerResponse) Reset()         { *m = QueryGetCronsByOwnerResponse{} }
func (m *QueryGetCronsByOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCronsByOwnerResponse) ProtoMessage()    {}
func (*QueryGetCronsByOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fac12bc47b40dc1, []int{9}
}
func (m *QueryGetCronsByOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCronsByOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCronsByOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCronsByOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCronsByOwnerResponse.Merge(m, src)
}
func (m *QueryGetCronsByOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCronsByOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCronsByOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCronsByOwnerResponse proto.InternalMessageInfo

func (m *QueryGetCronsByOwnerResponse) GetCrons() []Cron {
	if m != nil {
		return m.Crons
	}
	return nil
}

func (m *QueryGetCronsByOwnerResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCronTransactionByNonceRequest struct {
	Nonce uint64 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *QueryGetCronTransactionByNonceRequest) Reset()         { *m = QueryGetCronTransactionByNonceRequest{} }
func (m *QueryGetCronTransactionByNonceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCronTransactionByNonceRequest) ProtoMessage()    {}
func (*QueryGetCronTransactionByNonceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fac12bc47b40dc1, []int{10}
}
func (m *QueryGetCronTransactionByNonceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCronTransactionByNonceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCronTransactionByNonceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCronTransactionByNonceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCronTransactionByNonceRequest.Merge(m, src)
}
func (m *QueryGetCronTransactionByNonceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCronTransactionByNonceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCronTransactionByNonceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCronTransactionByNonceRequest proto.InternalMessageInfo

func (m *QueryGetCronTransactionByNonceRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type QueryGetCronTransactionByNonceResponse struct {
	Transaction *CronTransactionRPC `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
}

func (m *QueryGetCronTransactionByNonceResponse) Reset() {
	*m = QueryGetCronTransactionByNonceResponse{}
}
func (m *QueryGetCronTransactionByNonceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCronTransactionByNonceResponse) ProtoMessage()    {}
func (*QueryGetCronTransactionByNonceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fac12bc47b40dc1, []int{11}
}
func (m *QueryGetCronTransactionByNonceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCronTransactionByNonceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCronTransactionByNonceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCronTransactionByNonceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCronTransactionByNonceResponse.Merge(m, src)
}
func (m *QueryGetCronTransactionByNonceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCronTransactionByNonceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCronTransactionByNonceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCronTransactionByNonceResponse proto.InternalMessageInfo

func (m *QueryGetCronTransactionByNonceResponse) GetTransaction() *CronTransactionRPC {
	if m != nil {
		return m.Transaction
	}
	return nil
}

type QueryGetCronTransactionByHashRequest struct {
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *QueryGetCronTransactionByHashRequest) Reset()         { *m = QueryGetCronTransactionByHashRequest{} }
func (m *QueryGetCronTransactionByHashRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCronTransactionByHashRequest) ProtoMessage()    {}
func (*QueryGetCronTransactionByHashRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fac12bc47b40dc1, []int{12}
}
func (m *QueryGetCronTransactionByHashRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCronTransactionByHashRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCronTransactionByHashRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCronTransactionByHashRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCronTransactionByHashRequest.Merge(m, src)
}
func (m *QueryGetCronTransactionByHashRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCronTransactionByHashRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCronTransactionByHashRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCronTransactionByHashRequest proto.InternalMessageInfo

func (m *QueryGetCronTransactionByHashRequest) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type QueryGetCronTransactionByHashResponse struct {
	Transaction *CronTransactionRPC `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
}

func (m *QueryGetCronTransactionByHashResponse) Reset()         { *m = QueryGetCronTransactionByHashResponse{} }
func (m *QueryGetCronTransactionByHashResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCronTransactionByHashResponse) ProtoMessage()    {}
func (*QueryGetCronTransactionByHashResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fac12bc47b40dc1, []int{13}
}
func (m *QueryGetCronTransactionByHashResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCronTransactionByHashResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCronTransactionByHashResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCronTransactionByHashResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCronTransactionByHashResponse.Merge(m, src)
}
func (m *QueryGetCronTransactionByHashResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCronTransactionByHashResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCronTransactionByHashResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCronTransactionByHashResponse proto.InternalMessageInfo

func (m *QueryGetCronTransactionByHashResponse) GetTransaction() *CronTransactionRPC {
	if m != nil {
		return m.Transaction
	}
	return nil
}

type QueryGetCronTransactionReceiptByNonceRequest struct {
	Nonce uint64 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *QueryGetCronTransactionReceiptByNonceRequest) Reset() {
	*m = QueryGetCronTransactionReceiptByNonceRequest{}
}
func (m *QueryGetCronTransactionReceiptByNonceRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetCronTransactionReceiptByNonceRequest) ProtoMessage() {}
func (*QueryGetCronTransactionReceiptByNonceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fac12bc47b40dc1, []int{14}
}
func (m *QueryGetCronTransactionReceiptByNonceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCronTransactionReceiptByNonceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCronTransactionReceiptByNonceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCronTransactionReceiptByNonceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCronTransactionReceiptByNonceRequest.Merge(m, src)
}
func (m *QueryGetCronTransactionReceiptByNonceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCronTransactionReceiptByNonceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCronTransactionReceiptByNonceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCronTransactionReceiptByNonceRequest proto.InternalMessageInfo

func (m *QueryGetCronTransactionReceiptByNonceRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type QueryGetCronTransactionReceiptByNonceResponse struct {
	Transaction *CronTransactionReceiptRPC `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
}

func (m *QueryGetCronTransactionReceiptByNonceResponse) Reset() {
	*m = QueryGetCronTransactionReceiptByNonceResponse{}
}
func (m *QueryGetCronTransactionReceiptByNonceResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetCronTransactionReceiptByNonceResponse) ProtoMessage() {}
func (*QueryGetCronTransactionReceiptByNonceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fac12bc47b40dc1, []int{15}
}
func (m *QueryGetCronTransactionReceiptByNonceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCronTransactionReceiptByNonceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCronTransactionReceiptByNonceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCronTransactionReceiptByNonceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCronTransactionReceiptByNonceResponse.Merge(m, src)
}
func (m *QueryGetCronTransactionReceiptByNonceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCronTransactionReceiptByNonceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCronTransactionReceiptByNonceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCronTransactionReceiptByNonceResponse proto.InternalMessageInfo

func (m *QueryGetCronTransactionReceiptByNonceResponse) GetTransaction() *CronTransactionReceiptRPC {
	if m != nil {
		return m.Transaction
	}
	return nil
}

type QueryGetCronTransactionReceiptLogsByBlockNumberRequest struct {
	BlockNumber uint64 `protobuf:"varint,1,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
}

func (m *QueryGetCronTransactionReceiptLogsByBlockNumberRequest) Reset() {
	*m = QueryGetCronTransactionReceiptLogsByBlockNumberRequest{}
}
func (m *QueryGetCronTransactionReceiptLogsByBlockNumberRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetCronTransactionReceiptLogsByBlockNumberRequest) ProtoMessage() {}
func (*QueryGetCronTransactionReceiptLogsByBlockNumberRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fac12bc47b40dc1, []int{16}
}
func (m *QueryGetCronTransactionReceiptLogsByBlockNumberRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCronTransactionReceiptLogsByBlockNumberRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCronTransactionReceiptLogsByBlockNumberRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCronTransactionReceiptLogsByBlockNumberRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCronTransactionReceiptLogsByBlockNumberRequest.Merge(m, src)
}
func (m *QueryGetCronTransactionReceiptLogsByBlockNumberRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCronTransactionReceiptLogsByBlockNumberRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCronTransactionReceiptLogsByBlockNumberRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCronTransactionReceiptLogsByBlockNumberRequest proto.InternalMessageInfo

func (m *QueryGetCronTransactionReceiptLogsByBlockNumberRequest) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

type QueryGetCronTransactionReceiptLogsByBlockNumberResponse struct {
	Logs []*types.Log `protobuf:"bytes,1,rep,name=logs,proto3" json:"logs,omitempty"`
}

func (m *QueryGetCronTransactionReceiptLogsByBlockNumberResponse) Reset() {
	*m = QueryGetCronTransactionReceiptLogsByBlockNumberResponse{}
}
func (m *QueryGetCronTransactionReceiptLogsByBlockNumberResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetCronTransactionReceiptLogsByBlockNumberResponse) ProtoMessage() {}
func (*QueryGetCronTransactionReceiptLogsByBlockNumberResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fac12bc47b40dc1, []int{17}
}
func (m *QueryGetCronTransactionReceiptLogsByBlockNumberResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCronTransactionReceiptLogsByBlockNumberResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCronTransactionReceiptLogsByBlockNumberResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCronTransactionReceiptLogsByBlockNumberResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCronTransactionReceiptLogsByBlockNumberResponse.Merge(m, src)
}
func (m *QueryGetCronTransactionReceiptLogsByBlockNumberResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCronTransactionReceiptLogsByBlockNumberResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCronTransactionReceiptLogsByBlockNumberResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCronTransactionReceiptLogsByBlockNumberResponse proto.InternalMessageInfo

func (m *QueryGetCronTransactionReceiptLogsByBlockNumberResponse) GetLogs() []*types.Log {
	if m != nil {
		return m.Logs
	}
	return nil
}

type QueryGetCronTransactionReceiptsByBlockNumberRequest struct {
	BlockNumber uint64 `protobuf:"varint,1,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
}

func (m *QueryGetCronTransactionReceiptsByBlockNumberRequest) Reset() {
	*m = QueryGetCronTransactionReceiptsByBlockNumberRequest{}
}
func (m *QueryGetCronTransactionReceiptsByBlockNumberRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetCronTransactionReceiptsByBlockNumberRequest) ProtoMessage() {}
func (*QueryGetCronTransactionReceiptsByBlockNumberRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fac12bc47b40dc1, []int{18}
}
func (m *QueryGetCronTransactionReceiptsByBlockNumberRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCronTransactionReceiptsByBlockNumberRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCronTransactionReceiptsByBlockNumberRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCronTransactionReceiptsByBlockNumberRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCronTransactionReceiptsByBlockNumberRequest.Merge(m, src)
}
func (m *QueryGetCronTransactionReceiptsByBlockNumberRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCronTransactionReceiptsByBlockNumberRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCronTransactionReceiptsByBlockNumberRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCronTransactionReceiptsByBlockNumberRequest proto.InternalMessageInfo

func (m *QueryGetCronTransactionReceiptsByBlockNumberRequest) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

type QueryGetCronTransactionReceiptsByBlockNumberResponse struct {
	Transactions []*CronTransactionReceiptRPC `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
}

func (m *QueryGetCronTransactionReceiptsByBlockNumberResponse) Reset() {
	*m = QueryGetCronTransactionReceiptsByBlockNumberResponse{}
}
func (m *QueryGetCronTransactionReceiptsByBlockNumberResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetCronTransactionReceiptsByBlockNumberResponse) ProtoMessage() {}
func (*QueryGetCronTransactionReceiptsByBlockNumberResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fac12bc47b40dc1, []int{19}
}
func (m *QueryGetCronTransactionReceiptsByBlockNumberResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCronTransactionReceiptsByBlockNumberResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCronTransactionReceiptsByBlockNumberResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCronTransactionReceiptsByBlockNumberResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCronTransactionReceiptsByBlockNumberResponse.Merge(m, src)
}
func (m *QueryGetCronTransactionReceiptsByBlockNumberResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCronTransactionReceiptsByBlockNumberResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCronTransactionReceiptsByBlockNumberResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCronTransactionReceiptsByBlockNumberResponse proto.InternalMessageInfo

func (m *QueryGetCronTransactionReceiptsByBlockNumberResponse) GetTransactions() []*CronTransactionReceiptRPC {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type QueryGetCronTransactionReceiptByHashRequest struct {
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *QueryGetCronTransactionReceiptByHashRequest) Reset() {
	*m = QueryGetCronTransactionReceiptByHashRequest{}
}
func (m *QueryGetCronTransactionReceiptByHashRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetCronTransactionReceiptByHashRequest) ProtoMessage() {}
func (*QueryGetCronTransactionReceiptByHashRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fac12bc47b40dc1, []int{20}
}
func (m *QueryGetCronTransactionReceiptByHashRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCronTransactionReceiptByHashRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCronTransactionReceiptByHashRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCronTransactionReceiptByHashRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCronTransactionReceiptByHashRequest.Merge(m, src)
}
func (m *QueryGetCronTransactionReceiptByHashRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCronTransactionReceiptByHashRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCronTransactionReceiptByHashRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCronTransactionReceiptByHashRequest proto.InternalMessageInfo

func (m *QueryGetCronTransactionReceiptByHashRequest) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type QueryGetCronTransactionReceiptByHashResponse struct {
	Transaction *CronTransactionReceiptRPC `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
}

func (m *QueryGetCronTransactionReceiptByHashResponse) Reset() {
	*m = QueryGetCronTransactionReceiptByHashResponse{}
}
func (m *QueryGetCronTransactionReceiptByHashResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetCronTransactionReceiptByHashResponse) ProtoMessage() {}
func (*QueryGetCronTransactionReceiptByHashResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fac12bc47b40dc1, []int{21}
}
func (m *QueryGetCronTransactionReceiptByHashResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCronTransactionReceiptByHashResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCronTransactionReceiptByHashResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCronTransactionReceiptByHashResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCronTransactionReceiptByHashResponse.Merge(m, src)
}
func (m *QueryGetCronTransactionReceiptByHashResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCronTransactionReceiptByHashResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCronTransactionReceiptByHashResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCronTransactionReceiptByHashResponse proto.InternalMessageInfo

func (m *QueryGetCronTransactionReceiptByHashResponse) GetTransaction() *CronTransactionReceiptRPC {
	if m != nil {
		return m.Transaction
	}
	return nil
}

type QueryGetAllCronTransactionReceiptsByPageAndSizeRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllCronTransactionReceiptsByPageAndSizeRequest) Reset() {
	*m = QueryGetAllCronTransactionReceiptsByPageAndSizeRequest{}
}
func (m *QueryGetAllCronTransactionReceiptsByPageAndSizeRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetAllCronTransactionReceiptsByPageAndSizeRequest) ProtoMessage() {}
func (*QueryGetAllCronTransactionReceiptsByPageAndSizeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fac12bc47b40dc1, []int{22}
}
func (m *QueryGetAllCronTransactionReceiptsByPageAndSizeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllCronTransactionReceiptsByPageAndSizeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllCronTransactionReceiptsByPageAndSizeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllCronTransactionReceiptsByPageAndSizeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllCronTransactionReceiptsByPageAndSizeRequest.Merge(m, src)
}
func (m *QueryGetAllCronTransactionReceiptsByPageAndSizeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllCronTransactionReceiptsByPageAndSizeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllCronTransactionReceiptsByPageAndSizeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllCronTransactionReceiptsByPageAndSizeRequest proto.InternalMessageInfo

func (m *QueryGetAllCronTransactionReceiptsByPageAndSizeRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetAllCronTransactionReceiptsByPageAndSizeResponse struct {
	Transactions []*CronTransactionReceiptRPC `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
	Pagination   *query.PageResponse          `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllCronTransactionReceiptsByPageAndSizeResponse) Reset() {
	*m = QueryGetAllCronTransactionReceiptsByPageAndSizeResponse{}
}
func (m *QueryGetAllCronTransactionReceiptsByPageAndSizeResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetAllCronTransactionReceiptsByPageAndSizeResponse) ProtoMessage() {}
func (*QueryGetAllCronTransactionReceiptsByPageAndSizeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fac12bc47b40dc1, []int{23}
}
func (m *QueryGetAllCronTransactionReceiptsByPageAndSizeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllCronTransactionReceiptsByPageAndSizeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllCronTransactionReceiptsByPageAndSizeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllCronTransactionReceiptsByPageAndSizeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllCronTransactionReceiptsByPageAndSizeResponse.Merge(m, src)
}
func (m *QueryGetAllCronTransactionReceiptsByPageAndSizeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllCronTransactionReceiptsByPageAndSizeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllCronTransactionReceiptsByPageAndSizeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllCronTransactionReceiptsByPageAndSizeResponse proto.InternalMessageInfo

func (m *QueryGetAllCronTransactionReceiptsByPageAndSizeResponse) GetTransactions() []*CronTransactionReceiptRPC {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *QueryGetAllCronTransactionReceiptsByPageAndSizeResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetAllCronTransactionsByPageAndSizeRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllCronTransactionsByPageAndSizeRequest) Reset() {
	*m = QueryGetAllCronTransactionsByPageAndSizeRequest{}
}
func (m *QueryGetAllCronTransactionsByPageAndSizeRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetAllCronTransactionsByPageAndSizeRequest) ProtoMessage() {}
func (*QueryGetAllCronTransactionsByPageAndSizeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fac12bc47b40dc1, []int{24}
}
func (m *QueryGetAllCronTransactionsByPageAndSizeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllCronTransactionsByPageAndSizeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllCronTransactionsByPageAndSizeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllCronTransactionsByPageAndSizeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllCronTransactionsByPageAndSizeRequest.Merge(m, src)
}
func (m *QueryGetAllCronTransactionsByPageAndSizeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllCronTransactionsByPageAndSizeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllCronTransactionsByPageAndSizeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllCronTransactionsByPageAndSizeRequest proto.InternalMessageInfo

func (m *QueryGetAllCronTransactionsByPageAndSizeRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetAllCronTransactionsByPageAndSizeResponse struct {
	Transactions []*CronTransactionRPC `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
	Pagination   *query.PageResponse   `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllCronTransactionsByPageAndSizeResponse) Reset() {
	*m = QueryGetAllCronTransactionsByPageAndSizeResponse{}
}
func (m *QueryGetAllCronTransactionsByPageAndSizeResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetAllCronTransactionsByPageAndSizeResponse) ProtoMessage() {}
func (*QueryGetAllCronTransactionsByPageAndSizeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fac12bc47b40dc1, []int{25}
}
func (m *QueryGetAllCronTransactionsByPageAndSizeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllCronTransactionsByPageAndSizeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllCronTransactionsByPageAndSizeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllCronTransactionsByPageAndSizeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllCronTransactionsByPageAndSizeResponse.Merge(m, src)
}
func (m *QueryGetAllCronTransactionsByPageAndSizeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllCronTransactionsByPageAndSizeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllCronTransactionsByPageAndSizeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllCronTransactionsByPageAndSizeResponse proto.InternalMessageInfo

func (m *QueryGetAllCronTransactionsByPageAndSizeResponse) GetTransactions() []*CronTransactionRPC {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *QueryGetAllCronTransactionsByPageAndSizeResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCronTransactionReceiptsByPageAndSizeRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Address    string             `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryGetCronTransactionReceiptsByPageAndSizeRequest) Reset() {
	*m = QueryGetCronTransactionReceiptsByPageAndSizeRequest{}
}
func (m *QueryGetCronTransactionReceiptsByPageAndSizeRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetCronTransactionReceiptsByPageAndSizeRequest) ProtoMessage() {}
func (*QueryGetCronTransactionReceiptsByPageAndSizeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fac12bc47b40dc1, []int{26}
}
func (m *QueryGetCronTransactionReceiptsByPageAndSizeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCronTransactionReceiptsByPageAndSizeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCronTransactionReceiptsByPageAndSizeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCronTransactionReceiptsByPageAndSizeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCronTransactionReceiptsByPageAndSizeRequest.Merge(m, src)
}
func (m *QueryGetCronTransactionReceiptsByPageAndSizeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCronTransactionReceiptsByPageAndSizeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCronTransactionReceiptsByPageAndSizeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCronTransactionReceiptsByPageAndSizeRequest proto.InternalMessageInfo

func (m *QueryGetCronTransactionReceiptsByPageAndSizeRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryGetCronTransactionReceiptsByPageAndSizeRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryGetCronTransactionReceiptsByPageAndSizeResponse struct {
	Transactions []*CronTransactionReceiptRPC `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
	Pagination   *query.PageResponse          `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetCronTransactionReceiptsByPageAndSizeResponse) Reset() {
	*m = QueryGetCronTransactionReceiptsByPageAndSizeResponse{}
}
func (m *QueryGetCronTransactionReceiptsByPageAndSizeResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetCronTransactionReceiptsByPageAndSizeResponse) ProtoMessage() {}
func (*QueryGetCronTransactionReceiptsByPageAndSizeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fac12bc47b40dc1, []int{27}
}
func (m *QueryGetCronTransactionReceiptsByPageAndSizeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCronTransactionReceiptsByPageAndSizeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCronTransactionReceiptsByPageAndSizeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCronTransactionReceiptsByPageAndSizeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCronTransactionReceiptsByPageAndSizeResponse.Merge(m, src)
}
func (m *QueryGetCronTransactionReceiptsByPageAndSizeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCronTransactionReceiptsByPageAndSizeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCronTransactionReceiptsByPageAndSizeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCronTransactionReceiptsByPageAndSizeResponse proto.InternalMessageInfo

func (m *QueryGetCronTransactionReceiptsByPageAndSizeResponse) GetTransactions() []*CronTransactionReceiptRPC {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *QueryGetCronTransactionReceiptsByPageAndSizeResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCronTransactionsByPageAndSizeRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Address    string             `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryGetCronTransactionsByPageAndSizeRequest) Reset() {
	*m = QueryGetCronTransactionsByPageAndSizeRequest{}
}
func (m *QueryGetCronTransactionsByPageAndSizeRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetCronTransactionsByPageAndSizeRequest) ProtoMessage() {}
func (*QueryGetCronTransactionsByPageAndSizeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fac12bc47b40dc1, []int{28}
}
func (m *QueryGetCronTransactionsByPageAndSizeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCronTransactionsByPageAndSizeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCronTransactionsByPageAndSizeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCronTransactionsByPageAndSizeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCronTransactionsByPageAndSizeRequest.Merge(m, src)
}
func (m *QueryGetCronTransactionsByPageAndSizeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCronTransactionsByPageAndSizeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCronTransactionsByPageAndSizeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCronTransactionsByPageAndSizeRequest proto.InternalMessageInfo

func (m *QueryGetCronTransactionsByPageAndSizeRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryGetCronTransactionsByPageAndSizeRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryGetCronTransactionsByPageAndSizeResponse struct {
	Transactions []*CronTransactionRPC `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
	Pagination   *query.PageResponse   `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetCronTransactionsByPageAndSizeResponse) Reset() {
	*m = QueryGetCronTransactionsByPageAndSizeResponse{}
}
func (m *QueryGetCronTransactionsByPageAndSizeResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetCronTransactionsByPageAndSizeResponse) ProtoMessage() {}
func (*QueryGetCronTransactionsByPageAndSizeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fac12bc47b40dc1, []int{29}
}
func (m *QueryGetCronTransactionsByPageAndSizeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCronTransactionsByPageAndSizeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCronTransactionsByPageAndSizeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCronTransactionsByPageAndSizeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCronTransactionsByPageAndSizeResponse.Merge(m, src)
}
func (m *QueryGetCronTransactionsByPageAndSizeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCronTransactionsByPageAndSizeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCronTransactionsByPageAndSizeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCronTransactionsByPageAndSizeResponse proto.InternalMessageInfo

func (m *QueryGetCronTransactionsByPageAndSizeResponse) GetTransactions() []*CronTransactionRPC {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *QueryGetCronTransactionsByPageAndSizeResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCronStatisticsRequest struct {
}

func (m *QueryGetCronStatisticsRequest) Reset()         { *m = QueryGetCronStatisticsRequest{} }
func (m *QueryGetCronStatisticsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCronStatisticsRequest) ProtoMessage()    {}
func (*QueryGetCronStatisticsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fac12bc47b40dc1, []int{30}
}
func (m *QueryGetCronStatisticsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCronStatisticsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCronStatisticsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCronStatisticsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCronStatisticsRequest.Merge(m, src)
}
func (m *QueryGetCronStatisticsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCronStatisticsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCronStatisticsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCronStatisticsRequest proto.InternalMessageInfo

type QueryGetCronStatisticsResponse struct {
	Statistics CronStatistics `protobuf:"bytes,1,opt,name=statistics,proto3" json:"statistics"`
}

func (m *QueryGetCronStatisticsResponse) Reset()         { *m = QueryGetCronStatisticsResponse{} }
func (m *QueryGetCronStatisticsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCronStatisticsResponse) ProtoMessage()    {}
func (*QueryGetCronStatisticsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fac12bc47b40dc1, []int{31}
}
func (m *QueryGetCronStatisticsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCronStatisticsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCronStatisticsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCronStatisticsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCronStatisticsResponse.Merge(m, src)
}
func (m *QueryGetCronStatisticsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCronStatisticsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCronStatisticsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCronStatisticsResponse proto.InternalMessageInfo

func (m *QueryGetCronStatisticsResponse) GetStatistics() CronStatistics {
	if m != nil {
		return m.Statistics
	}
	return CronStatistics{}
}

type QueryGetCronTransactionReceiptsHashsByBlockNumberRequest struct {
	BlockNumber uint64 `protobuf:"varint,1,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
}

func (m *QueryGetCronTransactionReceiptsHashsByBlockNumberRequest) Reset() {
	*m = QueryGetCronTransactionReceiptsHashsByBlockNumberRequest{}
}
func (m *QueryGetCronTransactionReceiptsHashsByBlockNumberRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetCronTransactionReceiptsHashsByBlockNumberRequest) ProtoMessage() {}
func (*QueryGetCronTransactionReceiptsHashsByBlockNumberRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fac12bc47b40dc1, []int{32}
}
func (m *QueryGetCronTransactionReceiptsHashsByBlockNumberRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCronTransactionReceiptsHashsByBlockNumberRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCronTransactionReceiptsHashsByBlockNumberRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCronTransactionReceiptsHashsByBlockNumberRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCronTransactionReceiptsHashsByBlockNumberRequest.Merge(m, src)
}
func (m *QueryGetCronTransactionReceiptsHashsByBlockNumberRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCronTransactionReceiptsHashsByBlockNumberRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCronTransactionReceiptsHashsByBlockNumberRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCronTransactionReceiptsHashsByBlockNumberRequest proto.InternalMessageInfo

func (m *QueryGetCronTransactionReceiptsHashsByBlockNumberRequest) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

type QueryGetCronTransactionReceiptsHashsByBlockNumberResponse struct {
	Hashs []string `protobuf:"bytes,1,rep,name=hashs,proto3" json:"hashs,omitempty"`
}

func (m *QueryGetCronTransactionReceiptsHashsByBlockNumberResponse) Reset() {
	*m = QueryGetCronTransactionReceiptsHashsByBlockNumberResponse{}
}
func (m *QueryGetCronTransactionReceiptsHashsByBlockNumberResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetCronTransactionReceiptsHashsByBlockNumberResponse) ProtoMessage() {}
func (*QueryGetCronTransactionReceiptsHashsByBlockNumberResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fac12bc47b40dc1, []int{33}
}
func (m *QueryGetCronTransactionReceiptsHashsByBlockNumberResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCronTransactionReceiptsHashsByBlockNumberResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCronTransactionReceiptsHashsByBlockNumberResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCronTransactionReceiptsHashsByBlockNumberResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCronTransactionReceiptsHashsByBlockNumberResponse.Merge(m, src)
}
func (m *QueryGetCronTransactionReceiptsHashsByBlockNumberResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCronTransactionReceiptsHashsByBlockNumberResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCronTransactionReceiptsHashsByBlockNumberResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCronTransactionReceiptsHashsByBlockNumberResponse proto.InternalMessageInfo

func (m *QueryGetCronTransactionReceiptsHashsByBlockNumberResponse) GetHashs() []string {
	if m != nil {
		return m.Hashs
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "helios.chronos.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "helios.chronos.v1.QueryParamsResponse")
	proto.RegisterType((*QueryGetCronRequest)(nil), "helios.chronos.v1.QueryGetCronRequest")
	proto.RegisterType((*QueryGetCronResponse)(nil), "helios.chronos.v1.QueryGetCronResponse")
	proto.RegisterType((*QueryGetCronByAddressRequest)(nil), "helios.chronos.v1.QueryGetCronByAddressRequest")
	proto.RegisterType((*QueryGetCronByAddressResponse)(nil), "helios.chronos.v1.QueryGetCronByAddressResponse")
	proto.RegisterType((*QueryGetCronsRequest)(nil), "helios.chronos.v1.QueryGetCronsRequest")
	proto.RegisterType((*QueryGetCronsResponse)(nil), "helios.chronos.v1.QueryGetCronsResponse")
	proto.RegisterType((*QueryGetCronsByOwnerRequest)(nil), "helios.chronos.v1.QueryGetCronsByOwnerRequest")
	proto.RegisterType((*QueryGetCronsByOwnerResponse)(nil), "helios.chronos.v1.QueryGetCronsByOwnerResponse")
	proto.RegisterType((*QueryGetCronTransactionByNonceRequest)(nil), "helios.chronos.v1.QueryGetCronTransactionByNonceRequest")
	proto.RegisterType((*QueryGetCronTransactionByNonceResponse)(nil), "helios.chronos.v1.QueryGetCronTransactionByNonceResponse")
	proto.RegisterType((*QueryGetCronTransactionByHashRequest)(nil), "helios.chronos.v1.QueryGetCronTransactionByHashRequest")
	proto.RegisterType((*QueryGetCronTransactionByHashResponse)(nil), "helios.chronos.v1.QueryGetCronTransactionByHashResponse")
	proto.RegisterType((*QueryGetCronTransactionReceiptByNonceRequest)(nil), "helios.chronos.v1.QueryGetCronTransactionReceiptByNonceRequest")
	proto.RegisterType((*QueryGetCronTransactionReceiptByNonceResponse)(nil), "helios.chronos.v1.QueryGetCronTransactionReceiptByNonceResponse")
	proto.RegisterType((*QueryGetCronTransactionReceiptLogsByBlockNumberRequest)(nil), "helios.chronos.v1.QueryGetCronTransactionReceiptLogsByBlockNumberRequest")
	proto.RegisterType((*QueryGetCronTransactionReceiptLogsByBlockNumberResponse)(nil), "helios.chronos.v1.QueryGetCronTransactionReceiptLogsByBlockNumberResponse")
	proto.RegisterType((*QueryGetCronTransactionReceiptsByBlockNumberRequest)(nil), "helios.chronos.v1.QueryGetCronTransactionReceiptsByBlockNumberRequest")
	proto.RegisterType((*QueryGetCronTransactionReceiptsByBlockNumberResponse)(nil), "helios.chronos.v1.QueryGetCronTransactionReceiptsByBlockNumberResponse")
	proto.RegisterType((*QueryGetCronTransactionReceiptByHashRequest)(nil), "helios.chronos.v1.QueryGetCronTransactionReceiptByHashRequest")
	proto.RegisterType((*QueryGetCronTransactionReceiptByHashResponse)(nil), "helios.chronos.v1.QueryGetCronTransactionReceiptByHashResponse")
	proto.RegisterType((*QueryGetAllCronTransactionReceiptsByPageAndSizeRequest)(nil), "helios.chronos.v1.QueryGetAllCronTransactionReceiptsByPageAndSizeRequest")
	proto.RegisterType((*QueryGetAllCronTransactionReceiptsByPageAndSizeResponse)(nil), "helios.chronos.v1.QueryGetAllCronTransactionReceiptsByPageAndSizeResponse")
	proto.RegisterType((*QueryGetAllCronTransactionsByPageAndSizeRequest)(nil), "helios.chronos.v1.QueryGetAllCronTransactionsByPageAndSizeRequest")
	proto.RegisterType((*QueryGetAllCronTransactionsByPageAndSizeResponse)(nil), "helios.chronos.v1.QueryGetAllCronTransactionsByPageAndSizeResponse")
	proto.RegisterType((*QueryGetCronTransactionReceiptsByPageAndSizeRequest)(nil), "helios.chronos.v1.QueryGetCronTransactionReceiptsByPageAndSizeRequest")
	proto.RegisterType((*QueryGetCronTransactionReceiptsByPageAndSizeResponse)(nil), "helios.chronos.v1.QueryGetCronTransactionReceiptsByPageAndSizeResponse")
	proto.RegisterType((*QueryGetCronTransactionsByPageAndSizeRequest)(nil), "helios.chronos.v1.QueryGetCronTransactionsByPageAndSizeRequest")
	proto.RegisterType((*QueryGetCronTransactionsByPageAndSizeResponse)(nil), "helios.chronos.v1.QueryGetCronTransactionsByPageAndSizeResponse")
	proto.RegisterType((*QueryGetCronStatisticsRequest)(nil), "helios.chronos.v1.QueryGetCronStatisticsRequest")
	proto.RegisterType((*QueryGetCronStatisticsResponse)(nil), "helios.chronos.v1.QueryGetCronStatisticsResponse")
	proto.RegisterType((*QueryGetCronTransactionReceiptsHashsByBlockNumberRequest)(nil), "helios.chronos.v1.QueryGetCronTransactionReceiptsHashsByBlockNumberRequest")
	proto.RegisterType((*QueryGetCronTransactionReceiptsHashsByBlockNumberResponse)(nil), "helios.chronos.v1.QueryGetCronTransactionReceiptsHashsByBlockNumberResponse")
}

func init() { proto.RegisterFile("helios/chronos/v1/query.proto", fileDescriptor_3fac12bc47b40dc1) }

var fileDescriptor_3fac12bc47b40dc1 = []byte{
	// 1460 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x59, 0xdf, 0x6f, 0xdb, 0xd4,
	0x17, 0xef, 0xcd, 0xb7, 0xdd, 0x57, 0xbb, 0xeb, 0x90, 0x38, 0x74, 0x3f, 0xf0, 0xba, 0x8c, 0x99,
	0xad, 0x2b, 0xac, 0xf5, 0x5d, 0x16, 0x4a, 0x5b, 0xaa, 0xb2, 0x25, 0x45, 0x0b, 0x85, 0xaa, 0x74,
	0x19, 0x0f, 0x08, 0x04, 0x93, 0x93, 0x98, 0xc4, 0x22, 0xb1, 0x53, 0xdb, 0xcd, 0x08, 0x51, 0xf8,
	0x31, 0x81, 0x40, 0x3c, 0x4d, 0x42, 0x68, 0x2f, 0xbc, 0xf0, 0x8a, 0xf8, 0x2f, 0x90, 0xd0, 0x78,
	0x41, 0x43, 0xf0, 0x00, 0x2f, 0x68, 0x6a, 0x41, 0xfc, 0x07, 0x3c, 0x23, 0x5f, 0xdf, 0x24, 0xbe,
	0x8e, 0x1d, 0xdb, 0x69, 0x2a, 0xd8, 0xcb, 0x66, 0xfb, 0xde, 0x73, 0xce, 0xe7, 0x73, 0xee, 0xb9,
	0xe7, 0xde, 0x4f, 0x8a, 0x4f, 0x57, 0x94, 0xaa, 0xaa, 0x9b, 0xa4, 0x58, 0x31, 0x74, 0x4d, 0x37,
	0x49, 0x23, 0x45, 0xb6, 0x77, 0x14, 0xa3, 0x29, 0xd5, 0x0d, 0xdd, 0xd2, 0xe1, 0x51, 0x67, 0x58,
	0x62, 0xc3, 0x52, 0x23, 0x25, 0x3c, 0x5d, 0xd4, 0xcd, 0x9a, 0x6e, 0x92, 0x82, 0x6c, 0x2a, 0xce,
	0x5c, 0xd2, 0x48, 0x15, 0x14, 0x4b, 0x4e, 0x91, 0xba, 0x5c, 0x56, 0x35, 0xd9, 0x52, 0x75, 0xcd,
	0x31, 0x17, 0xa6, 0xca, 0x7a, 0x59, 0xa7, 0x8f, 0xc4, 0x7e, 0x62, 0x5f, 0xa7, 0xcb, 0xba, 0x5e,
	0xae, 0x2a, 0x44, 0xae, 0xab, 0x44, 0xd6, 0x34, 0xdd, 0xa2, 0x26, 0x26, 0x1b, 0x4d, 0xf6, 0x23,
	0xaa, 0xcb, 0x86, 0x5c, 0xeb, 0x8c, 0x4f, 0xf7, 0x8f, 0x17, 0x8d, 0x6e, 0x44, 0x1f, 0x3e, 0x56,
	0xb3, 0xae, 0x98, 0x9e, 0xd0, 0xf4, 0xad, 0xb0, 0xf3, 0x36, 0x31, 0x2d, 0x63, 0xa7, 0x68, 0xb1,
	0x51, 0x41, 0xb1, 0x2a, 0x8a, 0x51, 0x53, 0x35, 0x8b, 0x28, 0x8d, 0x9a, 0x6d, 0xab, 0x34, 0x6a,
	0xce, 0x98, 0x38, 0x85, 0xe1, 0xba, 0x4d, 0x76, 0x8b, 0x62, 0xc9, 0x2b, 0xdb, 0x3b, 0x8a, 0x69,
	0x89, 0x9b, 0xf8, 0x31, 0xee, 0xab, 0x59, 0xd7, 0x35, 0x53, 0x81, 0x45, 0x7c, 0xc8, 0xc1, 0x7c,
	0x12, 0x3d, 0x81, 0x66, 0x8f, 0x5c, 0x7e, 0x5c, 0xea, 0xcb, 0xa3, 0xe4, 0x98, 0x64, 0xc7, 0xef,
	0xfd, 0x7e, 0x66, 0x2c, 0xcf, 0xa6, 0x8b, 0xe7, 0x99, 0xbf, 0x9c, 0x62, 0xad, 0x19, 0xba, 0xc6,
	0xc2, 0xc0, 0x23, 0x38, 0xa1, 0x96, 0xa8, 0xaf, 0xf1, 0x7c, 0x42, 0x2d, 0x89, 0xeb, 0x78, 0x8a,
	0x9f, 0xc6, 0xe2, 0xa6, 0xf0, 0xb8, 0x9d, 0x0b, 0x16, 0xf5, 0x84, 0x4f, 0x54, 0x7b, 0x3a, 0x8b,
	0x49, 0xa7, 0x8a, 0x4b, 0x78, 0xda, 0xed, 0x2a, 0xdb, 0xcc, 0x94, 0x4a, 0x86, 0x62, 0x76, 0x18,
	0xc2, 0x49, 0xfc, 0x7f, 0xd9, 0xf9, 0x42, 0xbd, 0x1e, 0xce, 0x77, 0x5e, 0xc5, 0x3c, 0x3e, 0x1d,
	0x60, 0x39, 0x3c, 0x9a, 0xb7, 0x78, 0x62, 0x5d, 0x14, 0xd7, 0x30, 0xee, 0x15, 0x17, 0x73, 0x38,
	0x23, 0x39, 0x95, 0x28, 0xd9, 0x95, 0x28, 0x39, 0x55, 0xcb, 0x2a, 0x51, 0xda, 0x92, 0xcb, 0x0a,
	0xb3, 0xcd, 0xbb, 0x2c, 0xc5, 0x2f, 0x11, 0x3e, 0xe6, 0x09, 0xc0, 0xc0, 0xa6, 0xf1, 0x84, 0x8d,
	0xc0, 0x66, 0xf9, 0xbf, 0x70, 0xb4, 0xce, 0x5c, 0xc8, 0x71, 0xb0, 0x12, 0x14, 0xd6, 0x85, 0x50,
	0x58, 0x4e, 0x44, 0x0e, 0xd7, 0xe7, 0x08, 0x9f, 0xe2, 0x70, 0x65, 0x9b, 0xaf, 0xdc, 0xd2, 0x14,
	0xa3, 0xc3, 0xff, 0x49, 0x7c, 0x54, 0xb7, 0xdf, 0x6f, 0xf2, 0x6b, 0x31, 0x49, 0x3f, 0xb2, 0xbc,
	0x7b, 0x92, 0x94, 0x18, 0x3a, 0x49, 0x5f, 0x21, 0xbe, 0x26, 0x7a, 0x60, 0xfe, 0x13, 0xb9, 0x5a,
	0xc5, 0xe7, 0xdd, 0xe8, 0x5e, 0x35, 0x64, 0xcd, 0x94, 0x8b, 0xf6, 0x50, 0xb6, 0xb9, 0xa9, 0x6b,
	0xc5, 0x0e, 0x27, 0x98, 0xc2, 0x13, 0x9a, 0xfd, 0xce, 0x36, 0x8e, 0xf3, 0x22, 0x6e, 0xe3, 0x99,
	0x30, 0x73, 0x46, 0x33, 0x87, 0x8f, 0x58, 0xbd, 0x51, 0x56, 0x75, 0xe7, 0x03, 0xc8, 0xba, 0xfc,
	0xe4, 0xb7, 0xd6, 0xf2, 0x6e, 0x4b, 0xf1, 0x39, 0x7c, 0x2e, 0x30, 0xe4, 0x8b, 0xb2, 0x59, 0xe9,
	0x00, 0x06, 0x3c, 0x5e, 0x91, 0xcd, 0x0a, 0x5b, 0x5c, 0xfa, 0x2c, 0xd6, 0x07, 0xb0, 0x75, 0x6c,
	0x47, 0x8d, 0xf6, 0x05, 0x3c, 0x17, 0x10, 0x31, 0xaf, 0x14, 0x15, 0xb5, 0x6e, 0x45, 0x4a, 0xf3,
	0x07, 0x78, 0x3e, 0xa2, 0x17, 0x86, 0x7f, 0xd3, 0x0f, 0xff, 0x5c, 0x04, 0xfc, 0x8e, 0xbb, 0x3e,
	0x1a, 0x6f, 0xe0, 0x67, 0x07, 0x03, 0xd8, 0xd0, 0xcb, 0x66, 0xb6, 0x99, 0xad, 0xea, 0xc5, 0x77,
	0x36, 0x77, 0x6a, 0x85, 0xde, 0x66, 0x3b, 0x8b, 0x27, 0x0b, 0xf6, 0xd7, 0x9b, 0x1a, 0xfd, 0xcc,
	0x78, 0x1d, 0x29, 0xf4, 0x66, 0x8a, 0x25, 0xbc, 0x18, 0xdb, 0x39, 0xe3, 0xf9, 0x14, 0x1e, 0xaf,
	0xea, 0xe5, 0xce, 0xde, 0x39, 0x26, 0x75, 0xcf, 0x1c, 0xc9, 0x3e, 0x6c, 0x1a, 0x29, 0x69, 0x43,
	0x2f, 0xe7, 0xe9, 0x14, 0xf1, 0x35, 0x9c, 0x1e, 0x1c, 0x65, 0x68, 0xfc, 0x9f, 0x21, 0xfc, 0x4c,
	0x3c, 0xd7, 0x0c, 0xfd, 0x16, 0x9e, 0x74, 0x25, 0xb9, 0xc3, 0x22, 0xde, 0x32, 0x71, 0x1e, 0xc4,
	0x0c, 0xbe, 0x18, 0x56, 0x28, 0x61, 0x7b, 0xe4, 0xfd, 0xf0, 0x8a, 0xe5, 0xb6, 0xca, 0xa8, 0x4b,
	0xed, 0x43, 0xd4, 0xab, 0xb5, 0x4c, 0xb5, 0x1a, 0x98, 0x50, 0xbb, 0xa5, 0x65, 0xb4, 0xd2, 0x0d,
	0xf5, 0x3d, 0x65, 0xd4, 0x07, 0xdb, 0x2f, 0xa8, 0x57, 0x91, 0x91, 0x21, 0x1c, 0xd4, 0x9a, 0x8e,
	0xae, 0xd7, 0x37, 0x31, 0x09, 0x66, 0x75, 0xb0, 0x19, 0xfd, 0x1e, 0xe1, 0x4b, 0xd1, 0x63, 0xb3,
	0x54, 0xae, 0xfb, 0xa6, 0x32, 0x62, 0x17, 0x3e, 0xa0, 0x1c, 0xde, 0x45, 0x11, 0xda, 0xc8, 0xc1,
	0x25, 0xd2, 0x7d, 0x83, 0x4c, 0xf0, 0x37, 0xc8, 0x9f, 0xa2, 0x74, 0xa1, 0x87, 0xac, 0x62, 0xef,
	0xa0, 0xc0, 0x66, 0xf4, 0x6f, 0xa5, 0xf9, 0x3b, 0x14, 0x78, 0x16, 0x3f, 0x44, 0x65, 0x7c, 0x86,
	0x97, 0x1b, 0x37, 0x6c, 0xd5, 0x68, 0x5a, 0x6a, 0xb1, 0xab, 0xc5, 0x54, 0x9c, 0x0c, 0x9a, 0xd0,
	0xbd, 0x22, 0x61, 0xb3, 0xfb, 0x95, 0xa5, 0xfa, 0x6c, 0x00, 0xa9, 0x9e, 0x39, 0xbb, 0xc6, 0xba,
	0x4c, 0xc5, 0x37, 0xf1, 0x52, 0x48, 0xdd, 0xda, 0xe7, 0xcd, 0xd0, 0xa7, 0xf3, 0x75, 0xbc, 0x3c,
	0x84, 0x7b, 0x46, 0x72, 0x0a, 0x4f, 0xd8, 0x87, 0xa2, 0xb3, 0x68, 0x87, 0xf3, 0xce, 0xcb, 0xe5,
	0xbd, 0x53, 0x78, 0x82, 0xfa, 0x84, 0x5b, 0xf8, 0x90, 0x23, 0x3d, 0xc1, 0x6f, 0x3d, 0xfb, 0x35,
	0xae, 0x30, 0x13, 0x36, 0xcd, 0x09, 0x2c, 0x26, 0x6f, 0xff, 0xfc, 0xc7, 0x17, 0x89, 0x93, 0x70,
	0x9c, 0x78, 0x34, 0xb8, 0xa3, 0x6d, 0xe1, 0x13, 0x84, 0x27, 0xdd, 0xb4, 0x20, 0xd0, 0x31, 0xaf,
	0x7e, 0x85, 0x0b, 0xa1, 0xf3, 0x18, 0x82, 0x73, 0x14, 0x41, 0x12, 0xa6, 0xbd, 0x08, 0x6c, 0x05,
	0x42, 0xd4, 0x12, 0x69, 0xa9, 0xa5, 0x36, 0x7c, 0xe3, 0xd1, 0x80, 0x5d, 0xe1, 0x0a, 0x24, 0x24,
	0x90, 0x57, 0x1c, 0x0b, 0x97, 0xa2, 0x1b, 0x30, 0x88, 0x12, 0x85, 0x38, 0x0b, 0x33, 0xbe, 0x10,
	0xd9, 0x8e, 0x25, 0x2d, 0xf6, 0xd0, 0x86, 0x8f, 0x10, 0x3e, 0xca, 0x69, 0x31, 0x08, 0xcb, 0x46,
	0x17, 0xdc, 0x6c, 0xf8, 0x44, 0x06, 0xea, 0x34, 0x05, 0x75, 0x02, 0x8e, 0xf9, 0x81, 0x32, 0xe1,
	0x5b, 0xe4, 0x51, 0xe5, 0x4c, 0x0f, 0x82, 0x14, 0x16, 0x81, 0x57, 0xb1, 0x02, 0x89, 0x3c, 0x9f,
	0x01, 0x4b, 0x53, 0x60, 0xf3, 0x70, 0xd1, 0x17, 0x18, 0xa1, 0xea, 0x97, 0xb4, 0x38, 0x65, 0xdc,
	0x86, 0x1f, 0x11, 0xdf, 0x08, 0xfa, 0x15, 0x1e, 0x2c, 0x85, 0x00, 0x09, 0xd4, 0x94, 0xc2, 0xf2,
	0x10, 0x96, 0x8c, 0xcc, 0x22, 0x25, 0x93, 0x02, 0xe2, 0x4f, 0xc6, 0xd5, 0x35, 0x09, 0x95, 0x50,
	0xa4, 0x45, 0xff, 0x6b, 0xc3, 0x0f, 0x88, 0x6f, 0x7d, 0x7d, 0x1a, 0x10, 0x16, 0xe3, 0xa0, 0x72,
	0xdd, 0xa6, 0x85, 0xa5, 0xf8, 0x86, 0x8c, 0xcd, 0x02, 0x65, 0x43, 0x60, 0x3e, 0x9c, 0x8d, 0xdd,
	0x81, 0x48, 0xcb, 0xfe, 0xb7, 0x0d, 0x9f, 0x26, 0x7a, 0x37, 0xba, 0x88, 0xca, 0x09, 0xd6, 0xa3,
	0x83, 0x0c, 0x91, 0x76, 0xc2, 0x4b, 0xa3, 0x70, 0xc5, 0x32, 0xb0, 0x4a, 0x33, 0xb0, 0x08, 0x0b,
	0xde, 0x0c, 0xd0, 0x56, 0xce, 0x65, 0xc0, 0x56, 0x73, 0xa4, 0xe5, 0x6e, 0xfb, 0x6d, 0xb8, 0x9d,
	0x08, 0x53, 0x2d, 0x9e, 0x34, 0x5c, 0x8b, 0x8d, 0xdd, 0x3f, 0x07, 0xb9, 0x7d, 0xfb, 0x61, 0x09,
	0xc8, 0xd0, 0x04, 0xac, 0xc0, 0x72, 0x78, 0x02, 0x0c, 0xe6, 0xc8, 0x9b, 0x84, 0x07, 0x28, 0xf0,
	0xa7, 0x11, 0x4e, 0xba, 0xc1, 0xf3, 0xb1, 0x41, 0xf3, 0x85, 0x7e, 0x65, 0x68, 0xfb, 0xb0, 0xdd,
	0xeb, 0x43, 0x93, 0xab, 0xf8, 0x3f, 0x51, 0xe0, 0x2f, 0x38, 0xfc, 0x2f, 0x21, 0x30, 0x0c, 0x46,
	0xae, 0x39, 0x5d, 0x1d, 0xde, 0x01, 0x63, 0xb9, 0x4c, 0x59, 0xa6, 0x21, 0x15, 0x85, 0x25, 0xdf,
	0xa5, 0xfe, 0x46, 0x83, 0xb4, 0x9a, 0xef, 0x7d, 0x7e, 0xe0, 0xce, 0x8e, 0x27, 0xa4, 0x07, 0xee,
	0xec, 0x98, 0x82, 0x58, 0x9c, 0xa3, 0x59, 0x98, 0x81, 0x73, 0x11, 0xb2, 0x60, 0xc2, 0x6f, 0x08,
	0xcf, 0x46, 0x15, 0x8a, 0x90, 0x8d, 0x05, 0xd3, 0x9f, 0xea, 0xda, 0xbe, 0x7c, 0x84, 0xdd, 0x95,
	0xb8, 0xdb, 0xfb, 0xc7, 0x51, 0x9a, 0x94, 0x9b, 0xdf, 0x50, 0x4d, 0xca, 0x87, 0x63, 0x6e, 0xdf,
	0x7e, 0x18, 0xcf, 0x35, 0xca, 0x73, 0x15, 0x56, 0xa2, 0x5d, 0xb8, 0xfc, 0x97, 0xf8, 0xaf, 0xe0,
	0x3d, 0xec, 0xe1, 0x1f, 0x63, 0x0f, 0xfb, 0x13, 0xbf, 0x3a, 0xbc, 0x03, 0xc6, 0x78, 0x85, 0x32,
	0x5e, 0x80, 0x74, 0x7c, 0xc6, 0x26, 0x7c, 0x8d, 0xf0, 0x71, 0x7f, 0x15, 0x05, 0x61, 0x97, 0xdd,
	0x3e, 0x45, 0x26, 0xa4, 0x62, 0x58, 0x30, 0xf0, 0x22, 0x05, 0x3f, 0x0d, 0x82, 0x17, 0x7c, 0x4f,
	0x7d, 0xc1, 0xdd, 0x04, 0x4e, 0xc5, 0xd6, 0x47, 0xf0, 0x72, 0xfc, 0x8a, 0x0a, 0x14, 0x71, 0xc2,
	0xc6, 0x68, 0x9c, 0x31, 0xd2, 0x39, 0x4a, 0x3a, 0x03, 0x57, 0x62, 0x1c, 0xa4, 0x54, 0xd6, 0x79,
	0x8e, 0xd3, 0x6c, 0xf6, 0xde, 0x6e, 0x12, 0xdd, 0xdf, 0x4d, 0xa2, 0x07, 0xbb, 0x49, 0x74, 0x67,
	0x2f, 0x39, 0x76, 0x7f, 0x2f, 0x39, 0xf6, 0xeb, 0x5e, 0x72, 0xec, 0xf5, 0x59, 0xc7, 0xf3, 0x7c,
	0x51, 0x37, 0x14, 0xd2, 0x79, 0xae, 0xc8, 0xaa, 0x46, 0xde, 0xed, 0xed, 0xfc, 0x66, 0x5d, 0x31,
	0x0b, 0x87, 0xe8, 0xdf, 0x3b, 0xd3, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x36, 0x20, 0xf1, 0x7b,
	0x1a, 0x1e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	QueryGetCron(ctx context.Context, in *QueryGetCronRequest, opts ...grpc.CallOption) (*QueryGetCronResponse, error)
	QueryGetCronByAddress(ctx context.Context, in *QueryGetCronByAddressRequest, opts ...grpc.CallOption) (*QueryGetCronByAddressResponse, error)
	QueryGetCrons(ctx context.Context, in *QueryGetCronsRequest, opts ...grpc.CallOption) (*QueryGetCronsResponse, error)
	QueryGetCronsByOwner(ctx context.Context, in *QueryGetCronsByOwnerRequest, opts ...grpc.CallOption) (*QueryGetCronsByOwnerResponse, error)
	QueryGetCronTransactionByNonce(ctx context.Context, in *QueryGetCronTransactionByNonceRequest, opts ...grpc.CallOption) (*QueryGetCronTransactionByNonceResponse, error)
	QueryGetCronTransactionByHash(ctx context.Context, in *QueryGetCronTransactionByHashRequest, opts ...grpc.CallOption) (*QueryGetCronTransactionByHashResponse, error)
	QueryGetCronTransactionReceiptLogsByBlockNumber(ctx context.Context, in *QueryGetCronTransactionReceiptLogsByBlockNumberRequest, opts ...grpc.CallOption) (*QueryGetCronTransactionReceiptLogsByBlockNumberResponse, error)
	QueryGetCronTransactionReceiptsByBlockNumber(ctx context.Context, in *QueryGetCronTransactionReceiptsByBlockNumberRequest, opts ...grpc.CallOption) (*QueryGetCronTransactionReceiptsByBlockNumberResponse, error)
	QueryGetCronTransactionReceiptByHash(ctx context.Context, in *QueryGetCronTransactionReceiptByHashRequest, opts ...grpc.CallOption) (*QueryGetCronTransactionReceiptByHashResponse, error)
	QueryGetCronTransactionReceiptByNonce(ctx context.Context, in *QueryGetCronTransactionReceiptByNonceRequest, opts ...grpc.CallOption) (*QueryGetCronTransactionReceiptByNonceResponse, error)
	QueryGetAllCronTransactionReceiptsByPageAndSize(ctx context.Context, in *QueryGetAllCronTransactionReceiptsByPageAndSizeRequest, opts ...grpc.CallOption) (*QueryGetAllCronTransactionReceiptsByPageAndSizeResponse, error)
	QueryGetAllCronTransactionsByPageAndSize(ctx context.Context, in *QueryGetAllCronTransactionsByPageAndSizeRequest, opts ...grpc.CallOption) (*QueryGetAllCronTransactionsByPageAndSizeResponse, error)
	QueryGetCronTransactionReceiptsByPageAndSize(ctx context.Context, in *QueryGetCronTransactionReceiptsByPageAndSizeRequest, opts ...grpc.CallOption) (*QueryGetCronTransactionReceiptsByPageAndSizeResponse, error)
	QueryGetCronTransactionsByPageAndSize(ctx context.Context, in *QueryGetCronTransactionsByPageAndSizeRequest, opts ...grpc.CallOption) (*QueryGetCronTransactionsByPageAndSizeResponse, error)
	QueryGetCronStatistics(ctx context.Context, in *QueryGetCronStatisticsRequest, opts ...grpc.CallOption) (*QueryGetCronStatisticsResponse, error)
	QueryGetCronTransactionReceiptsHashsByBlockNumber(ctx context.Context, in *QueryGetCronTransactionReceiptsHashsByBlockNumberRequest, opts ...grpc.CallOption) (*QueryGetCronTransactionReceiptsHashsByBlockNumberResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/helios.chronos.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryGetCron(ctx context.Context, in *QueryGetCronRequest, opts ...grpc.CallOption) (*QueryGetCronResponse, error) {
	out := new(QueryGetCronResponse)
	err := c.cc.Invoke(ctx, "/helios.chronos.v1.Query/QueryGetCron", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryGetCronByAddress(ctx context.Context, in *QueryGetCronByAddressRequest, opts ...grpc.CallOption) (*QueryGetCronByAddressResponse, error) {
	out := new(QueryGetCronByAddressResponse)
	err := c.cc.Invoke(ctx, "/helios.chronos.v1.Query/QueryGetCronByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryGetCrons(ctx context.Context, in *QueryGetCronsRequest, opts ...grpc.CallOption) (*QueryGetCronsResponse, error) {
	out := new(QueryGetCronsResponse)
	err := c.cc.Invoke(ctx, "/helios.chronos.v1.Query/QueryGetCrons", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryGetCronsByOwner(ctx context.Context, in *QueryGetCronsByOwnerRequest, opts ...grpc.CallOption) (*QueryGetCronsByOwnerResponse, error) {
	out := new(QueryGetCronsByOwnerResponse)
	err := c.cc.Invoke(ctx, "/helios.chronos.v1.Query/QueryGetCronsByOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryGetCronTransactionByNonce(ctx context.Context, in *QueryGetCronTransactionByNonceRequest, opts ...grpc.CallOption) (*QueryGetCronTransactionByNonceResponse, error) {
	out := new(QueryGetCronTransactionByNonceResponse)
	err := c.cc.Invoke(ctx, "/helios.chronos.v1.Query/QueryGetCronTransactionByNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryGetCronTransactionByHash(ctx context.Context, in *QueryGetCronTransactionByHashRequest, opts ...grpc.CallOption) (*QueryGetCronTransactionByHashResponse, error) {
	out := new(QueryGetCronTransactionByHashResponse)
	err := c.cc.Invoke(ctx, "/helios.chronos.v1.Query/QueryGetCronTransactionByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryGetCronTransactionReceiptLogsByBlockNumber(ctx context.Context, in *QueryGetCronTransactionReceiptLogsByBlockNumberRequest, opts ...grpc.CallOption) (*QueryGetCronTransactionReceiptLogsByBlockNumberResponse, error) {
	out := new(QueryGetCronTransactionReceiptLogsByBlockNumberResponse)
	err := c.cc.Invoke(ctx, "/helios.chronos.v1.Query/QueryGetCronTransactionReceiptLogsByBlockNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryGetCronTransactionReceiptsByBlockNumber(ctx context.Context, in *QueryGetCronTransactionReceiptsByBlockNumberRequest, opts ...grpc.CallOption) (*QueryGetCronTransactionReceiptsByBlockNumberResponse, error) {
	out := new(QueryGetCronTransactionReceiptsByBlockNumberResponse)
	err := c.cc.Invoke(ctx, "/helios.chronos.v1.Query/QueryGetCronTransactionReceiptsByBlockNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryGetCronTransactionReceiptByHash(ctx context.Context, in *QueryGetCronTransactionReceiptByHashRequest, opts ...grpc.CallOption) (*QueryGetCronTransactionReceiptByHashResponse, error) {
	out := new(QueryGetCronTransactionReceiptByHashResponse)
	err := c.cc.Invoke(ctx, "/helios.chronos.v1.Query/QueryGetCronTransactionReceiptByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryGetCronTransactionReceiptByNonce(ctx context.Context, in *QueryGetCronTransactionReceiptByNonceRequest, opts ...grpc.CallOption) (*QueryGetCronTransactionReceiptByNonceResponse, error) {
	out := new(QueryGetCronTransactionReceiptByNonceResponse)
	err := c.cc.Invoke(ctx, "/helios.chronos.v1.Query/QueryGetCronTransactionReceiptByNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryGetAllCronTransactionReceiptsByPageAndSize(ctx context.Context, in *QueryGetAllCronTransactionReceiptsByPageAndSizeRequest, opts ...grpc.CallOption) (*QueryGetAllCronTransactionReceiptsByPageAndSizeResponse, error) {
	out := new(QueryGetAllCronTransactionReceiptsByPageAndSizeResponse)
	err := c.cc.Invoke(ctx, "/helios.chronos.v1.Query/QueryGetAllCronTransactionReceiptsByPageAndSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryGetAllCronTransactionsByPageAndSize(ctx context.Context, in *QueryGetAllCronTransactionsByPageAndSizeRequest, opts ...grpc.CallOption) (*QueryGetAllCronTransactionsByPageAndSizeResponse, error) {
	out := new(QueryGetAllCronTransactionsByPageAndSizeResponse)
	err := c.cc.Invoke(ctx, "/helios.chronos.v1.Query/QueryGetAllCronTransactionsByPageAndSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryGetCronTransactionReceiptsByPageAndSize(ctx context.Context, in *QueryGetCronTransactionReceiptsByPageAndSizeRequest, opts ...grpc.CallOption) (*QueryGetCronTransactionReceiptsByPageAndSizeResponse, error) {
	out := new(QueryGetCronTransactionReceiptsByPageAndSizeResponse)
	err := c.cc.Invoke(ctx, "/helios.chronos.v1.Query/QueryGetCronTransactionReceiptsByPageAndSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryGetCronTransactionsByPageAndSize(ctx context.Context, in *QueryGetCronTransactionsByPageAndSizeRequest, opts ...grpc.CallOption) (*QueryGetCronTransactionsByPageAndSizeResponse, error) {
	out := new(QueryGetCronTransactionsByPageAndSizeResponse)
	err := c.cc.Invoke(ctx, "/helios.chronos.v1.Query/QueryGetCronTransactionsByPageAndSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryGetCronStatistics(ctx context.Context, in *QueryGetCronStatisticsRequest, opts ...grpc.CallOption) (*QueryGetCronStatisticsResponse, error) {
	out := new(QueryGetCronStatisticsResponse)
	err := c.cc.Invoke(ctx, "/helios.chronos.v1.Query/QueryGetCronStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryGetCronTransactionReceiptsHashsByBlockNumber(ctx context.Context, in *QueryGetCronTransactionReceiptsHashsByBlockNumberRequest, opts ...grpc.CallOption) (*QueryGetCronTransactionReceiptsHashsByBlockNumberResponse, error) {
	out := new(QueryGetCronTransactionReceiptsHashsByBlockNumberResponse)
	err := c.cc.Invoke(ctx, "/helios.chronos.v1.Query/QueryGetCronTransactionReceiptsHashsByBlockNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	QueryGetCron(context.Context, *QueryGetCronRequest) (*QueryGetCronResponse, error)
	QueryGetCronByAddress(context.Context, *QueryGetCronByAddressRequest) (*QueryGetCronByAddressResponse, error)
	QueryGetCrons(context.Context, *QueryGetCronsRequest) (*QueryGetCronsResponse, error)
	QueryGetCronsByOwner(context.Context, *QueryGetCronsByOwnerRequest) (*QueryGetCronsByOwnerResponse, error)
	QueryGetCronTransactionByNonce(context.Context, *QueryGetCronTransactionByNonceRequest) (*QueryGetCronTransactionByNonceResponse, error)
	QueryGetCronTransactionByHash(context.Context, *QueryGetCronTransactionByHashRequest) (*QueryGetCronTransactionByHashResponse, error)
	QueryGetCronTransactionReceiptLogsByBlockNumber(context.Context, *QueryGetCronTransactionReceiptLogsByBlockNumberRequest) (*QueryGetCronTransactionReceiptLogsByBlockNumberResponse, error)
	QueryGetCronTransactionReceiptsByBlockNumber(context.Context, *QueryGetCronTransactionReceiptsByBlockNumberRequest) (*QueryGetCronTransactionReceiptsByBlockNumberResponse, error)
	QueryGetCronTransactionReceiptByHash(context.Context, *QueryGetCronTransactionReceiptByHashRequest) (*QueryGetCronTransactionReceiptByHashResponse, error)
	QueryGetCronTransactionReceiptByNonce(context.Context, *QueryGetCronTransactionReceiptByNonceRequest) (*QueryGetCronTransactionReceiptByNonceResponse, error)
	QueryGetAllCronTransactionReceiptsByPageAndSize(context.Context, *QueryGetAllCronTransactionReceiptsByPageAndSizeRequest) (*QueryGetAllCronTransactionReceiptsByPageAndSizeResponse, error)
	QueryGetAllCronTransactionsByPageAndSize(context.Context, *QueryGetAllCronTransactionsByPageAndSizeRequest) (*QueryGetAllCronTransactionsByPageAndSizeResponse, error)
	QueryGetCronTransactionReceiptsByPageAndSize(context.Context, *QueryGetCronTransactionReceiptsByPageAndSizeRequest) (*QueryGetCronTransactionReceiptsByPageAndSizeResponse, error)
	QueryGetCronTransactionsByPageAndSize(context.Context, *QueryGetCronTransactionsByPageAndSizeRequest) (*QueryGetCronTransactionsByPageAndSizeResponse, error)
	QueryGetCronStatistics(context.Context, *QueryGetCronStatisticsRequest) (*QueryGetCronStatisticsResponse, error)
	QueryGetCronTransactionReceiptsHashsByBlockNumber(context.Context, *QueryGetCronTransactionReceiptsHashsByBlockNumberRequest) (*QueryGetCronTransactionReceiptsHashsByBlockNumberResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) QueryGetCron(ctx context.Context, req *QueryGetCronRequest) (*QueryGetCronResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGetCron not implemented")
}
func (*UnimplementedQueryServer) QueryGetCronByAddress(ctx context.Context, req *QueryGetCronByAddressRequest) (*QueryGetCronByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGetCronByAddress not implemented")
}
func (*UnimplementedQueryServer) QueryGetCrons(ctx context.Context, req *QueryGetCronsRequest) (*QueryGetCronsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGetCrons not implemented")
}
func (*UnimplementedQueryServer) QueryGetCronsByOwner(ctx context.Context, req *QueryGetCronsByOwnerRequest) (*QueryGetCronsByOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGetCronsByOwner not implemented")
}
func (*UnimplementedQueryServer) QueryGetCronTransactionByNonce(ctx context.Context, req *QueryGetCronTransactionByNonceRequest) (*QueryGetCronTransactionByNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGetCronTransactionByNonce not implemented")
}
func (*UnimplementedQueryServer) QueryGetCronTransactionByHash(ctx context.Context, req *QueryGetCronTransactionByHashRequest) (*QueryGetCronTransactionByHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGetCronTransactionByHash not implemented")
}
func (*UnimplementedQueryServer) QueryGetCronTransactionReceiptLogsByBlockNumber(ctx context.Context, req *QueryGetCronTransactionReceiptLogsByBlockNumberRequest) (*QueryGetCronTransactionReceiptLogsByBlockNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGetCronTransactionReceiptLogsByBlockNumber not implemented")
}
func (*UnimplementedQueryServer) QueryGetCronTransactionReceiptsByBlockNumber(ctx context.Context, req *QueryGetCronTransactionReceiptsByBlockNumberRequest) (*QueryGetCronTransactionReceiptsByBlockNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGetCronTransactionReceiptsByBlockNumber not implemented")
}
func (*UnimplementedQueryServer) QueryGetCronTransactionReceiptByHash(ctx context.Context, req *QueryGetCronTransactionReceiptByHashRequest) (*QueryGetCronTransactionReceiptByHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGetCronTransactionReceiptByHash not implemented")
}
func (*UnimplementedQueryServer) QueryGetCronTransactionReceiptByNonce(ctx context.Context, req *QueryGetCronTransactionReceiptByNonceRequest) (*QueryGetCronTransactionReceiptByNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGetCronTransactionReceiptByNonce not implemented")
}
func (*UnimplementedQueryServer) QueryGetAllCronTransactionReceiptsByPageAndSize(ctx context.Context, req *QueryGetAllCronTransactionReceiptsByPageAndSizeRequest) (*QueryGetAllCronTransactionReceiptsByPageAndSizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGetAllCronTransactionReceiptsByPageAndSize not implemented")
}
func (*UnimplementedQueryServer) QueryGetAllCronTransactionsByPageAndSize(ctx context.Context, req *QueryGetAllCronTransactionsByPageAndSizeRequest) (*QueryGetAllCronTransactionsByPageAndSizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGetAllCronTransactionsByPageAndSize not implemented")
}
func (*UnimplementedQueryServer) QueryGetCronTransactionReceiptsByPageAndSize(ctx context.Context, req *QueryGetCronTransactionReceiptsByPageAndSizeRequest) (*QueryGetCronTransactionReceiptsByPageAndSizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGetCronTransactionReceiptsByPageAndSize not implemented")
}
func (*UnimplementedQueryServer) QueryGetCronTransactionsByPageAndSize(ctx context.Context, req *QueryGetCronTransactionsByPageAndSizeRequest) (*QueryGetCronTransactionsByPageAndSizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGetCronTransactionsByPageAndSize not implemented")
}
func (*UnimplementedQueryServer) QueryGetCronStatistics(ctx context.Context, req *QueryGetCronStatisticsRequest) (*QueryGetCronStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGetCronStatistics not implemented")
}
func (*UnimplementedQueryServer) QueryGetCronTransactionReceiptsHashsByBlockNumber(ctx context.Context, req *QueryGetCronTransactionReceiptsHashsByBlockNumberRequest) (*QueryGetCronTransactionReceiptsHashsByBlockNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGetCronTransactionReceiptsHashsByBlockNumber not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios.chronos.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryGetCron_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCronRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryGetCron(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios.chronos.v1.Query/QueryGetCron",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryGetCron(ctx, req.(*QueryGetCronRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryGetCronByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCronByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryGetCronByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios.chronos.v1.Query/QueryGetCronByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryGetCronByAddress(ctx, req.(*QueryGetCronByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryGetCrons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCronsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryGetCrons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios.chronos.v1.Query/QueryGetCrons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryGetCrons(ctx, req.(*QueryGetCronsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryGetCronsByOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCronsByOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryGetCronsByOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios.chronos.v1.Query/QueryGetCronsByOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryGetCronsByOwner(ctx, req.(*QueryGetCronsByOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryGetCronTransactionByNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCronTransactionByNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryGetCronTransactionByNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios.chronos.v1.Query/QueryGetCronTransactionByNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryGetCronTransactionByNonce(ctx, req.(*QueryGetCronTransactionByNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryGetCronTransactionByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCronTransactionByHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryGetCronTransactionByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios.chronos.v1.Query/QueryGetCronTransactionByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryGetCronTransactionByHash(ctx, req.(*QueryGetCronTransactionByHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryGetCronTransactionReceiptLogsByBlockNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCronTransactionReceiptLogsByBlockNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryGetCronTransactionReceiptLogsByBlockNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios.chronos.v1.Query/QueryGetCronTransactionReceiptLogsByBlockNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryGetCronTransactionReceiptLogsByBlockNumber(ctx, req.(*QueryGetCronTransactionReceiptLogsByBlockNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryGetCronTransactionReceiptsByBlockNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCronTransactionReceiptsByBlockNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryGetCronTransactionReceiptsByBlockNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios.chronos.v1.Query/QueryGetCronTransactionReceiptsByBlockNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryGetCronTransactionReceiptsByBlockNumber(ctx, req.(*QueryGetCronTransactionReceiptsByBlockNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryGetCronTransactionReceiptByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCronTransactionReceiptByHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryGetCronTransactionReceiptByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios.chronos.v1.Query/QueryGetCronTransactionReceiptByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryGetCronTransactionReceiptByHash(ctx, req.(*QueryGetCronTransactionReceiptByHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryGetCronTransactionReceiptByNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCronTransactionReceiptByNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryGetCronTransactionReceiptByNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios.chronos.v1.Query/QueryGetCronTransactionReceiptByNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryGetCronTransactionReceiptByNonce(ctx, req.(*QueryGetCronTransactionReceiptByNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryGetAllCronTransactionReceiptsByPageAndSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllCronTransactionReceiptsByPageAndSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryGetAllCronTransactionReceiptsByPageAndSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios.chronos.v1.Query/QueryGetAllCronTransactionReceiptsByPageAndSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryGetAllCronTransactionReceiptsByPageAndSize(ctx, req.(*QueryGetAllCronTransactionReceiptsByPageAndSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryGetAllCronTransactionsByPageAndSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllCronTransactionsByPageAndSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryGetAllCronTransactionsByPageAndSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios.chronos.v1.Query/QueryGetAllCronTransactionsByPageAndSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryGetAllCronTransactionsByPageAndSize(ctx, req.(*QueryGetAllCronTransactionsByPageAndSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryGetCronTransactionReceiptsByPageAndSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCronTransactionReceiptsByPageAndSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryGetCronTransactionReceiptsByPageAndSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios.chronos.v1.Query/QueryGetCronTransactionReceiptsByPageAndSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryGetCronTransactionReceiptsByPageAndSize(ctx, req.(*QueryGetCronTransactionReceiptsByPageAndSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryGetCronTransactionsByPageAndSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCronTransactionsByPageAndSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryGetCronTransactionsByPageAndSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios.chronos.v1.Query/QueryGetCronTransactionsByPageAndSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryGetCronTransactionsByPageAndSize(ctx, req.(*QueryGetCronTransactionsByPageAndSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryGetCronStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCronStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryGetCronStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios.chronos.v1.Query/QueryGetCronStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryGetCronStatistics(ctx, req.(*QueryGetCronStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryGetCronTransactionReceiptsHashsByBlockNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCronTransactionReceiptsHashsByBlockNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryGetCronTransactionReceiptsHashsByBlockNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios.chronos.v1.Query/QueryGetCronTransactionReceiptsHashsByBlockNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryGetCronTransactionReceiptsHashsByBlockNumber(ctx, req.(*QueryGetCronTransactionReceiptsHashsByBlockNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "helios.chronos.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "QueryGetCron",
			Handler:    _Query_QueryGetCron_Handler,
		},
		{
			MethodName: "QueryGetCronByAddress",
			Handler:    _Query_QueryGetCronByAddress_Handler,
		},
		{
			MethodName: "QueryGetCrons",
			Handler:    _Query_QueryGetCrons_Handler,
		},
		{
			MethodName: "QueryGetCronsByOwner",
			Handler:    _Query_QueryGetCronsByOwner_Handler,
		},
		{
			MethodName: "QueryGetCronTransactionByNonce",
			Handler:    _Query_QueryGetCronTransactionByNonce_Handler,
		},
		{
			MethodName: "QueryGetCronTransactionByHash",
			Handler:    _Query_QueryGetCronTransactionByHash_Handler,
		},
		{
			MethodName: "QueryGetCronTransactionReceiptLogsByBlockNumber",
			Handler:    _Query_QueryGetCronTransactionReceiptLogsByBlockNumber_Handler,
		},
		{
			MethodName: "QueryGetCronTransactionReceiptsByBlockNumber",
			Handler:    _Query_QueryGetCronTransactionReceiptsByBlockNumber_Handler,
		},
		{
			MethodName: "QueryGetCronTransactionReceiptByHash",
			Handler:    _Query_QueryGetCronTransactionReceiptByHash_Handler,
		},
		{
			MethodName: "QueryGetCronTransactionReceiptByNonce",
			Handler:    _Query_QueryGetCronTransactionReceiptByNonce_Handler,
		},
		{
			MethodName: "QueryGetAllCronTransactionReceiptsByPageAndSize",
			Handler:    _Query_QueryGetAllCronTransactionReceiptsByPageAndSize_Handler,
		},
		{
			MethodName: "QueryGetAllCronTransactionsByPageAndSize",
			Handler:    _Query_QueryGetAllCronTransactionsByPageAndSize_Handler,
		},
		{
			MethodName: "QueryGetCronTransactionReceiptsByPageAndSize",
			Handler:    _Query_QueryGetCronTransactionReceiptsByPageAndSize_Handler,
		},
		{
			MethodName: "QueryGetCronTransactionsByPageAndSize",
			Handler:    _Query_QueryGetCronTransactionsByPageAndSize_Handler,
		},
		{
			MethodName: "QueryGetCronStatistics",
			Handler:    _Query_QueryGetCronStatistics_Handler,
		},
		{
			MethodName: "QueryGetCronTransactionReceiptsHashsByBlockNumber",
			Handler:    _Query_QueryGetCronTransactionReceiptsHashsByBlockNumber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helios/chronos/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetCronRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCronRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCronRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCronResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCronResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCronResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Cron.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetCronByAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCronByAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCronByAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCronByAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCronByAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCronByAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Cron.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetCronsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCronsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCronsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCronsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCronsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCronsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Crons) > 0 {
		for iNdEx := len(m.Crons) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Crons[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCronsByOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCronsByOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCronsByOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCronsByOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCronsByOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCronsByOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Crons) > 0 {
		for iNdEx := len(m.Crons) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Crons[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCronTransactionByNonceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCronTransactionByNonceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCronTransactionByNonceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCronTransactionByNonceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCronTransactionByNonceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCronTransactionByNonceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Transaction != nil {
		{
			size, err := m.Transaction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCronTransactionByHashRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCronTransactionByHashRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCronTransactionByHashRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCronTransactionByHashResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCronTransactionByHashResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCronTransactionByHashResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Transaction != nil {
		{
			size, err := m.Transaction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCronTransactionReceiptByNonceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCronTransactionReceiptByNonceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCronTransactionReceiptByNonceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCronTransactionReceiptByNonceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCronTransactionReceiptByNonceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCronTransactionReceiptByNonceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Transaction != nil {
		{
			size, err := m.Transaction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCronTransactionReceiptLogsByBlockNumberRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCronTransactionReceiptLogsByBlockNumberRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCronTransactionReceiptLogsByBlockNumberRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockNumber != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCronTransactionReceiptLogsByBlockNumberResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCronTransactionReceiptLogsByBlockNumberResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCronTransactionReceiptLogsByBlockNumberResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Logs) > 0 {
		for iNdEx := len(m.Logs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Logs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCronTransactionReceiptsByBlockNumberRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCronTransactionReceiptsByBlockNumberRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCronTransactionReceiptsByBlockNumberRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockNumber != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCronTransactionReceiptsByBlockNumberResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCronTransactionReceiptsByBlockNumberResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCronTransactionReceiptsByBlockNumberResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Transactions) > 0 {
		for iNdEx := len(m.Transactions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Transactions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCronTransactionReceiptByHashRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCronTransactionReceiptByHashRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCronTransactionReceiptByHashRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCronTransactionReceiptByHashResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCronTransactionReceiptByHashResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCronTransactionReceiptByHashResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Transaction != nil {
		{
			size, err := m.Transaction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllCronTransactionReceiptsByPageAndSizeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllCronTransactionReceiptsByPageAndSizeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllCronTransactionReceiptsByPageAndSizeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllCronTransactionReceiptsByPageAndSizeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllCronTransactionReceiptsByPageAndSizeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllCronTransactionReceiptsByPageAndSizeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Transactions) > 0 {
		for iNdEx := len(m.Transactions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Transactions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllCronTransactionsByPageAndSizeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllCronTransactionsByPageAndSizeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllCronTransactionsByPageAndSizeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllCronTransactionsByPageAndSizeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllCronTransactionsByPageAndSizeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllCronTransactionsByPageAndSizeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Transactions) > 0 {
		for iNdEx := len(m.Transactions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Transactions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCronTransactionReceiptsByPageAndSizeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCronTransactionReceiptsByPageAndSizeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCronTransactionReceiptsByPageAndSizeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCronTransactionReceiptsByPageAndSizeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCronTransactionReceiptsByPageAndSizeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCronTransactionReceiptsByPageAndSizeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Transactions) > 0 {
		for iNdEx := len(m.Transactions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Transactions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCronTransactionsByPageAndSizeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCronTransactionsByPageAndSizeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCronTransactionsByPageAndSizeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCronTransactionsByPageAndSizeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCronTransactionsByPageAndSizeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCronTransactionsByPageAndSizeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Transactions) > 0 {
		for iNdEx := len(m.Transactions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Transactions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCronStatisticsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCronStatisticsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCronStatisticsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetCronStatisticsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCronStatisticsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCronStatisticsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Statistics.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetCronTransactionReceiptsHashsByBlockNumberRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCronTransactionReceiptsHashsByBlockNumberRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCronTransactionReceiptsHashsByBlockNumberRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockNumber != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCronTransactionReceiptsHashsByBlockNumberResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCronTransactionReceiptsHashsByBlockNumberResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCronTransactionReceiptsHashsByBlockNumberResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hashs) > 0 {
		for iNdEx := len(m.Hashs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Hashs[iNdEx])
			copy(dAtA[i:], m.Hashs[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Hashs[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetCronRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetCronResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Cron.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetCronByAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCronByAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Cron.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetCronsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCronsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Crons) > 0 {
		for _, e := range m.Crons {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCronsByOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCronsByOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Crons) > 0 {
		for _, e := range m.Crons {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCronTransactionByNonceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	return n
}

func (m *QueryGetCronTransactionByNonceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Transaction != nil {
		l = m.Transaction.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCronTransactionByHashRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCronTransactionByHashResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Transaction != nil {
		l = m.Transaction.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCronTransactionReceiptByNonceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	return n
}

func (m *QueryGetCronTransactionReceiptByNonceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Transaction != nil {
		l = m.Transaction.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCronTransactionReceiptLogsByBlockNumberRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockNumber != 0 {
		n += 1 + sovQuery(uint64(m.BlockNumber))
	}
	return n
}

func (m *QueryGetCronTransactionReceiptLogsByBlockNumberResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Logs) > 0 {
		for _, e := range m.Logs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetCronTransactionReceiptsByBlockNumberRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockNumber != 0 {
		n += 1 + sovQuery(uint64(m.BlockNumber))
	}
	return n
}

func (m *QueryGetCronTransactionReceiptsByBlockNumberResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Transactions) > 0 {
		for _, e := range m.Transactions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetCronTransactionReceiptByHashRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCronTransactionReceiptByHashResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Transaction != nil {
		l = m.Transaction.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAllCronTransactionReceiptsByPageAndSizeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAllCronTransactionReceiptsByPageAndSizeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Transactions) > 0 {
		for _, e := range m.Transactions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAllCronTransactionsByPageAndSizeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAllCronTransactionsByPageAndSizeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Transactions) > 0 {
		for _, e := range m.Transactions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCronTransactionReceiptsByPageAndSizeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCronTransactionReceiptsByPageAndSizeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Transactions) > 0 {
		for _, e := range m.Transactions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCronTransactionsByPageAndSizeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCronTransactionsByPageAndSizeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Transactions) > 0 {
		for _, e := range m.Transactions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCronStatisticsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetCronStatisticsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Statistics.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetCronTransactionReceiptsHashsByBlockNumberRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockNumber != 0 {
		n += 1 + sovQuery(uint64(m.BlockNumber))
	}
	return n
}

func (m *QueryGetCronTransactionReceiptsHashsByBlockNumberResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Hashs) > 0 {
		for _, s := range m.Hashs {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCronRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCronRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCronRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCronResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCronResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCronResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cron", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Cron.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCronByAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCronByAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCronByAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCronByAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCronByAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCronByAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cron", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Cron.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCronsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCronsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCronsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCronsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCronsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCronsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crons", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Crons = append(m.Crons, Cron{})
			if err := m.Crons[len(m.Crons)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCronsByOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCronsByOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCronsByOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCronsByOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCronsByOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCronsByOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crons", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Crons = append(m.Crons, Cron{})
			if err := m.Crons[len(m.Crons)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCronTransactionByNonceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCronTransactionByNonceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCronTransactionByNonceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCronTransactionByNonceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCronTransactionByNonceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCronTransactionByNonceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transaction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Transaction == nil {
				m.Transaction = &CronTransactionRPC{}
			}
			if err := m.Transaction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCronTransactionByHashRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCronTransactionByHashRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCronTransactionByHashRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCronTransactionByHashResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCronTransactionByHashResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCronTransactionByHashResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transaction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Transaction == nil {
				m.Transaction = &CronTransactionRPC{}
			}
			if err := m.Transaction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCronTransactionReceiptByNonceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCronTransactionReceiptByNonceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCronTransactionReceiptByNonceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCronTransactionReceiptByNonceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCronTransactionReceiptByNonceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCronTransactionReceiptByNonceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transaction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Transaction == nil {
				m.Transaction = &CronTransactionReceiptRPC{}
			}
			if err := m.Transaction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCronTransactionReceiptLogsByBlockNumberRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCronTransactionReceiptLogsByBlockNumberRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCronTransactionReceiptLogsByBlockNumberRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNumber", wireType)
			}
			m.BlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCronTransactionReceiptLogsByBlockNumberResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCronTransactionReceiptLogsByBlockNumberResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCronTransactionReceiptLogsByBlockNumberResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logs = append(m.Logs, &types.Log{})
			if err := m.Logs[len(m.Logs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCronTransactionReceiptsByBlockNumberRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCronTransactionReceiptsByBlockNumberRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCronTransactionReceiptsByBlockNumberRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNumber", wireType)
			}
			m.BlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCronTransactionReceiptsByBlockNumberResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCronTransactionReceiptsByBlockNumberResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCronTransactionReceiptsByBlockNumberResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transactions = append(m.Transactions, &CronTransactionReceiptRPC{})
			if err := m.Transactions[len(m.Transactions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCronTransactionReceiptByHashRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCronTransactionReceiptByHashRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCronTransactionReceiptByHashRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCronTransactionReceiptByHashResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCronTransactionReceiptByHashResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCronTransactionReceiptByHashResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transaction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Transaction == nil {
				m.Transaction = &CronTransactionReceiptRPC{}
			}
			if err := m.Transaction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllCronTransactionReceiptsByPageAndSizeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllCronTransactionReceiptsByPageAndSizeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllCronTransactionReceiptsByPageAndSizeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllCronTransactionReceiptsByPageAndSizeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllCronTransactionReceiptsByPageAndSizeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllCronTransactionReceiptsByPageAndSizeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transactions = append(m.Transactions, &CronTransactionReceiptRPC{})
			if err := m.Transactions[len(m.Transactions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllCronTransactionsByPageAndSizeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllCronTransactionsByPageAndSizeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllCronTransactionsByPageAndSizeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllCronTransactionsByPageAndSizeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllCronTransactionsByPageAndSizeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllCronTransactionsByPageAndSizeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transactions = append(m.Transactions, &CronTransactionRPC{})
			if err := m.Transactions[len(m.Transactions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCronTransactionReceiptsByPageAndSizeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCronTransactionReceiptsByPageAndSizeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCronTransactionReceiptsByPageAndSizeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCronTransactionReceiptsByPageAndSizeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCronTransactionReceiptsByPageAndSizeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCronTransactionReceiptsByPageAndSizeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transactions = append(m.Transactions, &CronTransactionReceiptRPC{})
			if err := m.Transactions[len(m.Transactions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCronTransactionsByPageAndSizeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCronTransactionsByPageAndSizeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCronTransactionsByPageAndSizeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCronTransactionsByPageAndSizeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCronTransactionsByPageAndSizeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCronTransactionsByPageAndSizeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transactions = append(m.Transactions, &CronTransactionRPC{})
			if err := m.Transactions[len(m.Transactions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCronStatisticsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCronStatisticsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCronStatisticsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCronStatisticsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCronStatisticsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCronStatisticsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statistics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Statistics.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCronTransactionReceiptsHashsByBlockNumberRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCronTransactionReceiptsHashsByBlockNumberRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCronTransactionReceiptsHashsByBlockNumberRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNumber", wireType)
			}
			m.BlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCronTransactionReceiptsHashsByBlockNumberResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCronTransactionReceiptsHashsByBlockNumberResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCronTransactionReceiptsHashsByBlockNumberResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hashs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hashs = append(m.Hashs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
