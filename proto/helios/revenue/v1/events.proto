// Copyright Tharsis Labs Ltd.(Evmos)
// SPDX-License-Identifier:LGPL-3.0-only
syntax = "proto3";
package helios.revenue.v1;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";

option go_package = "helios-core/helios-chain/x/revenue/v1/types";

// EventRegisterRevenue is an event emitted when a contract is registered to receive a percentage of tx fees.
message EventRegisterRevenue {
  // deployer_address is the bech32 address of message sender. It must be the same as the origin EOA
  // sending the transaction which deploys the contract
  string deployer_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // contract_address in hex format
  string contract_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // effective_withdrawer is the withdrawer address that is stored after the
  // revenue registration is completed. It defaults to the deployer address if
  // the withdrawer address in the msg is omitted. When omitted, the withdraw map
  // doesn't need to be set.
  string effective_withdrawer = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// EventUpdateRevenue is an event emitted when a withdrawer address is updated for a contract.
message EventUpdateRevenue {
  // contract_address in hex format
  string contract_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // deployer_address is the bech32 address of message sender. It must be the same as the origin EOA
  // sending the transaction which deploys the contract
  string deployer_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // withdrawer_address is the bech32 address of account receiving the transaction fees
  string withdrawer_address = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// EventCancelRevenue is an event emitted when a contract is unregistered from receiving tx fees.
message EventCancelRevenue {
  // deployer_address is the bech32 address of message sender. It must be the same as the origin EOA
  // sending the transaction which deploys the contract
  string deployer_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // contract_address in hex format
  string contract_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// EventDistributeRevenue is an event emitted when a contract receives a percentage of tx fees.
message EventDistributeRevenue {
  // sender is the address of message sender.
  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // contract address in hex format
  string contract = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // withdrawer_address is the bech32 address of account receiving the transaction fees
  string withdrawer_address = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // amount of revenue distributed
  string amount = 4 [(cosmos_proto.scalar) = "cosmos.Int", (gogoproto.customtype) = "cosmossdk.io/math.Int"];
}
