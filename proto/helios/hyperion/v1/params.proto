syntax = "proto3";
package helios.hyperion.v1;

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "amino/amino.proto";

option go_package = "helios-core/helios-chain/x/hyperion/types";

// Params represent the hyperion genesis and store parameters

message Params {
  option (amino.name) = "hyperion/Params";
  option (gogoproto.stringer) = false;

  repeated CounterpartyChainParams counterparty_chain_params = 1;

  repeated string admins = 2;
}

// CounterpartyChainParams represent the hyperion genesis and store parameters 
// related to a conterparty chain
// hyperion_id:
// a random 32 byte value to prevent signature reuse, for example if the
// cosmos validators decided to use the same Ethereum keys for another chain
// also running Hyperion we would not want it to be possible to play a deposit
// from chain A back on chain B's hyperion. This value IS USED ON EACH COUNTERPARTY
// CHAIN so it must be set in your genesis.json before launch and not changed after
// deploying Hyperion
//
// contract_hash:
// the code hash of a known good version of the Hyperion contract
// solidity code. This can be used to verify the correct version
// of the contract has been deployed. This is a reference value for
// goernance action only it is never read by any Hyperion code
//
// bridge_counterparty_address:
// is address of the bridge contract on the Ethereum side, this is a
// reference value for governance only and is not actually used by any
// Hyperion code
//
// bridge_chain_id:
// the unique identifier of the EVM counterparty chain, this is a reference value
// only and is not actually used by any Hyperion code
//
// These reference values may be used by future Hyperion client implemetnations
// to allow for saftey features or convenience features like the hyperion address
// in your relayer. A relayer would require a configured hyperion address if
// governance had not set the address on the chain it was relaying for.
//
// signed_valsets_window
// signed_batches_window
// signed_claims_window
//
// These values represent the time in blocks that a validator has to submit
// a signature for a batch or valset, or to submit a claim for a particular
// attestation nonce. In the case of attestations this clock starts when the
// attestation is created, but only allows for slashing once the event has
// passed
//
// target_batch_timeout:
//
// This is the 'target' value for when batches time out, this is a target
// becuase Ethereum is a probabalistic chain and you can't say for sure what the
// block frequency is ahead of time.
//
// average_block_time
// average_counterparty_block_time
//
// These values are the average Cosmos block time and EVM counterparty block time
// repsectively and they are used to copute what the target batch timeout is. It
// is important that governance updates these in case of any major, prolonged
// change in the time it takes to produce a block
//
// slash_fraction_valset
// slash_fraction_batch
// slash_fraction_claim
// slash_fraction_conflicting_claim
//
// The slashing fractions for the various hyperion related slashing conditions. The
// first three refer to not submitting a particular message, the third for
// submitting a different claim for the same Ethereum event
//
// unbond_slashing_valsets_window
//
// The unbond slashing valsets window is used to determine how many blocks after
// starting to unbond a validator needs to continue signing blocks. The goal of
// this paramater is that when a validator leaves the set, if their leaving
// creates enough change in the validator set to justify an update they will
// sign a validator set update for the Ethereum bridge that does not include
// themselves. Allowing us to remove them from the Ethereum bridge and replace
// them with the new set gracefully.
//
// valset_reward
//
// Valset rewards are the amount of tokens this chain issues to relayers of
// validator sets. These can be any ERC20 token in the bridge, but it's strongly
// advised that chains use only Cosmos originated tokens, which the bridge
// effectively mints on Ethereum. If you run out of the token you are using for
// validator set rewards valset updates will fail and the bridge will be
// vulnerable to highjacking. For these paramaters the zero values are special
// and indicate not to attempt any reward. This is the default for
// bootstrapping.

message CounterpartyChainParams {
  option (amino.name) = "hyperion/CounterpartyChainParams";
  option (gogoproto.stringer) = false;

  uint64 hyperion_id = 1;
  string contract_source_hash = 2;
  string bridge_counterparty_address = 3;
  uint64 bridge_chain_id = 4;
  uint64 signed_valsets_window = 5;
  uint64 signed_batches_window = 6;
  uint64 signed_claims_window = 7;
  uint64 target_batch_timeout = 8;
  uint64 target_outgoing_tx_timeout = 9;
  uint64 average_block_time = 10;
  uint64 average_counterparty_block_time = 11;
  bytes slash_fraction_valset = 12 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
  bytes slash_fraction_batch = 13 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
  bytes slash_fraction_claim = 14 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
  bytes slash_fraction_conflicting_claim = 15 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
  uint64 unbond_slashing_valsets_window = 16;
  bytes slash_fraction_bad_eth_signature = 17 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
  string cosmos_coin_denom = 18;
  string cosmos_coin_erc20_contract = 19;
  bool claim_slashing_enabled = 20;
  uint64 bridge_contract_start_height = 21;

  cosmos.base.v1beta1.Coin valset_reward = 22 [ (gogoproto.nullable) = false ];
}
