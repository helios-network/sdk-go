syntax = "proto3";
package helios.hyperion.v1;
import "gogoproto/gogo.proto";
import "cosmos/bank/v1beta1/bank.proto";
import "helios/hyperion/v1/attestation.proto";

option go_package = "helios-core/helios-chain/x/hyperion/types";

// BridgeValidator represents a validator's ETH address and its power
message BridgeValidator {
  uint64 power = 1;
  string ethereum_address = 2;
}

// Valset is the Ethereum Bridge Multsig Set, each hyperion validator also
// maintains an ETH key to sign messages for each counterparty chain, these are 
// used to check signatures on counterparty chain because of the significant gas savings
message Valset {
  uint64 hyperion_id = 1;
  uint64 nonce = 2;
  repeated BridgeValidator members = 3;
  uint64 height = 4;
  string reward_amount = 5 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
  // the reward token in it's Ethereum hex address representation
  string reward_token = 6;
}

// LastObservedEthereumBlockHeight stores the last observed
// Ethereum block height along with the Cosmos block height that
// it was observed at. These two numbers can be used to project
// outward and always produce batches with timeouts in the future
// even if no Ethereum block height has been relayed for a long time
message LastObservedEthereumBlockHeight {
  uint64 cosmos_block_height = 1;
  uint64 ethereum_block_height = 2;
}

// LastClaimEvent stores last claim event details of validator.
message LastClaimEvent {
  string chain_id = 1;
  uint64 ethereum_event_nonce = 2;
  uint64 ethereum_event_height = 3;
}

// This records the relationship between an bridged token and the denom
// of the corresponding Cosmos originated asset
message TokenAddressToDenom {
  string chain_id = 1;
  string token_address = 2;
  string denom = 3;
  string symbol = 4;
  uint64 decimals = 5;
  bool is_cosmos_originated = 6;
  bool is_concensus_token = 7;
}

message HolderWithAmount {
  string address = 1;
  string amount = 2 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
}

message TokenAddressToDenomWithGenesisInfos {
  TokenAddressToDenom token_address_to_denom = 1;
  repeated HolderWithAmount default_holders = 2;
  string logo = 3;
}

message TokenMetadata {
  string symbol = 1;
  string name = 2;
  uint64 decimals = 3;
}

message ClaimData {
  TokenMetadata metadata = 1;
  string data = 2;
}

message Proof {
  string orchestrators = 1;
  string hashs = 2;
}

message TransferTx {
  uint64 hyperion_id = 1 [(gogoproto.jsontag) = "hyperionId"];
  uint64 id = 2;
  uint64 height = 3;
  string sender = 4;
  string dest_address = 5 [(gogoproto.jsontag) = "destAddress"];
  Token received_token = 6 [(gogoproto.jsontag) = "receivedToken"];
  Token sent_token = 7 [(gogoproto.jsontag) = "sentToken"];
  Token received_fee = 8 [(gogoproto.jsontag) = "receivedFee"];
  Token sent_fee = 9 [(gogoproto.jsontag) = "sentFee"];
  string status = 10;
  string direction = 11;
  uint64 chain_id = 12 [(gogoproto.jsontag) = "chainId"];
  Proof proof = 13;
  string tx_hash = 14 [(gogoproto.jsontag) = "txHash"];
  uint64 index = 15;
}

message Rpc {
  string url = 1;
  uint64 reputation = 2;
  uint64 last_height_used = 3;
}

message LastFinalizedTxIndex {
  repeated TransferTx txs = 1;
}

message FullMetadataToken {
  cosmos.bank.v1beta1.Metadata metadata = 1;
  uint64   holders_count = 2 [(gogoproto.jsontag) = "holdersCount"];
  string   total_supply  = 3 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
}

message BatchNonceWithSignature {
  string token_contract = 1;
  uint64 nonce = 2;
  string signature = 3;
}