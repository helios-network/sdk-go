

syntax = "proto3";
package helios.erc20.v1;

import "amino/amino.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "helios/erc20/v1/erc20.proto"; // Reuse Asset definition from here
import "helios/erc20/v1/genesis.proto";

option go_package = "helios-core/helios-chain/x/erc20/types";

// Query defines the gRPC querier service.
service Query {
  // TokenPairs retrieves registered token pairs
  rpc TokenPairs(QueryTokenPairsRequest) returns (QueryTokenPairsResponse) {
    option (google.api.http).get = "/helios/erc20/v1/token_pairs";
  }

  // TokenPair retrieves a registered token pair
  rpc TokenPair(QueryTokenPairRequest) returns (QueryTokenPairResponse) {
    option (google.api.http).get = "/helios/erc20/v1/token_pairs/{token}";
  }

  // Params retrieves the erc20 module params
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/helios/erc20/v1/params";
  }

  // WhitelistedAssets retrieves all whitelisted assets
  rpc WhitelistedAssets(QueryWhitelistedAssetsRequest)
      returns (QueryWhitelistedAssetsResponse) {
    option (google.api.http).get = "/helios/erc20/v1/whitelisted_assets";
  }

  // BalanceOf queries the balance of an ERC20 token for a single account.
  rpc ERC20BalanceOf(QueryERC20BalanceOfRequest) returns (QueryERC20BalanceOfResponse) {
    option (google.api.http).get = "/helios/erc20/v1/balanceof/{address}/{token}";
  }
}

// QueryTokenPairsRequest is the request type for the Query/TokenPairs RPC
// method.
message QueryTokenPairsRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryTokenPairsResponse is the response type for the Query/TokenPairs RPC
// method.
message QueryTokenPairsResponse {
  // token_pairs is a slice of registered token pairs for the erc20 module
  repeated TokenPair token_pairs = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryTokenPairRequest is the request type for the Query/TokenPair RPC method.
message QueryTokenPairRequest {
  // token identifier can be either the hex contract address of the ERC20 or the
  // Cosmos base denomination
  string token = 1;
}

// QueryTokenPairResponse is the response type for the Query/TokenPair RPC
// method.
message QueryTokenPairResponse {
  // token_pair returns the info about a registered token pair for the erc20
  // module
  TokenPair token_pair = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params are the erc20 module parameters
  Params params = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// QueryWhitelistedAssetsRequest is the request type for the
// Query/WhitelistedAssets RPC method.
message QueryWhitelistedAssetsRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryWhitelistedAssetsResponse is the response type for the
// Query/WhitelistedAssets RPC method.
message QueryWhitelistedAssetsResponse {
  // assets is a slice of all whitelisted assets
  repeated Asset assets = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryBalanceOfRequest is the request type for the Query/BalanceOf RPC method
message QueryERC20BalanceOfRequest {
  // address is the ethereum hex address to query the balance for.
  string address = 1;
  // token is the ethereum hex address of the ERC20 token.
  string token = 2;
}

// QueryBalanceOfResponse is the response type for the Query/BalanceOf RPC method
message QueryERC20BalanceOfResponse {
  // balance is the balance of the ERC20 token for the address.
  string balance = 1;
}