syntax = "proto3";
package helios.erc20.v1;

import "amino/amino.proto";
import "cosmos/bank/v1beta1/bank.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";

option go_package = "helios-core/helios-chain/x/erc20/types";

// Owner enumerates the ownership of a ERC20 contract.
enum Owner {
  option (gogoproto.goproto_enum_prefix) = false;
  // OWNER_UNSPECIFIED defines an invalid/undefined owner.
  OWNER_UNSPECIFIED = 0;
  // OWNER_MODULE - erc20 is owned by the erc20 module account.
  OWNER_MODULE = 1;
  // OWNER_EXTERNAL - erc20 is owned by an external account.
  OWNER_EXTERNAL = 2;
}

// TokenPair defines an instance that records a pairing consisting of a native
// Cosmos Coin and an ERC20 token address.
message TokenPair {
  option (gogoproto.equal) = true;
  // erc20_address is the hex address of ERC20 contract token
  string erc20_address = 1;
  // denom defines the cosmos base denomination to be mapped to
  string denom = 2;
  // enabled defines the token mapping enable status
  bool enabled = 3;
  // contract_owner is the an ENUM specifying the type of ERC20 owner (0
  // invalid, 1 ModuleAccount, 2 external address)
  Owner contract_owner = 4;
}

// protolint:disable MESSAGES_HAVE_COMMENT

// Deprecated: RegisterCoinProposal is a gov Content type to register a token
// pair for a native Cosmos coin. We're keeping it to remove the existing
// proposals from store. After that, remove this message. NOTE: Keep this
// message for backwards compatibility on proposals query
message RegisterCoinProposal {
  option (gogoproto.equal) = false;
  // title of the proposal
  string title = 1;
  // description of the proposal
  string description = 2;
  // metadata slice of the native Cosmos coins
  repeated cosmos.bank.v1beta1.Metadata metadata = 3 [(gogoproto.nullable) = false];
}

// Deprecated: ProposalMetadata is used to parse a slice of denom metadata and
// generate the RegisterCoinProposal content. We're keeping it to remove the
// existing proposals from store. After that, remove this message.
message ProposalMetadata {
  // metadata slice of the native Cosmos coins
  repeated cosmos.bank.v1beta1.Metadata metadata = 1 [(gogoproto.nullable) = false];
}

// Deprecated: RegisterERC20Proposal is a gov Content type to register a token
// pair for an ERC20 token. NOTE: Keep this message for backwards compatibility
// on proposals query
message RegisterERC20Proposal {
  option (gogoproto.equal) = false;
  // title of the proposal
  string title = 1;
  // description of the proposal
  string description = 2;
  // erc20addresses is a slice of  ERC20 token contract addresses
  repeated string erc20addresses = 3;
}

// Deprecated: ToggleTokenConversionProposal is a gov Content type to toggle the
// conversion of a token pair. NOTE: Keep this message for backwards
// compatibility on proposals query
message ToggleTokenConversionProposal {
  option (gogoproto.equal) = true;
  // title of the proposal
  string title = 1;
  // description of the proposal
  string description = 2;
  // token identifier can be either the hex contract address of the ERC20 or the
  // Cosmos base denomination
  string token = 3;
}

message AddNewAssetConsensusProposal {
  option (amino.name) = "erc20/AddNewAssetConsensusProposal";
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_getters) = false;

  option (cosmos_proto.implements_interface) = "cosmos.gov.v1beta1.Content";

  string title = 1; // Title of the proposal
  string description = 2; // Description of the proposal
  repeated Asset assets = 3; // List of assets to whitelist
  uint64 initial_deposit = 4; // Initial deposit for the proposal
}

message RemoveAssetConsensusProposal {
  option (amino.name) = "erc20/RemoveAssetConsensusProposal";
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_getters) = false;
  option (cosmos_proto.implements_interface) = "cosmos.gov.v1beta1.Content";

  string title = 1; // Title of the proposal
  string description = 2; // Description of the proposal
  repeated string denoms = 3; // List of asset denominations to remove
  uint64 initial_deposit = 4; // Initial deposit for the proposal
}

message UpdateAssetConsensusProposal {
  option (amino.name) = "erc20/UpdateAssetConsensusProposal";
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_getters) = false;

  option (cosmos_proto.implements_interface) = "cosmos.gov.v1beta1.Content";

  string title = 1; // Title of the proposal
  string description = 2; // Description of the proposal
  repeated WeightUpdate updates = 3; // List of weight updates
  uint64 initial_deposit = 4; // Initial deposit for the proposal
}

message Asset {
  option (gogoproto.equal) = true; // Enable the Equal method generation

  string denom = 1; // Asset denomination (e.g., USDT, DAI)
  string contract_address = 2; // Smart contract address of the asset
  string chain_id = 3; // Chain ID of the blockchain hosting the asset
  string chain_name = 4; // Name of the chain
  uint64 decimals = 5; // Number of decimal places
  uint64 base_weight = 6; // Base weight for rewards calculation
  string symbol = 7; // Symbol of the asset
  bool archived = 8; // Indicates if the asset is archived (removed from active staking but kept for undelegation)
}

message WeightUpdate {
  option (gogoproto.equal) = true; // Enable the Equal method generation

  string denom = 1; // Asset denomination (e.g., ETH, BNB, USDT)
  string magnitude = 2; // Magnitude of weight change: small, medium, or high
  string direction = 3; // Direction of weight change: up or down
}
